
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	00 1b 00 20 19 1a 00 00 0b 61 00 00 d1 19 00 00     ... .....a......
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
  10:	d1 19 00 00 d1 19 00 00 d1 19 00 00 d1 19 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	95 16 00 00 d1 19 00 00 00 00 00 00 39 16 00 00     ............9...
	unsigned int s_ro_cnt = 0; /* number of ro strings */
  3c:	d1 19 00 00                                         ....

00000040 <_irq_vector_table>:
	unsigned int s_rw_cnt = 0; /* number of rw strings */
  40:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  50:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
  60:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
  70:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
  80:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  90:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
					str_ptr_arg[s_idx] = arg_idx;
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
  a0:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
  b0:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  c0:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
				parsing = false;
  d0:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
					arg_idx++;
  e0:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
			switch (*fmt) {
  f0:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
 100:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
 110:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
				arg_idx--;
 120:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
			switch (*fmt) {
 130:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
			if (*++fmt == '\0') {
 140:	25 17 00 00 25 17 00 00 25 17 00 00 25 17 00 00     %...%...%...%...
			switch (*fmt) {
 150:	25 17 00 00                                         %...

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	4686      	mov	lr, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x74>
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x6c>
     1da:	18eb      	adds	r3, r5, r3
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x70>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x58>
     20e:	42a0      	cmp	r0, r4
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x58>
     212:	f1ac 0302 	sub.w	r3, ip, #2
     216:	442c      	add	r4, r5
				parsing = false;
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
				align = VA_STACK_ALIGN(size_t);
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x68>
				size = sizeof(size_t);
     220:	40d4      	lsrs	r4, r2
				continue;
     222:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(ptrdiff_t);
     224:	6034      	str	r4, [r6, #0]
     226:	6073      	str	r3, [r6, #4]
				size = sizeof(ptrdiff_t);
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (fmt[-1] == 'l') {
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
				parsing = false;
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x58>
		buf = (void *) ROUND_UP(buf, align);
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     240:	0c20      	lsrs	r0, r4, #16
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
     24a:	fb0c f807 	mul.w	r8, ip, r7
		if (is_str_arg) {
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     252:	4598      	cmp	r8, r3
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
     25c:	d204      	bcs.n	268 <CONFIG_SRAM_SIZE+0xa8>
     25e:	4598      	cmp	r8, r3
			long long v = va_arg(ap, long long);
     260:	d902      	bls.n	268 <CONFIG_SRAM_SIZE+0xa8>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
     268:	eba3 0308 	sub.w	r3, r3, r8
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
     272:	fb0e 331c 	mls	r3, lr, ip, r3
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     276:	fb0c f707 	mul.w	r7, ip, r7
				}
			}
			buf += sizeof(long long);
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
					if (fmt[-2] == 'l') {
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
				parsing = false;
     284:	f10c 33ff 	add.w	r3, ip, #4294967295
						align = VA_STACK_ALIGN(long);
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
						size = sizeof(long);
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
				parsing = false;
     28e:	f1ac 0302 	sub.w	r3, ip, #2
						align = VA_STACK_ALIGN(long long);
     292:	442c      	add	r4, r5
						size = sizeof(long long);
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
				if (fmt[-1] == 'L') {
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
					v.d = va_arg(ap, double);
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				buf = (void *) ROUND_UP(buf, align);
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
				if (buf0 != NULL) {
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
					if (BUF_OFFSET + size > len) {
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
					} else if (fmt[-1] == 'L') {
     2c0:	fb0c f807 	mul.w	r8, ip, r7
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
						*(double *)buf = v.d;
     2c8:	4588      	cmp	r8, r1
				buf += size;
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
				parsing = false;
     2cc:	1869      	adds	r1, r5, r1
				continue;
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
					v.ld = va_arg(ap, long double);
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
     2dc:	4429      	add	r1, r5
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
					size = sizeof(long double);
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
						return -ENOSPC;
     2ec:	fb0c f707 	mul.w	r7, ip, r7
						*(long double *)buf = v.ld;
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
				parsing = false;
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
				align = VA_STACK_ALIGN(void *);
     2f8:	18eb      	adds	r3, r5, r3
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295
				size = sizeof(void *);
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
				is_str_arg = true;
     300:	429f      	cmp	r7, r3
				parsing = false;
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
				align = VA_STACK_ALIGN(void *);
     304:	f1ac 0102 	sub.w	r1, ip, #2
				size = sizeof(void *);
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
			s = va_arg(ap, char *);
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x7a>
     312:	4660      	mov	r0, ip
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
			if (*++fmt == '\0') {
     31a:	4660      	mov	r0, ip
     31c:	e7a4      	b.n	268 <CONFIG_SRAM_SIZE+0xa8>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     31e:	4663      	mov	r3, ip
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     32e:	e9c6 e000 	strd	lr, r0, [r6]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
						s_rw_cnt++;
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
     34c:	469c      	mov	ip, r3
				} else if (is_ro) {
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
					len += 1;
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     354:	4638      	mov	r0, r7
				} else if (rws_pos_en) {
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
     358:	e9c6 4c00 	strd	r4, ip, [r6]
					len += 2;
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
					len += strlen(s) + 1 + 1;
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
     368:	fa22 f40c 	lsr.w	r4, r2, ip
			int v = va_arg(ap, int);
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
			if (buf0 != NULL) {
     374:	fa20 f30c 	lsr.w	r3, r0, ip
			buf += sizeof(int);
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
	if (buf0 == NULL) {
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     388:	fb09 3018 	mls	r0, r9, r8, r3

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr

	if (rws_pos_en) {
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     396:	459a      	cmp	sl, r3
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     39c:	f108 30ff 	add.w	r0, r8, #4294967295
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
		pkg_hdr->desc.rw_str_cnt = 0;
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
		for (i = 0; i < s_idx; i++) {
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     3d6:	4421      	add	r1, r4
			if (BUF_OFFSET + 1 > len) {
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
			*buf++ = pos;
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
		for (i = 0; i < s_idx; i++) {
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
		if (rws_pos_en) {
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
			*buf++ = str_ptr_arg[i];
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
			size = 0;
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
		buf += size;
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <button_changed>:
#define ClearBit(x, y) (x &= ~(1<<y))     // 特定位清0
#define GetBit(x, y)   (x &= (1<<y))      // 特定位取值
#define ReveBit(x, y)  (x ^= (1<<y))      // 特定位取反

static void button_changed(uint32_t button_state, uint32_t has_changed)
{
     424:	b510      	push	{r4, lr}
	uint32_t buttons = button_state & has_changed;
     426:	ea00 0401 	and.w	r4, r0, r1
    static uint8_t state = 0;

    if (buttons & DK_BTN1_MSK) {
     42a:	f014 0f01 	tst.w	r4, #1
     42e:	d109      	bne.n	444 <button_changed+0x20>
            dk_set_led_off(DK_LED1);
            ClearBit(state, 1);
        }
    }

    if (buttons & DK_BTN2_MSK) {
     430:	f014 0f02 	tst.w	r4, #2
     434:	d121      	bne.n	47a <button_changed+0x56>
            dk_set_led_off(DK_LED2);
            ClearBit(state, 2);
        }
    }

    if (buttons & DK_BTN3_MSK) {
     436:	f014 0f04 	tst.w	r4, #4
     43a:	d139      	bne.n	4b0 <button_changed+0x8c>
            dk_set_led_off(DK_LED3);
            ClearBit(state, 3);
        }
    }

    if (buttons & DK_BTN4_MSK) {
     43c:	f014 0f08 	tst.w	r4, #8
     440:	d151      	bne.n	4e6 <button_changed+0xc2>
        {
            dk_set_led_off(DK_LED4);
            ClearBit(state, 4);
        }
    }
}
     442:	bd10      	pop	{r4, pc}
        printk("Button_1 Click\r\n");
     444:	4835      	ldr	r0, [pc, #212]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     446:	f005 f92a 	bl	569e <printk>
        if(GetBit(state, 1) == 0)
     44a:	4a35      	ldr	r2, [pc, #212]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     44c:	7813      	ldrb	r3, [r2, #0]
     44e:	f003 0302 	and.w	r3, r3, #2
     452:	7013      	strb	r3, [r2, #0]
     454:	b943      	cbnz	r3, 468 <button_changed+0x44>
            dk_set_led_on(DK_LED1);
     456:	2000      	movs	r0, #0
     458:	f006 fd52 	bl	6f00 <dk_set_led_on>
            SetBit(state, 1);
     45c:	4a30      	ldr	r2, [pc, #192]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     45e:	7813      	ldrb	r3, [r2, #0]
     460:	f043 0302 	orr.w	r3, r3, #2
     464:	7013      	strb	r3, [r2, #0]
     466:	e7e3      	b.n	430 <button_changed+0xc>
            dk_set_led_off(DK_LED1);
     468:	2000      	movs	r0, #0
     46a:	f006 fd4e 	bl	6f0a <dk_set_led_off>
            ClearBit(state, 1);
     46e:	4a2c      	ldr	r2, [pc, #176]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     470:	7813      	ldrb	r3, [r2, #0]
     472:	f023 0302 	bic.w	r3, r3, #2
     476:	7013      	strb	r3, [r2, #0]
     478:	e7da      	b.n	430 <button_changed+0xc>
        printk("Button_2 Click\r\n");
     47a:	482a      	ldr	r0, [pc, #168]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
     47c:	f005 f90f 	bl	569e <printk>
        if(GetBit(state, 2) == 0)
     480:	4a27      	ldr	r2, [pc, #156]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     482:	7813      	ldrb	r3, [r2, #0]
     484:	f003 0304 	and.w	r3, r3, #4
     488:	7013      	strb	r3, [r2, #0]
     48a:	b943      	cbnz	r3, 49e <button_changed+0x7a>
            dk_set_led_on(DK_LED2);
     48c:	2001      	movs	r0, #1
     48e:	f006 fd37 	bl	6f00 <dk_set_led_on>
            SetBit(state, 2);
     492:	4a23      	ldr	r2, [pc, #140]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     494:	7813      	ldrb	r3, [r2, #0]
     496:	f043 0304 	orr.w	r3, r3, #4
     49a:	7013      	strb	r3, [r2, #0]
     49c:	e7cb      	b.n	436 <button_changed+0x12>
            dk_set_led_off(DK_LED2);
     49e:	2001      	movs	r0, #1
     4a0:	f006 fd33 	bl	6f0a <dk_set_led_off>
            ClearBit(state, 2);
     4a4:	4a1e      	ldr	r2, [pc, #120]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     4a6:	7813      	ldrb	r3, [r2, #0]
     4a8:	f023 0304 	bic.w	r3, r3, #4
     4ac:	7013      	strb	r3, [r2, #0]
     4ae:	e7c2      	b.n	436 <button_changed+0x12>
        printk("Button_3 Click\r\n");
     4b0:	481d      	ldr	r0, [pc, #116]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
     4b2:	f005 f8f4 	bl	569e <printk>
        if(GetBit(state, 3) == 0)
     4b6:	4a1a      	ldr	r2, [pc, #104]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     4b8:	7813      	ldrb	r3, [r2, #0]
     4ba:	f003 0308 	and.w	r3, r3, #8
     4be:	7013      	strb	r3, [r2, #0]
     4c0:	b943      	cbnz	r3, 4d4 <button_changed+0xb0>
            dk_set_led_on(DK_LED3);
     4c2:	2002      	movs	r0, #2
     4c4:	f006 fd1c 	bl	6f00 <dk_set_led_on>
            SetBit(state, 3);
     4c8:	4a15      	ldr	r2, [pc, #84]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     4ca:	7813      	ldrb	r3, [r2, #0]
     4cc:	f043 0308 	orr.w	r3, r3, #8
     4d0:	7013      	strb	r3, [r2, #0]
     4d2:	e7b3      	b.n	43c <button_changed+0x18>
            dk_set_led_off(DK_LED3);
     4d4:	2002      	movs	r0, #2
     4d6:	f006 fd18 	bl	6f0a <dk_set_led_off>
            ClearBit(state, 3);
     4da:	4a11      	ldr	r2, [pc, #68]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     4dc:	7813      	ldrb	r3, [r2, #0]
     4de:	f023 0308 	bic.w	r3, r3, #8
     4e2:	7013      	strb	r3, [r2, #0]
     4e4:	e7aa      	b.n	43c <button_changed+0x18>
        printk("Button_4 Click\r\n");
     4e6:	4811      	ldr	r0, [pc, #68]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     4e8:	f005 f8d9 	bl	569e <printk>
        if(GetBit(state, 4) == 0)
     4ec:	4a0c      	ldr	r2, [pc, #48]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     4ee:	7813      	ldrb	r3, [r2, #0]
     4f0:	f003 0310 	and.w	r3, r3, #16
     4f4:	7013      	strb	r3, [r2, #0]
     4f6:	b943      	cbnz	r3, 50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
            dk_set_led_on(DK_LED4);
     4f8:	2003      	movs	r0, #3
     4fa:	f006 fd01 	bl	6f00 <dk_set_led_on>
            SetBit(state, 4);
     4fe:	4a08      	ldr	r2, [pc, #32]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     500:	7813      	ldrb	r3, [r2, #0]
     502:	f043 0310 	orr.w	r3, r3, #16
     506:	7013      	strb	r3, [r2, #0]
     508:	e79b      	b.n	442 <button_changed+0x1e>
            dk_set_led_off(DK_LED4);
     50a:	2003      	movs	r0, #3
     50c:	f006 fcfd 	bl	6f0a <dk_set_led_off>
            ClearBit(state, 4);
     510:	4a03      	ldr	r2, [pc, #12]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     512:	7813      	ldrb	r3, [r2, #0]
     514:	f023 0310 	bic.w	r3, r3, #16
     518:	7013      	strb	r3, [r2, #0]
}
     51a:	e792      	b.n	442 <button_changed+0x1e>
     51c:	00007e98 	.word	0x00007e98
     520:	20000db4 	.word	0x20000db4
     524:	00007eac 	.word	0x00007eac
     528:	00007ec0 	.word	0x00007ec0
     52c:	00007ed4 	.word	0x00007ed4

00000530 <led_key_gpio_init>:

void led_key_gpio_init(void)
{
     530:	b508      	push	{r3, lr}
	int err;

	err = dk_buttons_init(button_changed);
     532:	480a      	ldr	r0, [pc, #40]	; (55c <led_key_gpio_init+0x2c>)
     534:	f002 fd04 	bl	2f40 <dk_buttons_init>
	if (err) {
     538:	b938      	cbnz	r0, 54a <led_key_gpio_init+0x1a>
		printk("Cannot init buttons (err: %d)", err);
	}

	err = dk_leds_init();
     53a:	f002 fdab 	bl	3094 <dk_leds_init>
	if (err) {
     53e:	4601      	mov	r1, r0
     540:	b940      	cbnz	r0, 554 <led_key_gpio_init+0x24>
		printk("Cannot init LEDs (err: %d)", err);
	}

    printk("leds keys init ok!\r\n");
     542:	4807      	ldr	r0, [pc, #28]	; (560 <led_key_gpio_init+0x30>)
     544:	f005 f8ab 	bl	569e <printk>
}
     548:	bd08      	pop	{r3, pc}
     54a:	4601      	mov	r1, r0
		printk("Cannot init buttons (err: %d)", err);
     54c:	4805      	ldr	r0, [pc, #20]	; (564 <led_key_gpio_init+0x34>)
     54e:	f005 f8a6 	bl	569e <printk>
     552:	e7f2      	b.n	53a <led_key_gpio_init+0xa>
		printk("Cannot init LEDs (err: %d)", err);
     554:	4804      	ldr	r0, [pc, #16]	; (568 <led_key_gpio_init+0x38>)
     556:	f005 f8a2 	bl	569e <printk>
     55a:	e7f2      	b.n	542 <led_key_gpio_init+0x12>
     55c:	00000425 	.word	0x00000425
     560:	00007f24 	.word	0x00007f24
     564:	00007ee8 	.word	0x00007ee8
     568:	00007f08 	.word	0x00007f08

0000056c <serial_cb>:
/*
 * Read characters from UART until line end is detected. Afterwards push the
 * data to the message queue.
 */
static void serial_cb(const struct device *dev, void *user_data)
{
     56c:	b510      	push	{r4, lr}
     56e:	b082      	sub	sp, #8
	uint8_t c;

	if (!uart_irq_update(uart_dev)) {
     570:	4818      	ldr	r0, [pc, #96]	; (5d4 <serial_cb+0x68>)
     572:	f005 f889 	bl	5688 <uart_irq_update>
     576:	b978      	cbnz	r0, 598 <serial_cb+0x2c>
		} else if (rx_buf_pos < (sizeof(rx_buf) - 1)) {
			rx_buf[rx_buf_pos++] = c;
		}
		/* else: characters beyond buffer size are dropped */
	}
}
     578:	b002      	add	sp, #8
     57a:	bd10      	pop	{r4, pc}
		if ((c == '\n' || c == '\r') && rx_buf_pos > 0) {
     57c:	4a16      	ldr	r2, [pc, #88]	; (5d8 <serial_cb+0x6c>)
     57e:	6812      	ldr	r2, [r2, #0]
     580:	2a00      	cmp	r2, #0
     582:	dd1d      	ble.n	5c0 <serial_cb+0x54>
			rx_buf[rx_buf_pos] = '\0';
     584:	4915      	ldr	r1, [pc, #84]	; (5dc <serial_cb+0x70>)
     586:	2400      	movs	r4, #0
     588:	548c      	strb	r4, [r1, r2]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
     58a:	2200      	movs	r2, #0
     58c:	2300      	movs	r3, #0
     58e:	4814      	ldr	r0, [pc, #80]	; (5e0 <serial_cb+0x74>)
     590:	f003 fe12 	bl	41b8 <z_impl_k_msgq_put>
			rx_buf_pos = 0;
     594:	4b10      	ldr	r3, [pc, #64]	; (5d8 <serial_cb+0x6c>)
     596:	601c      	str	r4, [r3, #0]
 * @retval -ENOTSUP If API is not enabled.
 */
static inline int uart_irq_rx_ready(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     598:	4b0e      	ldr	r3, [pc, #56]	; (5d4 <serial_cb+0x68>)
     59a:	689b      	ldr	r3, [r3, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_ready == NULL) {
     59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     59e:	b11b      	cbz	r3, 5a8 <serial_cb+0x3c>
		return -ENOSYS;
	}
	return api->irq_rx_ready(dev);
     5a0:	480c      	ldr	r0, [pc, #48]	; (5d4 <serial_cb+0x68>)
     5a2:	4798      	blx	r3
	while (uart_irq_rx_ready(uart_dev)) {
     5a4:	2800      	cmp	r0, #0
     5a6:	d0e7      	beq.n	578 <serial_cb+0xc>
		uart_fifo_read(uart_dev, &c, 1);
     5a8:	2201      	movs	r2, #1
     5aa:	f10d 0107 	add.w	r1, sp, #7
     5ae:	4809      	ldr	r0, [pc, #36]	; (5d4 <serial_cb+0x68>)
     5b0:	f005 f854 	bl	565c <uart_fifo_read>
		if ((c == '\n' || c == '\r') && rx_buf_pos > 0) {
     5b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     5b8:	2b0a      	cmp	r3, #10
     5ba:	d0df      	beq.n	57c <serial_cb+0x10>
     5bc:	2b0d      	cmp	r3, #13
     5be:	d0dd      	beq.n	57c <serial_cb+0x10>
		} else if (rx_buf_pos < (sizeof(rx_buf) - 1)) {
     5c0:	4a05      	ldr	r2, [pc, #20]	; (5d8 <serial_cb+0x6c>)
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	2a1e      	cmp	r2, #30
     5c6:	d8e7      	bhi.n	598 <serial_cb+0x2c>
			rx_buf[rx_buf_pos++] = c;
     5c8:	1c50      	adds	r0, r2, #1
     5ca:	4903      	ldr	r1, [pc, #12]	; (5d8 <serial_cb+0x6c>)
     5cc:	6008      	str	r0, [r1, #0]
     5ce:	4903      	ldr	r1, [pc, #12]	; (5dc <serial_cb+0x70>)
     5d0:	548b      	strb	r3, [r1, r2]
     5d2:	e7e1      	b.n	598 <serial_cb+0x2c>
     5d4:	00007b68 	.word	0x00007b68
     5d8:	200004b0 	.word	0x200004b0
     5dc:	200004b4 	.word	0x200004b4
     5e0:	200001dc 	.word	0x200001dc

000005e4 <print_uart>:

/*
 * Print a null-terminated string character by character to the UART interface
 */
static void print_uart(char *buf)
{
     5e4:	b570      	push	{r4, r5, r6, lr}
     5e6:	4606      	mov	r6, r0
	int msg_len = strlen(buf);
     5e8:	f005 fe52 	bl	6290 <strlen>
     5ec:	4605      	mov	r5, r0

	for (int i = 0; i < msg_len; i++) {
     5ee:	2400      	movs	r4, #0
     5f0:	e005      	b.n	5fe <print_uart+0x1a>
		uart_poll_out(uart_dev, buf[i]);
     5f2:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
     5f4:	4803      	ldr	r0, [pc, #12]	; (604 <print_uart+0x20>)
     5f6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
     5f8:	685b      	ldr	r3, [r3, #4]
     5fa:	4798      	blx	r3
	for (int i = 0; i < msg_len; i++) {
     5fc:	3401      	adds	r4, #1
     5fe:	42ac      	cmp	r4, r5
     600:	dbf7      	blt.n	5f2 <print_uart+0xe>
	}
}
     602:	bd70      	pop	{r4, r5, r6, pc}
     604:	00007b68 	.word	0x00007b68

00000608 <uart_init>:

void uart_init(void)
{
     608:	b510      	push	{r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     60a:	480d      	ldr	r0, [pc, #52]	; (640 <uart_init+0x38>)
     60c:	f006 fee7 	bl	73de <z_device_is_ready>
	if (!device_is_ready(uart_dev)) {
     610:	b190      	cbz	r0, 638 <uart_init+0x30>
		printk("UART device not found!");
		return;
	}
    else
    {
        printk("uart1 ready!\r\n");
     612:	480c      	ldr	r0, [pc, #48]	; (644 <uart_init+0x3c>)
     614:	f005 f843 	bl	569e <printk>
    }

	/* configure interrupt and callback to receive data */
	uart_irq_callback_user_data_set(uart_dev, serial_cb, NULL);
     618:	4c09      	ldr	r4, [pc, #36]	; (640 <uart_init+0x38>)
     61a:	2200      	movs	r2, #0
     61c:	490a      	ldr	r1, [pc, #40]	; (648 <uart_init+0x40>)
     61e:	4620      	mov	r0, r4
     620:	f005 f825 	bl	566e <uart_irq_callback_user_data_set>
	uart_irq_rx_enable(uart_dev);
     624:	4620      	mov	r0, r4
     626:	f005 f829 	bl	567c <uart_irq_rx_enable>

	print_uart("Hello! I'm your echo bot.\r\n");
     62a:	4808      	ldr	r0, [pc, #32]	; (64c <uart_init+0x44>)
     62c:	f7ff ffda 	bl	5e4 <print_uart>
	print_uart("Tell me something and press enter:\r\n");
     630:	4807      	ldr	r0, [pc, #28]	; (650 <uart_init+0x48>)
     632:	f7ff ffd7 	bl	5e4 <print_uart>
}
     636:	bd10      	pop	{r4, pc}
		printk("UART device not found!");
     638:	4806      	ldr	r0, [pc, #24]	; (654 <uart_init+0x4c>)
     63a:	f005 f830 	bl	569e <printk>
		return;
     63e:	e7fa      	b.n	636 <uart_init+0x2e>
     640:	00007b68 	.word	0x00007b68
     644:	00007f54 	.word	0x00007f54
     648:	0000056d 	.word	0x0000056d
     64c:	00007f64 	.word	0x00007f64
     650:	00007f80 	.word	0x00007f80
     654:	00007f3c 	.word	0x00007f3c

00000658 <uart_event_handle>:

void uart_event_handle(void)
{
     658:	b508      	push	{r3, lr}
    /* indefinitely wait for input from the user */
	while (k_msgq_get(&uart_msgq, &tx_buf, K_FOREVER) == 0) {
     65a:	e008      	b.n	66e <uart_event_handle+0x16>
		print_uart("Echo: ");
     65c:	4809      	ldr	r0, [pc, #36]	; (684 <uart_event_handle+0x2c>)
     65e:	f7ff ffc1 	bl	5e4 <print_uart>
		print_uart(tx_buf);
     662:	4809      	ldr	r0, [pc, #36]	; (688 <uart_event_handle+0x30>)
     664:	f7ff ffbe 	bl	5e4 <print_uart>
		print_uart("\r\n");
     668:	4808      	ldr	r0, [pc, #32]	; (68c <uart_event_handle+0x34>)
     66a:	f7ff ffbb 	bl	5e4 <print_uart>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
     66e:	f04f 32ff 	mov.w	r2, #4294967295
     672:	f04f 33ff 	mov.w	r3, #4294967295
     676:	4904      	ldr	r1, [pc, #16]	; (688 <uart_event_handle+0x30>)
     678:	4805      	ldr	r0, [pc, #20]	; (690 <uart_event_handle+0x38>)
     67a:	f003 fdf5 	bl	4268 <z_impl_k_msgq_get>
	while (k_msgq_get(&uart_msgq, &tx_buf, K_FOREVER) == 0) {
     67e:	2800      	cmp	r0, #0
     680:	d0ec      	beq.n	65c <uart_event_handle+0x4>
	}
}
     682:	bd08      	pop	{r3, pc}
     684:	00007fa8 	.word	0x00007fa8
     688:	20000490 	.word	0x20000490
     68c:	00007f60 	.word	0x00007f60
     690:	200001dc 	.word	0x200001dc

00000694 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
     694:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
     696:	4b02      	ldr	r3, [pc, #8]	; (6a0 <char_out+0xc>)
     698:	681b      	ldr	r3, [r3, #0]
     69a:	4798      	blx	r3
}
     69c:	bd08      	pop	{r3, pc}
     69e:	bf00      	nop
     6a0:	20000000 	.word	0x20000000

000006a4 <__printk_hook_install>:
	_char_out = fn;
     6a4:	4b01      	ldr	r3, [pc, #4]	; (6ac <__printk_hook_install+0x8>)
     6a6:	6018      	str	r0, [r3, #0]
}
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	20000000 	.word	0x20000000

000006b0 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     6b0:	b500      	push	{lr}
     6b2:	b083      	sub	sp, #12
     6b4:	4602      	mov	r2, r0
     6b6:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     6b8:	2100      	movs	r1, #0
     6ba:	9100      	str	r1, [sp, #0]
     6bc:	4802      	ldr	r0, [pc, #8]	; (6c8 <vprintk+0x18>)
     6be:	f000 f91d 	bl	8fc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     6c2:	b003      	add	sp, #12
     6c4:	f85d fb04 	ldr.w	pc, [sp], #4
     6c8:	00000695 	.word	0x00000695

000006cc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     6cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     6d0:	b083      	sub	sp, #12
     6d2:	4604      	mov	r4, r0
     6d4:	4608      	mov	r0, r1
     6d6:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     6d8:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     6da:	f013 0f08 	tst.w	r3, #8
     6de:	d105      	bne.n	6ec <process_event+0x20>
     6e0:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     6e4:	2300      	movs	r3, #0
     6e6:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     6e8:	9301      	str	r3, [sp, #4]
}
     6ea:	e055      	b.n	798 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
     6ec:	2901      	cmp	r1, #1
     6ee:	d009      	beq.n	704 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     6f0:	f043 0320 	orr.w	r3, r3, #32
     6f4:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     6f6:	f385 8811 	msr	BASEPRI, r5
     6fa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     6fe:	b003      	add	sp, #12
     700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     704:	f043 0310 	orr.w	r3, r3, #16
     708:	8323      	strh	r3, [r4, #24]
     70a:	e7f4      	b.n	6f6 <process_event+0x2a>
			evt = process_recheck(mgr);
     70c:	4620      	mov	r0, r4
     70e:	f005 f91d 	bl	594c <process_recheck>
     712:	e043      	b.n	79c <process_event+0xd0>
			res = mgr->last_res;
     714:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     718:	464a      	mov	r2, r9
     71a:	4669      	mov	r1, sp
     71c:	4620      	mov	r0, r4
     71e:	f005 f92e 	bl	597e <process_complete>
		onoff_transition_fn transit = NULL;
     722:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     726:	8b23      	ldrh	r3, [r4, #24]
     728:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     72c:	42b7      	cmp	r7, r6
     72e:	d069      	beq.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     730:	68a2      	ldr	r2, [r4, #8]
     732:	2a00      	cmp	r2, #0
     734:	d066      	beq.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     736:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     738:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     73c:	8323      	strh	r3, [r4, #24]
     73e:	f385 8811 	msr	BASEPRI, r5
     742:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     746:	2a00      	cmp	r2, #0
     748:	d164      	bne.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
     74a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     74c:	b12b      	cbz	r3, 75a <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
     74e:	464b      	mov	r3, r9
     750:	463a      	mov	r2, r7
     752:	4669      	mov	r1, sp
     754:	4620      	mov	r0, r4
     756:	f005 f98b 	bl	5a70 <notify_all>
			if (transit != NULL) {
     75a:	f1b8 0f00 	cmp.w	r8, #0
     75e:	d002      	beq.n	766 <process_event+0x9a>
				transit(mgr, transition_complete);
     760:	4934      	ldr	r1, [pc, #208]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     762:	4620      	mov	r0, r4
     764:	47c0      	blx	r8
	__asm__ volatile(
     766:	f04f 0320 	mov.w	r3, #32
     76a:	f3ef 8511 	mrs	r5, BASEPRI
     76e:	f383 8812 	msr	BASEPRI_MAX, r3
     772:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     776:	8b23      	ldrh	r3, [r4, #24]
     778:	f023 0308 	bic.w	r3, r3, #8
     77c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     77e:	8b23      	ldrh	r3, [r4, #24]
     780:	f013 0f10 	tst.w	r3, #16
     784:	d04c      	beq.n	820 <CONFIG_ISR_STACK_SIZE+0x20>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     786:	f023 0310 	bic.w	r3, r3, #16
     78a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     78c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     78e:	8b26      	ldrh	r6, [r4, #24]
     790:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     794:	2800      	cmp	r0, #0
     796:	d0ae      	beq.n	6f6 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     798:	2802      	cmp	r0, #2
     79a:	d0b7      	beq.n	70c <process_event+0x40>
		if (evt == EVT_NOP) {
     79c:	2800      	cmp	r0, #0
     79e:	d0aa      	beq.n	6f6 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     7a0:	3801      	subs	r0, #1
     7a2:	2804      	cmp	r0, #4
     7a4:	d82a      	bhi.n	7fc <process_event+0x130>
     7a6:	a301      	add	r3, pc, #4	; (adr r3, 7ac <process_event+0xe0>)
     7a8:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     7ac:	00000715 	.word	0x00000715
     7b0:	000007fd 	.word	0x000007fd
     7b4:	000007c1 	.word	0x000007c1
     7b8:	000007d5 	.word	0x000007d5
     7bc:	000007e9 	.word	0x000007e9
			transit = mgr->transitions->start;
     7c0:	6923      	ldr	r3, [r4, #16]
     7c2:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
     7c6:	2106      	movs	r1, #6
     7c8:	4620      	mov	r0, r4
     7ca:	f005 f895 	bl	58f8 <set_state>
		res = 0;
     7ce:	f04f 0900 	mov.w	r9, #0
     7d2:	e7a8      	b.n	726 <process_event+0x5a>
			transit = mgr->transitions->stop;
     7d4:	6923      	ldr	r3, [r4, #16]
     7d6:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     7da:	2104      	movs	r1, #4
     7dc:	4620      	mov	r0, r4
     7de:	f005 f88b 	bl	58f8 <set_state>
		res = 0;
     7e2:	f04f 0900 	mov.w	r9, #0
     7e6:	e79e      	b.n	726 <process_event+0x5a>
			transit = mgr->transitions->reset;
     7e8:	6923      	ldr	r3, [r4, #16]
     7ea:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     7ee:	2105      	movs	r1, #5
     7f0:	4620      	mov	r0, r4
     7f2:	f005 f881 	bl	58f8 <set_state>
		res = 0;
     7f6:	f04f 0900 	mov.w	r9, #0
     7fa:	e794      	b.n	726 <process_event+0x5a>
		if (evt == EVT_NOP) {
     7fc:	f04f 0800 	mov.w	r8, #0
     800:	46c1      	mov	r9, r8
     802:	e790      	b.n	726 <process_event+0x5a>
     804:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     806:	b10a      	cbz	r2, 80c <CONFIG_ISR_STACK_SIZE+0xc>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     808:	2200      	movs	r2, #0
     80a:	e795      	b.n	738 <process_event+0x6c>
		    || (transit != NULL)) {
     80c:	f1b8 0f00 	cmp.w	r8, #0
     810:	d192      	bne.n	738 <process_event+0x6c>
     812:	e7b4      	b.n	77e <process_event+0xb2>
				notify_monitors(mgr, state, res);
     814:	464a      	mov	r2, r9
     816:	4639      	mov	r1, r7
     818:	4620      	mov	r0, r4
     81a:	f005 f875 	bl	5908 <notify_monitors>
     81e:	e794      	b.n	74a <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     820:	f013 0f20 	tst.w	r3, #32
     824:	d004      	beq.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     826:	f023 0320 	bic.w	r3, r3, #32
     82a:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     82c:	2002      	movs	r0, #2
     82e:	e7ae      	b.n	78e <process_event+0xc2>
		evt = EVT_NOP;
     830:	2000      	movs	r0, #0
     832:	e7ac      	b.n	78e <process_event+0xc2>
     834:	00005a9f 	.word	0x00005a9f

00000838 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
     838:	4684      	mov	ip, r0
     83a:	4608      	mov	r0, r1
	bool loop = true;
     83c:	2201      	movs	r2, #1
     83e:	e026      	b.n	88e <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
     840:	f89c 3000 	ldrb.w	r3, [ip]
     844:	f043 0304 	orr.w	r3, r3, #4
     848:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
     84c:	b1f2      	cbz	r2, 88c <extract_flags+0x54>
			++sp;
     84e:	3001      	adds	r0, #1
     850:	e01c      	b.n	88c <extract_flags+0x54>
			conv->flag_plus = true;
     852:	f89c 3000 	ldrb.w	r3, [ip]
     856:	f043 0308 	orr.w	r3, r3, #8
     85a:	f88c 3000 	strb.w	r3, [ip]
			break;
     85e:	e7f5      	b.n	84c <extract_flags+0x14>
			conv->flag_space = true;
     860:	f89c 3000 	ldrb.w	r3, [ip]
     864:	f043 0310 	orr.w	r3, r3, #16
     868:	f88c 3000 	strb.w	r3, [ip]
			break;
     86c:	e7ee      	b.n	84c <extract_flags+0x14>
			conv->flag_hash = true;
     86e:	f89c 3000 	ldrb.w	r3, [ip]
     872:	f043 0320 	orr.w	r3, r3, #32
     876:	f88c 3000 	strb.w	r3, [ip]
			break;
     87a:	e7e7      	b.n	84c <extract_flags+0x14>
			conv->flag_zero = true;
     87c:	f89c 3000 	ldrb.w	r3, [ip]
     880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     884:	f88c 3000 	strb.w	r3, [ip]
			break;
     888:	e7e0      	b.n	84c <extract_flags+0x14>
		switch (*sp) {
     88a:	2200      	movs	r2, #0
		}
	} while (loop);
     88c:	b342      	cbz	r2, 8e0 <extract_flags+0xa8>
		switch (*sp) {
     88e:	7803      	ldrb	r3, [r0, #0]
     890:	3b20      	subs	r3, #32
     892:	2b10      	cmp	r3, #16
     894:	d8f9      	bhi.n	88a <extract_flags+0x52>
     896:	a101      	add	r1, pc, #4	; (adr r1, 89c <extract_flags+0x64>)
     898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     89c:	00000861 	.word	0x00000861
     8a0:	0000088b 	.word	0x0000088b
     8a4:	0000088b 	.word	0x0000088b
     8a8:	0000086f 	.word	0x0000086f
     8ac:	0000088b 	.word	0x0000088b
     8b0:	0000088b 	.word	0x0000088b
     8b4:	0000088b 	.word	0x0000088b
     8b8:	0000088b 	.word	0x0000088b
     8bc:	0000088b 	.word	0x0000088b
     8c0:	0000088b 	.word	0x0000088b
     8c4:	0000088b 	.word	0x0000088b
     8c8:	00000853 	.word	0x00000853
     8cc:	0000088b 	.word	0x0000088b
     8d0:	00000841 	.word	0x00000841
     8d4:	0000088b 	.word	0x0000088b
     8d8:	0000088b 	.word	0x0000088b
     8dc:	0000087d 	.word	0x0000087d

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
     8e0:	f89c 3000 	ldrb.w	r3, [ip]
     8e4:	f003 0344 	and.w	r3, r3, #68	; 0x44
     8e8:	2b44      	cmp	r3, #68	; 0x44
     8ea:	d000      	beq.n	8ee <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
     8ec:	4770      	bx	lr
		conv->flag_zero = false;
     8ee:	f89c 3000 	ldrb.w	r3, [ip]
     8f2:	f36f 1386 	bfc	r3, #6, #1
     8f6:	f88c 3000 	strb.w	r3, [ip]
     8fa:	e7f7      	b.n	8ec <extract_flags+0xb4>

000008fc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     900:	b091      	sub	sp, #68	; 0x44
     902:	4606      	mov	r6, r0
     904:	460d      	mov	r5, r1
     906:	4691      	mov	r9, r2
     908:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     90a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     90c:	f899 0000 	ldrb.w	r0, [r9]
     910:	2800      	cmp	r0, #0
     912:	f000 82b9 	beq.w	e88 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
     916:	2825      	cmp	r0, #37	; 0x25
     918:	d008      	beq.n	92c <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     91a:	f109 0901 	add.w	r9, r9, #1
     91e:	4629      	mov	r1, r5
     920:	47b0      	blx	r6
     922:	2800      	cmp	r0, #0
     924:	f2c0 82b1 	blt.w	e8a <z_cbvprintf_impl+0x58e>
     928:	3401      	adds	r4, #1
			continue;
     92a:	e7ef      	b.n	90c <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     92c:	2300      	movs	r3, #0
     92e:	9304      	str	r3, [sp, #16]
     930:	9305      	str	r3, [sp, #20]
     932:	9306      	str	r3, [sp, #24]
     934:	9307      	str	r3, [sp, #28]
     936:	9308      	str	r3, [sp, #32]
     938:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     93a:	4649      	mov	r1, r9
     93c:	a806      	add	r0, sp, #24
     93e:	f005 faca 	bl	5ed6 <extract_conversion>
     942:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     944:	f89d 3019 	ldrb.w	r3, [sp, #25]
     948:	f013 0f01 	tst.w	r3, #1
     94c:	f000 8097 	beq.w	a7e <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
     950:	9b03      	ldr	r3, [sp, #12]
     952:	1d1a      	adds	r2, r3, #4
     954:	9203      	str	r2, [sp, #12]
     956:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     958:	2f00      	cmp	r7, #0
     95a:	f2c0 8088 	blt.w	a6e <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     95e:	f89d 3019 	ldrb.w	r3, [sp, #25]
     962:	f013 0f04 	tst.w	r3, #4
     966:	f000 809c 	beq.w	aa2 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
     96a:	9b03      	ldr	r3, [sp, #12]
     96c:	1d1a      	adds	r2, r3, #4
     96e:	9203      	str	r2, [sp, #12]
     970:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     974:	f1ba 0f00 	cmp.w	sl, #0
     978:	f2c0 808a 	blt.w	a90 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     97c:	2300      	movs	r3, #0
     97e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     980:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     982:	f89d 301a 	ldrb.w	r3, [sp, #26]
     986:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     98a:	f89d 1019 	ldrb.w	r1, [sp, #25]
     98e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     992:	2b01      	cmp	r3, #1
     994:	f000 808e 	beq.w	ab4 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     998:	2b02      	cmp	r3, #2
     99a:	f000 80d3 	beq.w	b44 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     99e:	2b04      	cmp	r3, #4
     9a0:	f000 8124 	beq.w	bec <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     9a4:	2b03      	cmp	r3, #3
     9a6:	f000 813b 	beq.w	c20 <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     9aa:	f89d 8018 	ldrb.w	r8, [sp, #24]
     9ae:	f018 0b03 	ands.w	fp, r8, #3
     9b2:	f040 813b 	bne.w	c2c <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     9b6:	f89d 301b 	ldrb.w	r3, [sp, #27]
     9ba:	3b25      	subs	r3, #37	; 0x25
     9bc:	2b53      	cmp	r3, #83	; 0x53
     9be:	f200 81ca 	bhi.w	d56 <z_cbvprintf_impl+0x45a>
     9c2:	e8df f013 	tbh	[pc, r3, lsl #1]
     9c6:	0140      	.short	0x0140
     9c8:	01c801c8 	.word	0x01c801c8
     9cc:	01c801c8 	.word	0x01c801c8
     9d0:	01c801c8 	.word	0x01c801c8
     9d4:	01c801c8 	.word	0x01c801c8
     9d8:	01c801c8 	.word	0x01c801c8
     9dc:	01c801c8 	.word	0x01c801c8
     9e0:	01c801c8 	.word	0x01c801c8
     9e4:	01c801c8 	.word	0x01c801c8
     9e8:	01c801c8 	.word	0x01c801c8
     9ec:	01c801c8 	.word	0x01c801c8
     9f0:	01c801c8 	.word	0x01c801c8
     9f4:	01c801c8 	.word	0x01c801c8
     9f8:	01c801c8 	.word	0x01c801c8
     9fc:	01c801c8 	.word	0x01c801c8
     a00:	01c801c8 	.word	0x01c801c8
     a04:	01c801c8 	.word	0x01c801c8
     a08:	01c801c8 	.word	0x01c801c8
     a0c:	01c801c8 	.word	0x01c801c8
     a10:	01c801c8 	.word	0x01c801c8
     a14:	01c801c8 	.word	0x01c801c8
     a18:	01c801c8 	.word	0x01c801c8
     a1c:	01c801c8 	.word	0x01c801c8
     a20:	01c801c8 	.word	0x01c801c8
     a24:	01c801c8 	.word	0x01c801c8
     a28:	01c801c8 	.word	0x01c801c8
     a2c:	01c80181 	.word	0x01c80181
     a30:	01c801c8 	.word	0x01c801c8
     a34:	01c801c8 	.word	0x01c801c8
     a38:	01c801c8 	.word	0x01c801c8
     a3c:	01c801c8 	.word	0x01c801c8
     a40:	015e01c8 	.word	0x015e01c8
     a44:	01c80167 	.word	0x01c80167
     a48:	01c801c8 	.word	0x01c801c8
     a4c:	016701c8 	.word	0x016701c8
     a50:	01c801c8 	.word	0x01c801c8
     a54:	01c801c8 	.word	0x01c801c8
     a58:	018101bd 	.word	0x018101bd
     a5c:	01c801a1 	.word	0x01c801a1
     a60:	014d01c8 	.word	0x014d01c8
     a64:	018101c8 	.word	0x018101c8
     a68:	01c801c8 	.word	0x01c801c8
     a6c:	0181      	.short	0x0181
				conv->flag_dash = true;
     a6e:	f89d 3018 	ldrb.w	r3, [sp, #24]
     a72:	f043 0304 	orr.w	r3, r3, #4
     a76:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     a7a:	427f      	negs	r7, r7
     a7c:	e76f      	b.n	95e <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
     a7e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     a82:	2b00      	cmp	r3, #0
     a84:	db02      	blt.n	a8c <z_cbvprintf_impl+0x190>
		int width = -1;
     a86:	f04f 37ff 	mov.w	r7, #4294967295
     a8a:	e768      	b.n	95e <z_cbvprintf_impl+0x62>
			width = conv->width_value;
     a8c:	9f07      	ldr	r7, [sp, #28]
     a8e:	e766      	b.n	95e <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
     a90:	f89d 3019 	ldrb.w	r3, [sp, #25]
     a94:	f36f 0341 	bfc	r3, #1, #1
     a98:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     a9c:	f04f 3aff 	mov.w	sl, #4294967295
     aa0:	e76c      	b.n	97c <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
     aa2:	f013 0f02 	tst.w	r3, #2
     aa6:	d002      	beq.n	aae <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
     aa8:	f8dd a020 	ldr.w	sl, [sp, #32]
     aac:	e766      	b.n	97c <z_cbvprintf_impl+0x80>
		int precision = -1;
     aae:	f04f 3aff 	mov.w	sl, #4294967295
     ab2:	e763      	b.n	97c <z_cbvprintf_impl+0x80>
			switch (length_mod) {
     ab4:	1ecb      	subs	r3, r1, #3
     ab6:	2b04      	cmp	r3, #4
     ab8:	d804      	bhi.n	ac4 <z_cbvprintf_impl+0x1c8>
     aba:	e8df f003 	tbb	[pc, r3]
     abe:	1d0b      	.short	0x1d0b
     ac0:	3529      	.short	0x3529
     ac2:	35          	.byte	0x35
     ac3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     ac4:	9b03      	ldr	r3, [sp, #12]
     ac6:	1d1a      	adds	r2, r3, #4
     ac8:	9203      	str	r2, [sp, #12]
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	17da      	asrs	r2, r3, #31
     ace:	9304      	str	r3, [sp, #16]
     ad0:	9205      	str	r2, [sp, #20]
				break;
     ad2:	e006      	b.n	ae2 <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
     ad4:	9b03      	ldr	r3, [sp, #12]
     ad6:	1d1a      	adds	r2, r3, #4
     ad8:	9203      	str	r2, [sp, #12]
     ada:	681b      	ldr	r3, [r3, #0]
     adc:	17da      	asrs	r2, r3, #31
     ade:	9304      	str	r3, [sp, #16]
     ae0:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     ae2:	2901      	cmp	r1, #1
     ae4:	d028      	beq.n	b38 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
     ae6:	2902      	cmp	r1, #2
     ae8:	f47f af5f 	bne.w	9aa <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
     aec:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     af0:	17da      	asrs	r2, r3, #31
     af2:	9304      	str	r3, [sp, #16]
     af4:	9205      	str	r2, [sp, #20]
     af6:	e758      	b.n	9aa <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
     af8:	9b03      	ldr	r3, [sp, #12]
     afa:	3307      	adds	r3, #7
     afc:	f023 0307 	bic.w	r3, r3, #7
     b00:	f103 0208 	add.w	r2, r3, #8
     b04:	9203      	str	r2, [sp, #12]
     b06:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     b0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     b0e:	e7e8      	b.n	ae2 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
     b10:	9b03      	ldr	r3, [sp, #12]
     b12:	3307      	adds	r3, #7
     b14:	f023 0307 	bic.w	r3, r3, #7
     b18:	f103 0208 	add.w	r2, r3, #8
     b1c:	9203      	str	r2, [sp, #12]
     b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     b22:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     b26:	e7dc      	b.n	ae2 <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     b28:	9b03      	ldr	r3, [sp, #12]
     b2a:	1d1a      	adds	r2, r3, #4
     b2c:	9203      	str	r2, [sp, #12]
     b2e:	681b      	ldr	r3, [r3, #0]
     b30:	17da      	asrs	r2, r3, #31
				value->sint =
     b32:	9304      	str	r3, [sp, #16]
     b34:	9205      	str	r2, [sp, #20]
				break;
     b36:	e7d4      	b.n	ae2 <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
     b38:	f99d 3010 	ldrsb.w	r3, [sp, #16]
     b3c:	17da      	asrs	r2, r3, #31
     b3e:	9304      	str	r3, [sp, #16]
     b40:	9205      	str	r2, [sp, #20]
     b42:	e732      	b.n	9aa <z_cbvprintf_impl+0xae>
			switch (length_mod) {
     b44:	1ecb      	subs	r3, r1, #3
     b46:	2b04      	cmp	r3, #4
     b48:	d804      	bhi.n	b54 <z_cbvprintf_impl+0x258>
     b4a:	e8df f003 	tbb	[pc, r3]
     b4e:	1f0b      	.short	0x1f0b
     b50:	4135      	.short	0x4135
     b52:	41          	.byte	0x41
     b53:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     b54:	9b03      	ldr	r3, [sp, #12]
     b56:	1d1a      	adds	r2, r3, #4
     b58:	9203      	str	r2, [sp, #12]
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	9304      	str	r3, [sp, #16]
     b5e:	2300      	movs	r3, #0
     b60:	9305      	str	r3, [sp, #20]
				break;
     b62:	e01e      	b.n	ba2 <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
     b64:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     b68:	2b63      	cmp	r3, #99	; 0x63
     b6a:	d007      	beq.n	b7c <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
     b6c:	9b03      	ldr	r3, [sp, #12]
     b6e:	1d1a      	adds	r2, r3, #4
     b70:	9203      	str	r2, [sp, #12]
     b72:	681b      	ldr	r3, [r3, #0]
     b74:	9304      	str	r3, [sp, #16]
     b76:	2300      	movs	r3, #0
     b78:	9305      	str	r3, [sp, #20]
     b7a:	e012      	b.n	ba2 <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
     b7c:	9b03      	ldr	r3, [sp, #12]
     b7e:	1d1a      	adds	r2, r3, #4
     b80:	9203      	str	r2, [sp, #12]
     b82:	681b      	ldr	r3, [r3, #0]
     b84:	9304      	str	r3, [sp, #16]
     b86:	2300      	movs	r3, #0
     b88:	9305      	str	r3, [sp, #20]
     b8a:	e00a      	b.n	ba2 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
     b8c:	9b03      	ldr	r3, [sp, #12]
     b8e:	3307      	adds	r3, #7
     b90:	f023 0307 	bic.w	r3, r3, #7
     b94:	f103 0208 	add.w	r2, r3, #8
     b98:	9203      	str	r2, [sp, #12]
     b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     b9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     ba2:	2901      	cmp	r1, #1
     ba4:	d01c      	beq.n	be0 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
     ba6:	2902      	cmp	r1, #2
     ba8:	f47f aeff 	bne.w	9aa <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
     bac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     bb0:	9304      	str	r3, [sp, #16]
     bb2:	2300      	movs	r3, #0
     bb4:	9305      	str	r3, [sp, #20]
     bb6:	e6f8      	b.n	9aa <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
     bb8:	9b03      	ldr	r3, [sp, #12]
     bba:	3307      	adds	r3, #7
     bbc:	f023 0307 	bic.w	r3, r3, #7
     bc0:	f103 0208 	add.w	r2, r3, #8
     bc4:	9203      	str	r2, [sp, #12]
     bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     bca:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     bce:	e7e8      	b.n	ba2 <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
     bd0:	9b03      	ldr	r3, [sp, #12]
     bd2:	1d1a      	adds	r2, r3, #4
     bd4:	9203      	str	r2, [sp, #12]
     bd6:	681b      	ldr	r3, [r3, #0]
				value->uint =
     bd8:	9304      	str	r3, [sp, #16]
     bda:	2300      	movs	r3, #0
     bdc:	9305      	str	r3, [sp, #20]
				break;
     bde:	e7e0      	b.n	ba2 <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
     be0:	f89d 3010 	ldrb.w	r3, [sp, #16]
     be4:	9304      	str	r3, [sp, #16]
     be6:	2300      	movs	r3, #0
     be8:	9305      	str	r3, [sp, #20]
     bea:	e6de      	b.n	9aa <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
     bec:	2908      	cmp	r1, #8
     bee:	d00b      	beq.n	c08 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
     bf0:	9b03      	ldr	r3, [sp, #12]
     bf2:	3307      	adds	r3, #7
     bf4:	f023 0307 	bic.w	r3, r3, #7
     bf8:	f103 0208 	add.w	r2, r3, #8
     bfc:	9203      	str	r2, [sp, #12]
     bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
     c02:	e9cd 2304 	strd	r2, r3, [sp, #16]
     c06:	e6d0      	b.n	9aa <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
     c08:	9b03      	ldr	r3, [sp, #12]
     c0a:	3307      	adds	r3, #7
     c0c:	f023 0307 	bic.w	r3, r3, #7
     c10:	f103 0208 	add.w	r2, r3, #8
     c14:	9203      	str	r2, [sp, #12]
     c16:	e9d3 2300 	ldrd	r2, r3, [r3]
     c1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
     c1e:	e6c4      	b.n	9aa <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
     c20:	9b03      	ldr	r3, [sp, #12]
     c22:	1d1a      	adds	r2, r3, #4
     c24:	9203      	str	r2, [sp, #12]
     c26:	681b      	ldr	r3, [r3, #0]
     c28:	9304      	str	r3, [sp, #16]
     c2a:	e6be      	b.n	9aa <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
     c2c:	9f02      	ldr	r7, [sp, #8]
     c2e:	463b      	mov	r3, r7
     c30:	464a      	mov	r2, r9
     c32:	4629      	mov	r1, r5
     c34:	4630      	mov	r0, r6
     c36:	f005 f9f4 	bl	6022 <outs>
     c3a:	2800      	cmp	r0, #0
     c3c:	f2c0 8125 	blt.w	e8a <z_cbvprintf_impl+0x58e>
     c40:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     c42:	46b9      	mov	r9, r7
			continue;
     c44:	e662      	b.n	90c <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
     c46:	4629      	mov	r1, r5
     c48:	2025      	movs	r0, #37	; 0x25
     c4a:	47b0      	blx	r6
     c4c:	2800      	cmp	r0, #0
     c4e:	f2c0 811c 	blt.w	e8a <z_cbvprintf_impl+0x58e>
     c52:	3401      	adds	r4, #1
		char sign = 0;
     c54:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     c56:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     c5a:	f04f 0900 	mov.w	r9, #0
			break;
     c5e:	e07f      	b.n	d60 <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
     c60:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     c64:	f1ba 0f00 	cmp.w	sl, #0
     c68:	db07      	blt.n	c7a <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
     c6a:	4651      	mov	r1, sl
     c6c:	4648      	mov	r0, r9
     c6e:	f005 fb18 	bl	62a2 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     c72:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     c76:	46d8      	mov	r8, fp
			precision = -1;

			break;
     c78:	e072      	b.n	d60 <z_cbvprintf_impl+0x464>
				len = strlen(bps);
     c7a:	4648      	mov	r0, r9
     c7c:	f005 fb08 	bl	6290 <strlen>
     c80:	e7f7      	b.n	c72 <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c82:	9b04      	ldr	r3, [sp, #16]
     c84:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     c88:	46d8      	mov	r8, fp
			bpe = buf + 1;
     c8a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     c8e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     c92:	e065      	b.n	d60 <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     c94:	f018 0f08 	tst.w	r8, #8
     c98:	d105      	bne.n	ca6 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
     c9a:	f018 0810 	ands.w	r8, r8, #16
     c9e:	d004      	beq.n	caa <z_cbvprintf_impl+0x3ae>
				sign = ' ';
     ca0:	f04f 0820 	mov.w	r8, #32
     ca4:	e001      	b.n	caa <z_cbvprintf_impl+0x3ae>
				sign = '+';
     ca6:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     caa:	9a04      	ldr	r2, [sp, #16]
     cac:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     cae:	2b00      	cmp	r3, #0
     cb0:	db02      	blt.n	cb8 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     cb2:	9204      	str	r2, [sp, #16]
     cb4:	9305      	str	r3, [sp, #20]
     cb6:	e008      	b.n	cca <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
     cb8:	4252      	negs	r2, r2
     cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     cbe:	9204      	str	r2, [sp, #16]
     cc0:	9305      	str	r3, [sp, #20]
				sign = '-';
     cc2:	f04f 082d 	mov.w	r8, #45	; 0x2d
     cc6:	e000      	b.n	cca <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
     cc8:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     cca:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     cce:	9300      	str	r3, [sp, #0]
     cd0:	ab0a      	add	r3, sp, #40	; 0x28
     cd2:	aa06      	add	r2, sp, #24
     cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     cd8:	f005 f934 	bl	5f44 <encode_uint>
     cdc:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     cde:	f1ba 0f00 	cmp.w	sl, #0
     ce2:	db6c      	blt.n	dbe <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
     ce4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     ce8:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     cec:	f89d 2018 	ldrb.w	r2, [sp, #24]
     cf0:	f36f 1286 	bfc	r2, #6, #1
     cf4:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     cf8:	459a      	cmp	sl, r3
     cfa:	d963      	bls.n	dc4 <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
     cfc:	ebaa 0303 	sub.w	r3, sl, r3
     d00:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     d02:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     d06:	e02b      	b.n	d60 <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     d08:	9804      	ldr	r0, [sp, #16]
     d0a:	b928      	cbnz	r0, d18 <z_cbvprintf_impl+0x41c>
		char sign = 0;
     d0c:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     d0e:	f8df a180 	ldr.w	sl, [pc, #384]	; e90 <z_cbvprintf_impl+0x594>
			bps = "(nil)";
     d12:	f1aa 0905 	sub.w	r9, sl, #5
     d16:	e023      	b.n	d60 <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d18:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     d1c:	9300      	str	r3, [sp, #0]
     d1e:	ab0a      	add	r3, sp, #40	; 0x28
     d20:	aa06      	add	r2, sp, #24
     d22:	2100      	movs	r1, #0
     d24:	f005 f90e 	bl	5f44 <encode_uint>
     d28:	4681      	mov	r9, r0
				conv->altform_0c = true;
     d2a:	f89d 301a 	ldrb.w	r3, [sp, #26]
     d2e:	f043 0310 	orr.w	r3, r3, #16
     d32:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     d36:	2378      	movs	r3, #120	; 0x78
     d38:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     d3c:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     d3e:	e7ce      	b.n	cde <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     d40:	4622      	mov	r2, r4
     d42:	9904      	ldr	r1, [sp, #16]
     d44:	a806      	add	r0, sp, #24
     d46:	f005 f94d 	bl	5fe4 <store_count>
		char sign = 0;
     d4a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     d4c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     d50:	f04f 0900 	mov.w	r9, #0
			}

			break;
     d54:	e004      	b.n	d60 <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
     d56:	46d8      	mov	r8, fp
     d58:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     d5c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     d60:	f1b9 0f00 	cmp.w	r9, #0
     d64:	f000 808d 	beq.w	e82 <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     d68:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     d6c:	f1b8 0f00 	cmp.w	r8, #0
     d70:	d000      	beq.n	d74 <z_cbvprintf_impl+0x478>
			nj_len += 1U;
     d72:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     d74:	f89d 201a 	ldrb.w	r2, [sp, #26]
     d78:	f012 0f10 	tst.w	r2, #16
     d7c:	d025      	beq.n	dca <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
     d7e:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     d80:	9907      	ldr	r1, [sp, #28]
     d82:	440b      	add	r3, r1
		if (conv->pad_fp) {
     d84:	f012 0f40 	tst.w	r2, #64	; 0x40
     d88:	d001      	beq.n	d8e <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
     d8a:	9a08      	ldr	r2, [sp, #32]
     d8c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     d8e:	2f00      	cmp	r7, #0
     d90:	dd31      	ble.n	df6 <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
     d92:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     d94:	f89d 3018 	ldrb.w	r3, [sp, #24]
     d98:	f013 0f04 	tst.w	r3, #4
     d9c:	d12b      	bne.n	df6 <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     d9e:	f013 0f40 	tst.w	r3, #64	; 0x40
     da2:	d017      	beq.n	dd4 <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
     da4:	f1b8 0f00 	cmp.w	r8, #0
     da8:	d017      	beq.n	dda <z_cbvprintf_impl+0x4de>
						OUTC(sign);
     daa:	4629      	mov	r1, r5
     dac:	4640      	mov	r0, r8
     dae:	47b0      	blx	r6
     db0:	2800      	cmp	r0, #0
     db2:	db6a      	blt.n	e8a <z_cbvprintf_impl+0x58e>
     db4:	3401      	adds	r4, #1
						sign = 0;
     db6:	46d8      	mov	r8, fp
					}
					pad = '0';
     db8:	f04f 0b30 	mov.w	fp, #48	; 0x30
     dbc:	e00f      	b.n	dde <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
     dbe:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     dc2:	e7cd      	b.n	d60 <z_cbvprintf_impl+0x464>
     dc4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     dc8:	e7ca      	b.n	d60 <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
     dca:	f012 0f08 	tst.w	r2, #8
     dce:	d0d7      	beq.n	d80 <z_cbvprintf_impl+0x484>
			nj_len += 1U;
     dd0:	3301      	adds	r3, #1
     dd2:	e7d5      	b.n	d80 <z_cbvprintf_impl+0x484>
				char pad = ' ';
     dd4:	f04f 0b20 	mov.w	fp, #32
     dd8:	e001      	b.n	dde <z_cbvprintf_impl+0x4e2>
					pad = '0';
     dda:	f04f 0b30 	mov.w	fp, #48	; 0x30
     dde:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     de0:	1e5f      	subs	r7, r3, #1
     de2:	2b00      	cmp	r3, #0
     de4:	dd07      	ble.n	df6 <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
     de6:	4629      	mov	r1, r5
     de8:	4658      	mov	r0, fp
     dea:	47b0      	blx	r6
     dec:	2800      	cmp	r0, #0
     dee:	db4c      	blt.n	e8a <z_cbvprintf_impl+0x58e>
     df0:	3401      	adds	r4, #1
				while (width-- > 0) {
     df2:	463b      	mov	r3, r7
     df4:	e7f4      	b.n	de0 <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     df6:	f1b8 0f00 	cmp.w	r8, #0
     dfa:	d005      	beq.n	e08 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
     dfc:	4629      	mov	r1, r5
     dfe:	4640      	mov	r0, r8
     e00:	47b0      	blx	r6
     e02:	2800      	cmp	r0, #0
     e04:	db41      	blt.n	e8a <z_cbvprintf_impl+0x58e>
     e06:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     e08:	f89d 301a 	ldrb.w	r3, [sp, #26]
     e0c:	f3c3 1200 	ubfx	r2, r3, #4, #1
     e10:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     e14:	431a      	orrs	r2, r3
     e16:	d005      	beq.n	e24 <z_cbvprintf_impl+0x528>
				OUTC('0');
     e18:	4629      	mov	r1, r5
     e1a:	2030      	movs	r0, #48	; 0x30
     e1c:	47b0      	blx	r6
     e1e:	2800      	cmp	r0, #0
     e20:	db33      	blt.n	e8a <z_cbvprintf_impl+0x58e>
     e22:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     e24:	f89d 301a 	ldrb.w	r3, [sp, #26]
     e28:	f013 0f10 	tst.w	r3, #16
     e2c:	d006      	beq.n	e3c <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
     e2e:	4629      	mov	r1, r5
     e30:	f89d 001b 	ldrb.w	r0, [sp, #27]
     e34:	47b0      	blx	r6
     e36:	2800      	cmp	r0, #0
     e38:	db27      	blt.n	e8a <z_cbvprintf_impl+0x58e>
     e3a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     e3c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     e3e:	f103 38ff 	add.w	r8, r3, #4294967295
     e42:	2b00      	cmp	r3, #0
     e44:	dd07      	ble.n	e56 <z_cbvprintf_impl+0x55a>
				OUTC('0');
     e46:	4629      	mov	r1, r5
     e48:	2030      	movs	r0, #48	; 0x30
     e4a:	47b0      	blx	r6
     e4c:	2800      	cmp	r0, #0
     e4e:	db1c      	blt.n	e8a <z_cbvprintf_impl+0x58e>
     e50:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     e52:	4643      	mov	r3, r8
     e54:	e7f3      	b.n	e3e <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
     e56:	4653      	mov	r3, sl
     e58:	464a      	mov	r2, r9
     e5a:	4629      	mov	r1, r5
     e5c:	4630      	mov	r0, r6
     e5e:	f005 f8e0 	bl	6022 <outs>
     e62:	2800      	cmp	r0, #0
     e64:	db11      	blt.n	e8a <z_cbvprintf_impl+0x58e>
     e66:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     e68:	2f00      	cmp	r7, #0
     e6a:	dd07      	ble.n	e7c <z_cbvprintf_impl+0x580>
			OUTC(' ');
     e6c:	4629      	mov	r1, r5
     e6e:	2020      	movs	r0, #32
     e70:	47b0      	blx	r6
     e72:	2800      	cmp	r0, #0
     e74:	db09      	blt.n	e8a <z_cbvprintf_impl+0x58e>
     e76:	3401      	adds	r4, #1
			--width;
     e78:	3f01      	subs	r7, #1
     e7a:	e7f5      	b.n	e68 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
     e7c:	f8dd 9008 	ldr.w	r9, [sp, #8]
     e80:	e544      	b.n	90c <z_cbvprintf_impl+0x10>
     e82:	f8dd 9008 	ldr.w	r9, [sp, #8]
     e86:	e541      	b.n	90c <z_cbvprintf_impl+0x10>
		}
	}

	return count;
     e88:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     e8a:	b011      	add	sp, #68	; 0x44
     e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e90:	00007fc9 	.word	0x00007fc9

00000e94 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     e94:	b508      	push	{r3, lr}
     e96:	f04f 0220 	mov.w	r2, #32
     e9a:	f3ef 8311 	mrs	r3, BASEPRI
     e9e:	f382 8812 	msr	BASEPRI_MAX, r2
     ea2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     ea6:	f005 f963 	bl	6170 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     eaa:	4803      	ldr	r0, [pc, #12]	; (eb8 <sys_reboot+0x24>)
     eac:	f004 fbf7 	bl	569e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     eb0:	f000 fb30 	bl	1514 <arch_cpu_idle>
     eb4:	e7fc      	b.n	eb0 <sys_reboot+0x1c>
     eb6:	bf00      	nop
     eb8:	00007fcc 	.word	0x00007fcc

00000ebc <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     ebc:	b168      	cbz	r0, eda <nrfx_coredep_delay_us+0x1e>
{
     ebe:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     ec0:	4a06      	ldr	r2, [pc, #24]	; (edc <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     ec2:	4b07      	ldr	r3, [pc, #28]	; (ee0 <nrfx_coredep_delay_us+0x24>)
     ec4:	681b      	ldr	r3, [r3, #0]
     ec6:	4907      	ldr	r1, [pc, #28]	; (ee4 <nrfx_coredep_delay_us+0x28>)
     ec8:	fba1 1303 	umull	r1, r3, r1, r3
     ecc:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
     ece:	fb00 f003 	mul.w	r0, r0, r3
     ed2:	f042 0301 	orr.w	r3, r2, #1
     ed6:	4798      	blx	r3
}
     ed8:	bd08      	pop	{r3, pc}
     eda:	4770      	bx	lr
     edc:	00007e90 	.word	0x00007e90
     ee0:	20000094 	.word	0x20000094
     ee4:	431bde83 	.word	0x431bde83

00000ee8 <nrf53_anomaly_160_workaround>:
{
	/* This part is supposed to be removed once the writes are available
	 * in hal_nordic/nrfx/MDK.
	 */
#if defined(CONFIG_SOC_NRF5340_CPUAPP) && !defined(CONFIG_TRUSTED_EXECUTION_NONSECURE)
	*((volatile uint32_t *)0x5000470C) = 0x7Eul;
     ee8:	4b0f      	ldr	r3, [pc, #60]	; (f28 <nrf53_anomaly_160_workaround+0x40>)
     eea:	227e      	movs	r2, #126	; 0x7e
     eec:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
	*((volatile uint32_t *)0x5000493C) = 0x7Eul;
     ef0:	f8c3 293c 	str.w	r2, [r3, #2364]	; 0x93c
	*((volatile uint32_t *)0x50002118) = 0x7Ful;
     ef4:	4a0d      	ldr	r2, [pc, #52]	; (f2c <nrf53_anomaly_160_workaround+0x44>)
     ef6:	237f      	movs	r3, #127	; 0x7f
     ef8:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	*((volatile uint32_t *)0x50039E04) = 0x0ul;
     efc:	490c      	ldr	r1, [pc, #48]	; (f30 <nrf53_anomaly_160_workaround+0x48>)
     efe:	2300      	movs	r3, #0
     f00:	f8c1 3e04 	str.w	r3, [r1, #3588]	; 0xe04
	*((volatile uint32_t *)0x50039E08) = 0x0ul;
     f04:	f8c1 3e08 	str.w	r3, [r1, #3592]	; 0xe08
	*((volatile uint32_t *)0x50101110) = 0x0ul;
     f08:	f501 2148 	add.w	r1, r1, #819200	; 0xc8000
     f0c:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
	*((volatile uint32_t *)0x50002124) = 0x0ul;
     f10:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	*((volatile uint32_t *)0x5000212C) = 0x0ul;
     f14:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
	*((volatile uint32_t *)0x502012A0) = 0x0ul;
     f18:	f502 12ff 	add.w	r2, r2, #2088960	; 0x1fe000
     f1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
     f20:	f8c2 32a0 	str.w	r3, [r2, #672]	; 0x2a0
	*((volatile uint32_t *)0x41080E08) = 0x0ul;
	*((volatile uint32_t *)0x41002124) = 0x0ul;
	*((volatile uint32_t *)0x4100212C) = 0x0ul;
	*((volatile uint32_t *)0x41101110) = 0x0ul;
#endif
}
     f24:	4770      	bx	lr
     f26:	bf00      	nop
     f28:	50004000 	.word	0x50004000
     f2c:	50002000 	.word	0x50002000
     f30:	50039000 	.word	0x50039000

00000f34 <nordicsemi_nrf53_init>:
	return true;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(const struct device *arg)
{
     f34:	b570      	push	{r4, r5, r6, lr}
     f36:	f04f 0320 	mov.w	r3, #32
     f3a:	f3ef 8611 	mrs	r6, BASEPRI
     f3e:	f383 8812 	msr	BASEPRI_MAX, r3
     f42:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     f46:	2501      	movs	r5, #1
     f48:	4b12      	ldr	r3, [pc, #72]	; (f94 <nordicsemi_nrf53_init+0x60>)
     f4a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     f4e:	4c12      	ldr	r4, [pc, #72]	; (f98 <nordicsemi_nrf53_init+0x64>)
     f50:	2302      	movs	r3, #2
     f52:	f8c4 36d0 	str.w	r3, [r4, #1744]	; 0x6d0

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     f56:	4a11      	ldr	r2, [pc, #68]	; (f9c <nordicsemi_nrf53_init+0x68>)
     f58:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
     f5c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     f60:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     f64:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     f68:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
     f6c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     f70:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     f74:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	nrf_oscillators_hfxo_cap_set(NRF_OSCILLATORS, false, 0);
#endif

#if defined(CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND)
	/* This needs to be done before DC/DC operation is enabled. */
	nrf53_anomaly_160_workaround();
     f78:	f7ff ffb6 	bl	ee8 <nrf53_anomaly_160_workaround>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     f7c:	f8c4 5704 	str.w	r5, [r4, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     f80:	f8c4 5904 	str.w	r5, [r4, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     f84:	f8c4 5b00 	str.w	r5, [r4, #2816]	; 0xb00
	__asm__ volatile(
     f88:	f386 8811 	msr	BASEPRI, r6
     f8c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     f90:	2000      	movs	r0, #0
     f92:	bd70      	pop	{r4, r5, r6, pc}
     f94:	50001000 	.word	0x50001000
     f98:	50004000 	.word	0x50004000
     f9c:	50842500 	.word	0x50842500

00000fa0 <z_arm_on_enter_cpu_idle>:
{
     fa0:	b538      	push	{r3, r4, r5, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
     fa2:	4b1e      	ldr	r3, [pc, #120]	; (101c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c>)
     fa4:	781b      	ldrb	r3, [r3, #0]
     fa6:	3301      	adds	r3, #1
     fa8:	4a1d      	ldr	r2, [pc, #116]	; (1020 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x20>)
     faa:	fba2 1203 	umull	r1, r2, r2, r3
     fae:	f402 71fe 	and.w	r1, r2, #508	; 0x1fc
     fb2:	eb01 0292 	add.w	r2, r1, r2, lsr #2
     fb6:	1a9c      	subs	r4, r3, r2
     fb8:	b2e5      	uxtb	r5, r4
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     fba:	f005 fefa 	bl	6db2 <sys_clock_cycle_get_32>
	if (timestamps_filled &&
     fbe:	4b19      	ldr	r3, [pc, #100]	; (1024 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x24>)
     fc0:	781b      	ldrb	r3, [r3, #0]
     fc2:	b12b      	cbz	r3, fd0 <z_arm_on_enter_cpu_idle+0x30>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
     fc4:	4a18      	ldr	r2, [pc, #96]	; (1028 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x28>)
     fc6:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
     fca:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
     fcc:	2807      	cmp	r0, #7
     fce:	d91c      	bls.n	100a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa>
	suppress_warning = false;
     fd0:	4b16      	ldr	r3, [pc, #88]	; (102c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2c>)
     fd2:	2200      	movs	r2, #0
     fd4:	701a      	strb	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
     fd6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     fda:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
     fde:	b15b      	cbz	r3, ff8 <z_arm_on_enter_cpu_idle+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     fe0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     fe4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
     fe8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
		current = oldest;
     fec:	4b0b      	ldr	r3, [pc, #44]	; (101c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c>)
     fee:	701d      	strb	r5, [r3, #0]
		if (current == 0) {
     ff0:	b915      	cbnz	r5, ff8 <z_arm_on_enter_cpu_idle+0x58>
			timestamps_filled = true;
     ff2:	4b0c      	ldr	r3, [pc, #48]	; (1024 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x24>)
     ff4:	2201      	movs	r2, #1
     ff6:	701a      	strb	r2, [r3, #0]
	timestamps[current] = k_cycle_get_32();
     ff8:	4b08      	ldr	r3, [pc, #32]	; (101c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c>)
     ffa:	781c      	ldrb	r4, [r3, #0]
     ffc:	f005 fed9 	bl	6db2 <sys_clock_cycle_get_32>
    1000:	4b09      	ldr	r3, [pc, #36]	; (1028 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x28>)
    1002:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	return true;
    1006:	2001      	movs	r0, #1
}
    1008:	bd38      	pop	{r3, r4, r5, pc}
		if (!suppress_warning) {
    100a:	4b08      	ldr	r3, [pc, #32]	; (102c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2c>)
    100c:	781b      	ldrb	r3, [r3, #0]
    100e:	b913      	cbnz	r3, 1016 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x16>
			suppress_warning = true;
    1010:	4b06      	ldr	r3, [pc, #24]	; (102c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2c>)
    1012:	2201      	movs	r2, #1
    1014:	701a      	strb	r2, [r3, #0]
		return false;
    1016:	2000      	movs	r0, #0
    1018:	e7f6      	b.n	1008 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8>
    101a:	bf00      	nop
    101c:	20000db7 	.word	0x20000db7
    1020:	cccccccd 	.word	0xcccccccd
    1024:	20000db6 	.word	0x20000db6
    1028:	200004d4 	.word	0x200004d4
    102c:	20000db5 	.word	0x20000db5

00001030 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    1030:	2806      	cmp	r0, #6
    1032:	d000      	beq.n	1036 <pm_state_set+0x6>
    1034:	4770      	bx	lr
{
    1036:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
    1038:	4801      	ldr	r0, [pc, #4]	; (1040 <pm_state_set+0x10>)
    103a:	f005 f811 	bl	6060 <nrf_regulators_system_off>
    103e:	bf00      	nop
    1040:	50004000 	.word	0x50004000

00001044 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1044:	f002 b860 	b.w	3108 <SystemInit>

00001048 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1048:	b570      	push	{r4, r5, r6, lr}
    104a:	4605      	mov	r5, r0
	__asm__ volatile(
    104c:	f04f 0320 	mov.w	r3, #32
    1050:	f3ef 8611 	mrs	r6, BASEPRI
    1054:	f383 8812 	msr	BASEPRI_MAX, r3
    1058:	f3bf 8f6f 	isb	sy
    105c:	4b0e      	ldr	r3, [pc, #56]	; (1098 <pm_state_notify+0x50>)
    105e:	681c      	ldr	r4, [r3, #0]
    1060:	e00d      	b.n	107e <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    1062:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    1064:	b13a      	cbz	r2, 1076 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1066:	4b0d      	ldr	r3, [pc, #52]	; (109c <pm_state_notify+0x54>)
    1068:	7d1b      	ldrb	r3, [r3, #20]
    106a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    106e:	490c      	ldr	r1, [pc, #48]	; (10a0 <pm_state_notify+0x58>)
    1070:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    1074:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1076:	4623      	mov	r3, r4
	return node->next;
    1078:	6824      	ldr	r4, [r4, #0]
    107a:	b104      	cbz	r4, 107e <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    107c:	b123      	cbz	r3, 1088 <pm_state_notify+0x40>
    107e:	b12c      	cbz	r4, 108c <pm_state_notify+0x44>
		if (entering_state) {
    1080:	2d00      	cmp	r5, #0
    1082:	d0ee      	beq.n	1062 <pm_state_notify+0x1a>
			callback = notifier->state_entry;
    1084:	6862      	ldr	r2, [r4, #4]
    1086:	e7ed      	b.n	1064 <pm_state_notify+0x1c>
    1088:	461c      	mov	r4, r3
    108a:	e7f8      	b.n	107e <pm_state_notify+0x36>
	__asm__ volatile(
    108c:	f386 8811 	msr	BASEPRI, r6
    1090:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1094:	bd70      	pop	{r4, r5, r6, pc}
    1096:	bf00      	nop
    1098:	20000500 	.word	0x20000500
    109c:	20000b98 	.word	0x20000b98
    10a0:	200004f4 	.word	0x200004f4

000010a4 <pm_exit_pos_ops>:
{
    10a4:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
    10a6:	4b06      	ldr	r3, [pc, #24]	; (10c0 <pm_exit_pos_ops+0x1c>)
    10a8:	b123      	cbz	r3, 10b4 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    10aa:	7841      	ldrb	r1, [r0, #1]
    10ac:	7800      	ldrb	r0, [r0, #0]
    10ae:	f004 ffde 	bl	606e <pm_state_exit_post_ops>
}
    10b2:	bd08      	pop	{r3, pc}
    10b4:	2300      	movs	r3, #0
    10b6:	f383 8811 	msr	BASEPRI, r3
    10ba:	f3bf 8f6f 	isb	sy
    10be:	e7f8      	b.n	10b2 <pm_exit_pos_ops+0xe>
    10c0:	0000606f 	.word	0x0000606f

000010c4 <pm_system_resume>:

void pm_system_resume(void)
{
    10c4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    10c6:	4b0e      	ldr	r3, [pc, #56]	; (1100 <pm_system_resume+0x3c>)
    10c8:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    10ca:	4621      	mov	r1, r4
    10cc:	480d      	ldr	r0, [pc, #52]	; (1104 <pm_system_resume+0x40>)
    10ce:	f004 ffd4 	bl	607a <atomic_test_and_clear_bit>
    10d2:	b900      	cbnz	r0, 10d6 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    10d4:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    10d6:	0065      	lsls	r5, r4, #1
    10d8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    10dc:	4e0a      	ldr	r6, [pc, #40]	; (1108 <pm_system_resume+0x44>)
    10de:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    10e2:	f7ff ffdf 	bl	10a4 <pm_exit_pos_ops>
		pm_state_notify(false);
    10e6:	2000      	movs	r0, #0
    10e8:	f7ff ffae 	bl	1048 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    10ec:	192b      	adds	r3, r5, r4
    10ee:	0099      	lsls	r1, r3, #2
    10f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    10f4:	2200      	movs	r2, #0
    10f6:	5072      	str	r2, [r6, r1]
    10f8:	605a      	str	r2, [r3, #4]
    10fa:	609a      	str	r2, [r3, #8]
}
    10fc:	e7ea      	b.n	10d4 <pm_system_resume+0x10>
    10fe:	bf00      	nop
    1100:	20000b98 	.word	0x20000b98
    1104:	20000508 	.word	0x20000508
    1108:	200004f4 	.word	0x200004f4

0000110c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    110e:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    1110:	4b38      	ldr	r3, [pc, #224]	; (11f4 <pm_system_suspend+0xe8>)
    1112:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
    1114:	f04f 0320 	mov.w	r3, #32
    1118:	f3ef 8611 	mrs	r6, BASEPRI
    111c:	f383 8812 	msr	BASEPRI_MAX, r3
    1120:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    1124:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    1128:	4b33      	ldr	r3, [pc, #204]	; (11f8 <pm_system_suspend+0xec>)
    112a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    112e:	2b00      	cmp	r3, #0
    1130:	d039      	beq.n	11a6 <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    1132:	4b32      	ldr	r3, [pc, #200]	; (11fc <pm_system_suspend+0xf0>)
    1134:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    1138:	4f2f      	ldr	r7, [pc, #188]	; (11f8 <pm_system_suspend+0xec>)
    113a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    113e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    1142:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1146:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    114a:	2300      	movs	r3, #0
    114c:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    1150:	f386 8811 	msr	BASEPRI, r6
    1154:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1158:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    115c:	4a27      	ldr	r2, [pc, #156]	; (11fc <pm_system_suspend+0xf0>)
    115e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    1162:	2b00      	cmp	r3, #0
    1164:	d044      	beq.n	11f0 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    1166:	f1b5 3fff 	cmp.w	r5, #4294967295
    116a:	d12b      	bne.n	11c4 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    116c:	f003 fbcc 	bl	4908 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1170:	2001      	movs	r0, #1
    1172:	f7ff ff69 	bl	1048 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    1176:	4621      	mov	r1, r4
    1178:	4821      	ldr	r0, [pc, #132]	; (1200 <pm_system_suspend+0xf4>)
    117a:	f004 ff96 	bl	60aa <atomic_set_bit>
	if (pm_state_set != NULL) {
    117e:	4b21      	ldr	r3, [pc, #132]	; (1204 <pm_system_suspend+0xf8>)
    1180:	b15b      	cbz	r3, 119a <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
    1182:	4a1e      	ldr	r2, [pc, #120]	; (11fc <pm_system_suspend+0xf0>)
    1184:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1188:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    118c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1190:	7859      	ldrb	r1, [r3, #1]
    1192:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    1196:	f7ff ff4b 	bl	1030 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    119a:	f7ff ff93 	bl	10c4 <pm_system_resume>
	k_sched_unlock();
    119e:	f003 fdb5 	bl	4d0c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    11a2:	2001      	movs	r0, #1
}
    11a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    11a6:	4601      	mov	r1, r0
    11a8:	4620      	mov	r0, r4
    11aa:	f000 f831 	bl	1210 <pm_policy_next_state>
		if (info != NULL) {
    11ae:	2800      	cmp	r0, #0
    11b0:	d0ce      	beq.n	1150 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    11b2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11b6:	4b11      	ldr	r3, [pc, #68]	; (11fc <pm_system_suspend+0xf0>)
    11b8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    11bc:	c807      	ldmia	r0, {r0, r1, r2}
    11be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    11c2:	e7c5      	b.n	1150 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    11c4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    11c8:	4b0c      	ldr	r3, [pc, #48]	; (11fc <pm_system_suspend+0xf0>)
    11ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    11ce:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    11d0:	0c41      	lsrs	r1, r0, #17
    11d2:	03c0      	lsls	r0, r0, #15
    11d4:	4b0c      	ldr	r3, [pc, #48]	; (1208 <pm_system_suspend+0xfc>)
    11d6:	18c0      	adds	r0, r0, r3
    11d8:	4a0c      	ldr	r2, [pc, #48]	; (120c <pm_system_suspend+0x100>)
    11da:	f04f 0300 	mov.w	r3, #0
    11de:	f141 0100 	adc.w	r1, r1, #0
    11e2:	f7fe ffb7 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    11e6:	2101      	movs	r1, #1
    11e8:	1a28      	subs	r0, r5, r0
    11ea:	f006 fc22 	bl	7a32 <z_set_timeout_expiry>
    11ee:	e7bd      	b.n	116c <pm_system_suspend+0x60>
		return false;
    11f0:	2000      	movs	r0, #0
    11f2:	e7d7      	b.n	11a4 <pm_system_suspend+0x98>
    11f4:	20000b98 	.word	0x20000b98
    11f8:	200004e8 	.word	0x200004e8
    11fc:	200004f4 	.word	0x200004f4
    1200:	20000508 	.word	0x20000508
    1204:	00001031 	.word	0x00001031
    1208:	000f423f 	.word	0x000f423f
    120c:	000f4240 	.word	0x000f4240

00001210 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    1210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1214:	b082      	sub	sp, #8
    1216:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1218:	a901      	add	r1, sp, #4
    121a:	f000 f845 	bl	12a8 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    121e:	1e44      	subs	r4, r0, #1
    1220:	b224      	sxth	r4, r4
    1222:	e007      	b.n	1234 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    1224:	f1b6 3fff 	cmp.w	r6, #4294967295
    1228:	d033      	beq.n	1292 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    122a:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    122c:	45b0      	cmp	r8, r6
    122e:	d930      	bls.n	1292 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1230:	3c01      	subs	r4, #1
    1232:	b224      	sxth	r4, r4
    1234:	2c00      	cmp	r4, #0
    1236:	db2b      	blt.n	1290 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    1238:	9b01      	ldr	r3, [sp, #4]
    123a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    123e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    1242:	7869      	ldrb	r1, [r5, #1]
    1244:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    1248:	f004 ff3e 	bl	60c8 <pm_policy_state_lock_is_active>
    124c:	2800      	cmp	r0, #0
    124e:	d1ef      	bne.n	1230 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    1250:	6868      	ldr	r0, [r5, #4]
    1252:	0c41      	lsrs	r1, r0, #17
    1254:	03c0      	lsls	r0, r0, #15
    1256:	4f11      	ldr	r7, [pc, #68]	; (129c <pm_policy_next_state+0x8c>)
    1258:	19c0      	adds	r0, r0, r7
    125a:	4a11      	ldr	r2, [pc, #68]	; (12a0 <pm_policy_next_state+0x90>)
    125c:	f04f 0300 	mov.w	r3, #0
    1260:	f141 0100 	adc.w	r1, r1, #0
    1264:	f7fe ff76 	bl	154 <__aeabi_uldivmod>
    1268:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    126a:	68ab      	ldr	r3, [r5, #8]
    126c:	0c59      	lsrs	r1, r3, #17
    126e:	03db      	lsls	r3, r3, #15
    1270:	19d8      	adds	r0, r3, r7
    1272:	4a0b      	ldr	r2, [pc, #44]	; (12a0 <pm_policy_next_state+0x90>)
    1274:	f04f 0300 	mov.w	r3, #0
    1278:	f141 0100 	adc.w	r1, r1, #0
    127c:	f7fe ff6a 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1280:	4b08      	ldr	r3, [pc, #32]	; (12a4 <pm_policy_next_state+0x94>)
    1282:	681b      	ldr	r3, [r3, #0]
    1284:	f1b3 3fff 	cmp.w	r3, #4294967295
    1288:	d0cc      	beq.n	1224 <pm_policy_next_state+0x14>
    128a:	4283      	cmp	r3, r0
    128c:	d8ca      	bhi.n	1224 <pm_policy_next_state+0x14>
    128e:	e7cf      	b.n	1230 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    1290:	2500      	movs	r5, #0
}
    1292:	4628      	mov	r0, r5
    1294:	b002      	add	sp, #8
    1296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    129a:	bf00      	nop
    129c:	000f423f 	.word	0x000f423f
    12a0:	000f4240 	.word	0x000f4240
    12a4:	20000004 	.word	0x20000004

000012a8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    12a8:	b908      	cbnz	r0, 12ae <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    12aa:	4b02      	ldr	r3, [pc, #8]	; (12b4 <pm_state_cpu_get_all+0xc>)
    12ac:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    12ae:	2000      	movs	r0, #0
    12b0:	4770      	bx	lr
    12b2:	bf00      	nop
    12b4:	00008000 	.word	0x00008000

000012b8 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    12b8:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    12ba:	4802      	ldr	r0, [pc, #8]	; (12c4 <nrf_cc3xx_platform_abort_init+0xc>)
    12bc:	f004 f884 	bl	53c8 <nrf_cc3xx_platform_set_abort>
}
    12c0:	bd08      	pop	{r3, pc}
    12c2:	bf00      	nop
    12c4:	00008000 	.word	0x00008000

000012c8 <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
    12c8:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    12cc:	d017      	beq.n	12fe <mutex_flags_unknown+0x36>
    12ce:	d80c      	bhi.n	12ea <mutex_flags_unknown+0x22>
    12d0:	f640 63ba 	movw	r3, #3770	; 0xeba
    12d4:	4298      	cmp	r0, r3
    12d6:	d014      	beq.n	1302 <mutex_flags_unknown+0x3a>
    12d8:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    12dc:	d013      	beq.n	1306 <mutex_flags_unknown+0x3e>
    12de:	283a      	cmp	r0, #58	; 0x3a
    12e0:	d001      	beq.n	12e6 <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
    12e2:	2001      	movs	r0, #1
    12e4:	4770      	bx	lr
    switch(flags){
    12e6:	2000      	movs	r0, #0
    12e8:	4770      	bx	lr
    12ea:	4b09      	ldr	r3, [pc, #36]	; (1310 <mutex_flags_unknown+0x48>)
    12ec:	4298      	cmp	r0, r3
    12ee:	d00c      	beq.n	130a <mutex_flags_unknown+0x42>
    12f0:	4b08      	ldr	r3, [pc, #32]	; (1314 <mutex_flags_unknown+0x4c>)
    12f2:	4298      	cmp	r0, r3
    12f4:	d001      	beq.n	12fa <mutex_flags_unknown+0x32>
            return true;
    12f6:	2001      	movs	r0, #1
    }
}
    12f8:	4770      	bx	lr
    switch(flags){
    12fa:	2000      	movs	r0, #0
    12fc:	4770      	bx	lr
    12fe:	2000      	movs	r0, #0
    1300:	4770      	bx	lr
    1302:	2000      	movs	r0, #0
    1304:	4770      	bx	lr
    1306:	2000      	movs	r0, #0
    1308:	4770      	bx	lr
    130a:	2000      	movs	r0, #0
    130c:	4770      	bx	lr
    130e:	bf00      	nop
    1310:	3a00003a 	.word	0x3a00003a
    1314:	a95c5f2c 	.word	0xa95c5f2c

00001318 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1318:	b328      	cbz	r0, 1366 <mutex_unlock_platform+0x4e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    131a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    131c:	6843      	ldr	r3, [r0, #4]
    131e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1322:	d00a      	beq.n	133a <mutex_unlock_platform+0x22>
    1324:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1328:	d014      	beq.n	1354 <mutex_unlock_platform+0x3c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    132a:	4912      	ldr	r1, [pc, #72]	; (1374 <mutex_unlock_platform+0x5c>)
    132c:	428b      	cmp	r3, r1
    132e:	d01f      	beq.n	1370 <mutex_unlock_platform+0x58>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1330:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1332:	f003 f87f 	bl	4434 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1336:	2000      	movs	r0, #0
    1338:	e014      	b.n	1364 <mutex_unlock_platform+0x4c>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    133a:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    133c:	2200      	movs	r2, #0
    133e:	e8d3 1fef 	ldaex	r1, [r3]
    1342:	2901      	cmp	r1, #1
    1344:	d103      	bne.n	134e <mutex_unlock_platform+0x36>
    1346:	e8c3 2fe0 	stlex	r0, r2, [r3]
    134a:	2800      	cmp	r0, #0
    134c:	d1f7      	bne.n	133e <mutex_unlock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    134e:	d10d      	bne.n	136c <mutex_unlock_platform+0x54>
    1350:	4610      	mov	r0, r2
    1352:	e007      	b.n	1364 <mutex_unlock_platform+0x4c>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    1354:	6803      	ldr	r3, [r0, #0]
    1356:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    1358:	f503 7380 	add.w	r3, r3, #256	; 0x100
    135c:	2000      	movs	r0, #0
    135e:	4a06      	ldr	r2, [pc, #24]	; (1378 <mutex_unlock_platform+0x60>)
    1360:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    1364:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1366:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    136a:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    136c:	4803      	ldr	r0, [pc, #12]	; (137c <mutex_unlock_platform+0x64>)
    136e:	e7f9      	b.n	1364 <mutex_unlock_platform+0x4c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1370:	4803      	ldr	r0, [pc, #12]	; (1380 <mutex_unlock_platform+0x68>)
    1372:	e7f7      	b.n	1364 <mutex_unlock_platform+0x4c>
    1374:	a95c5f2c 	.word	0xa95c5f2c
    1378:	50030000 	.word	0x50030000
    137c:	ffff8fe9 	.word	0xffff8fe9
    1380:	ffff8fea 	.word	0xffff8fea

00001384 <mutex_lock_platform>:
    if(mutex == NULL) {
    1384:	b388      	cbz	r0, 13ea <mutex_lock_platform+0x66>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1386:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    1388:	6843      	ldr	r3, [r0, #4]
    138a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    138e:	d00f      	beq.n	13b0 <mutex_lock_platform+0x2c>
    1390:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1394:	d019      	beq.n	13ca <mutex_lock_platform+0x46>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1396:	4916      	ldr	r1, [pc, #88]	; (13f0 <mutex_lock_platform+0x6c>)
    1398:	428b      	cmp	r3, r1
    139a:	d024      	beq.n	13e6 <mutex_lock_platform+0x62>
        p_mutex = (struct k_mutex *)mutex->mutex;
    139c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    139e:	f04f 32ff 	mov.w	r2, #4294967295
    13a2:	f04f 33ff 	mov.w	r3, #4294967295
    13a6:	f002 ffc1 	bl	432c <z_impl_k_mutex_lock>
        if (ret == 0) {
    13aa:	b168      	cbz	r0, 13c8 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    13ac:	4811      	ldr	r0, [pc, #68]	; (13f4 <mutex_lock_platform+0x70>)
    13ae:	e00b      	b.n	13c8 <mutex_lock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    13b0:	6803      	ldr	r3, [r0, #0]
    13b2:	2201      	movs	r2, #1
    13b4:	e8d3 1fef 	ldaex	r1, [r3]
    13b8:	2900      	cmp	r1, #0
    13ba:	d103      	bne.n	13c4 <mutex_lock_platform+0x40>
    13bc:	e8c3 2fe0 	stlex	r0, r2, [r3]
    13c0:	2800      	cmp	r0, #0
    13c2:	d1f7      	bne.n	13b4 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    13c4:	d10b      	bne.n	13de <mutex_lock_platform+0x5a>
    13c6:	2000      	movs	r0, #0
}
    13c8:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    13ca:	6803      	ldr	r3, [r0, #0]
    13cc:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    13ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
    13d2:	4a09      	ldr	r2, [pc, #36]	; (13f8 <mutex_lock_platform+0x74>)
    13d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    13d8:	b91b      	cbnz	r3, 13e2 <mutex_lock_platform+0x5e>
    13da:	2000      	movs	r0, #0
    13dc:	e7f4      	b.n	13c8 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    13de:	4805      	ldr	r0, [pc, #20]	; (13f4 <mutex_lock_platform+0x70>)
    13e0:	e7f2      	b.n	13c8 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    13e2:	4804      	ldr	r0, [pc, #16]	; (13f4 <mutex_lock_platform+0x70>)
    13e4:	e7f0      	b.n	13c8 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    13e6:	4805      	ldr	r0, [pc, #20]	; (13fc <mutex_lock_platform+0x78>)
    13e8:	e7ee      	b.n	13c8 <mutex_lock_platform+0x44>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    13ea:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    13ee:	4770      	bx	lr
    13f0:	a95c5f2c 	.word	0xa95c5f2c
    13f4:	ffff8fe9 	.word	0xffff8fe9
    13f8:	50030000 	.word	0x50030000
    13fc:	ffff8fea 	.word	0xffff8fea

00001400 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1400:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1402:	4604      	mov	r4, r0
    1404:	b1a8      	cbz	r0, 1432 <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1406:	6863      	ldr	r3, [r4, #4]
    1408:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    140c:	d010      	beq.n	1430 <mutex_free_platform+0x30>
    140e:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1412:	d00d      	beq.n	1430 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1414:	4a0c      	ldr	r2, [pc, #48]	; (1448 <mutex_free_platform+0x48>)
    1416:	4293      	cmp	r3, r2
    1418:	d00a      	beq.n	1430 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    141a:	f413 6f68 	tst.w	r3, #3712	; 0xe80
    141e:	d00d      	beq.n	143c <mutex_free_platform+0x3c>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1420:	4621      	mov	r1, r4
    1422:	480a      	ldr	r0, [pc, #40]	; (144c <mutex_free_platform+0x4c>)
    1424:	f006 f832 	bl	748c <k_mem_slab_free>
        mutex->mutex = NULL;
    1428:	2300      	movs	r3, #0
    142a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    142c:	4b06      	ldr	r3, [pc, #24]	; (1448 <mutex_free_platform+0x48>)
    142e:	6063      	str	r3, [r4, #4]
}
    1430:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1432:	4b07      	ldr	r3, [pc, #28]	; (1450 <mutex_free_platform+0x50>)
    1434:	685b      	ldr	r3, [r3, #4]
    1436:	4807      	ldr	r0, [pc, #28]	; (1454 <mutex_free_platform+0x54>)
    1438:	4798      	blx	r3
    143a:	e7e4      	b.n	1406 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    143c:	2214      	movs	r2, #20
    143e:	2100      	movs	r1, #0
    1440:	6820      	ldr	r0, [r4, #0]
    1442:	f004 ff67 	bl	6314 <memset>
    1446:	e7f1      	b.n	142c <mutex_free_platform+0x2c>
    1448:	a95c5f2c 	.word	0xa95c5f2c
    144c:	20000a0c 	.word	0x20000a0c
    1450:	20000120 	.word	0x20000120
    1454:	00008008 	.word	0x00008008

00001458 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1458:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    145a:	4604      	mov	r4, r0
    145c:	b368      	cbz	r0, 14ba <mutex_init_platform+0x62>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    145e:	6860      	ldr	r0, [r4, #4]
    1460:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    1464:	d028      	beq.n	14b8 <mutex_init_platform+0x60>
    1466:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    146a:	d025      	beq.n	14b8 <mutex_init_platform+0x60>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    146c:	4b17      	ldr	r3, [pc, #92]	; (14cc <mutex_init_platform+0x74>)
    146e:	4298      	cmp	r0, r3
    1470:	d028      	beq.n	14c4 <mutex_init_platform+0x6c>
        mutex_flags_unknown(mutex->flags)) {
    1472:	f7ff ff29 	bl	12c8 <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1476:	b1c0      	cbz	r0, 14aa <mutex_init_platform+0x52>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1478:	f04f 32ff 	mov.w	r2, #4294967295
    147c:	f04f 33ff 	mov.w	r3, #4294967295
    1480:	4621      	mov	r1, r4
    1482:	4813      	ldr	r0, [pc, #76]	; (14d0 <mutex_init_platform+0x78>)
    1484:	f002 fd58 	bl	3f38 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1488:	b908      	cbnz	r0, 148e <mutex_init_platform+0x36>
    148a:	6823      	ldr	r3, [r4, #0]
    148c:	b91b      	cbnz	r3, 1496 <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
    148e:	4b11      	ldr	r3, [pc, #68]	; (14d4 <mutex_init_platform+0x7c>)
    1490:	685b      	ldr	r3, [r3, #4]
    1492:	4811      	ldr	r0, [pc, #68]	; (14d8 <mutex_init_platform+0x80>)
    1494:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1496:	2214      	movs	r2, #20
    1498:	2100      	movs	r1, #0
    149a:	6820      	ldr	r0, [r4, #0]
    149c:	f004 ff3a 	bl	6314 <memset>
        mutex->flags = 0;
    14a0:	2300      	movs	r3, #0
    14a2:	6063      	str	r3, [r4, #4]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    14a4:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    14a8:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    14aa:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    14ac:	f006 f87c 	bl	75a8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    14b0:	6863      	ldr	r3, [r4, #4]
    14b2:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    14b6:	6063      	str	r3, [r4, #4]
}
    14b8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    14ba:	4b06      	ldr	r3, [pc, #24]	; (14d4 <mutex_init_platform+0x7c>)
    14bc:	685b      	ldr	r3, [r3, #4]
    14be:	4807      	ldr	r0, [pc, #28]	; (14dc <mutex_init_platform+0x84>)
    14c0:	4798      	blx	r3
    14c2:	e7cc      	b.n	145e <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    14c4:	6823      	ldr	r3, [r4, #0]
    14c6:	2b00      	cmp	r3, #0
    14c8:	d1d3      	bne.n	1472 <mutex_init_platform+0x1a>
    14ca:	e7d5      	b.n	1478 <mutex_init_platform+0x20>
    14cc:	a95c5f2c 	.word	0xa95c5f2c
    14d0:	20000a0c 	.word	0x20000a0c
    14d4:	20000120 	.word	0x20000120
    14d8:	00008030 	.word	0x00008030
    14dc:	00008008 	.word	0x00008008

000014e0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    14e0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    14e2:	2340      	movs	r3, #64	; 0x40
    14e4:	2214      	movs	r2, #20
    14e6:	4904      	ldr	r1, [pc, #16]	; (14f8 <nrf_cc3xx_platform_mutex_init+0x18>)
    14e8:	4804      	ldr	r0, [pc, #16]	; (14fc <nrf_cc3xx_platform_mutex_init+0x1c>)
    14ea:	f005 ffc1 	bl	7470 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    14ee:	4904      	ldr	r1, [pc, #16]	; (1500 <nrf_cc3xx_platform_mutex_init+0x20>)
    14f0:	4804      	ldr	r0, [pc, #16]	; (1504 <nrf_cc3xx_platform_mutex_init+0x24>)
    14f2:	f003 ffdb 	bl	54ac <nrf_cc3xx_platform_set_mutexes>
}
    14f6:	bd08      	pop	{r3, pc}
    14f8:	2000050c 	.word	0x2000050c
    14fc:	20000a0c 	.word	0x20000a0c
    1500:	00008060 	.word	0x00008060
    1504:	00008074 	.word	0x00008074

00001508 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1508:	4901      	ldr	r1, [pc, #4]	; (1510 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    150a:	2210      	movs	r2, #16
	str	r2, [r1]
    150c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    150e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1510:	e000ed10 	.word	0xe000ed10

00001514 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1514:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1516:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1518:	f380 8811 	msr	BASEPRI, r0
	isb
    151c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    1520:	b501      	push	{r0, lr}
    1522:	f7ff fd3d 	bl	fa0 <z_arm_on_enter_cpu_idle>
    1526:	2800      	cmp	r0, #0
    1528:	d002      	beq.n	1530 <_skip_0>
    152a:	f3bf 8f4f 	dsb	sy
    152e:	bf30      	wfi

00001530 <_skip_0>:
    1530:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1534:	b662      	cpsie	i
	isb
    1536:	f3bf 8f6f 	isb	sy

	bx	lr
    153a:	4770      	bx	lr

0000153c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    153c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    153e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1540:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    1544:	b501      	push	{r0, lr}
    1546:	f7ff fd2b 	bl	fa0 <z_arm_on_enter_cpu_idle>
    154a:	2800      	cmp	r0, #0
    154c:	d002      	beq.n	1554 <_skip_1>
    154e:	f3bf 8f4f 	dsb	sy
    1552:	bf20      	wfe

00001554 <_skip_1>:
    1554:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    1558:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    155c:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    155e:	4770      	bx	lr

00001560 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1560:	2800      	cmp	r0, #0
    1562:	db07      	blt.n	1574 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1564:	f000 021f 	and.w	r2, r0, #31
    1568:	0940      	lsrs	r0, r0, #5
    156a:	2301      	movs	r3, #1
    156c:	4093      	lsls	r3, r2
    156e:	4a02      	ldr	r2, [pc, #8]	; (1578 <__NVIC_EnableIRQ+0x18>)
    1570:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    1574:	4770      	bx	lr
    1576:	bf00      	nop
    1578:	e000e100 	.word	0xe000e100

0000157c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    157c:	2800      	cmp	r0, #0
    157e:	db08      	blt.n	1592 <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1580:	0149      	lsls	r1, r1, #5
    1582:	b2c9      	uxtb	r1, r1
    1584:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    1588:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    158c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    1590:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1592:	f000 000f 	and.w	r0, r0, #15
    1596:	0149      	lsls	r1, r1, #5
    1598:	b2c9      	uxtb	r1, r1
    159a:	4b01      	ldr	r3, [pc, #4]	; (15a0 <__NVIC_SetPriority+0x24>)
    159c:	5419      	strb	r1, [r3, r0]
  }
}
    159e:	4770      	bx	lr
    15a0:	e000ed14 	.word	0xe000ed14

000015a4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    15a4:	0942      	lsrs	r2, r0, #5
    15a6:	4b05      	ldr	r3, [pc, #20]	; (15bc <arch_irq_is_enabled+0x18>)
    15a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    15ac:	f000 001f 	and.w	r0, r0, #31
    15b0:	2301      	movs	r3, #1
    15b2:	fa03 f000 	lsl.w	r0, r3, r0
}
    15b6:	4010      	ands	r0, r2
    15b8:	4770      	bx	lr
    15ba:	bf00      	nop
    15bc:	e000e100 	.word	0xe000e100

000015c0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    15c0:	bf30      	wfi
    b z_SysNmiOnReset
    15c2:	f7ff bffd 	b.w	15c0 <z_SysNmiOnReset>
    15c6:	bf00      	nop

000015c8 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    15c8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    15ca:	4b0b      	ldr	r3, [pc, #44]	; (15f8 <z_arm_prep_c+0x30>)
    15cc:	4a0b      	ldr	r2, [pc, #44]	; (15fc <z_arm_prep_c+0x34>)
    15ce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    15d2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    15d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15d8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    15dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    15e0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    15e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    15e8:	f002 fbf2 	bl	3dd0 <z_bss_zero>
	z_data_copy();
    15ec:	f003 fcfa 	bl	4fe4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    15f0:	f000 f9f8 	bl	19e4 <z_arm_interrupt_init>
	z_cstart();
    15f4:	f002 fc48 	bl	3e88 <z_cstart>
    15f8:	e000ed00 	.word	0xe000ed00
    15fc:	00000000 	.word	0x00000000

00001600 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1600:	4a0a      	ldr	r2, [pc, #40]	; (162c <arch_swap+0x2c>)
    1602:	6893      	ldr	r3, [r2, #8]
    1604:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    1608:	4909      	ldr	r1, [pc, #36]	; (1630 <arch_swap+0x30>)
    160a:	6809      	ldr	r1, [r1, #0]
    160c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1610:	4908      	ldr	r1, [pc, #32]	; (1634 <arch_swap+0x34>)
    1612:	684b      	ldr	r3, [r1, #4]
    1614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1618:	604b      	str	r3, [r1, #4]
    161a:	2300      	movs	r3, #0
    161c:	f383 8811 	msr	BASEPRI, r3
    1620:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1624:	6893      	ldr	r3, [r2, #8]
}
    1626:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    162a:	4770      	bx	lr
    162c:	20000b98 	.word	0x20000b98
    1630:	000082e4 	.word	0x000082e4
    1634:	e000ed00 	.word	0xe000ed00

00001638 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1638:	4914      	ldr	r1, [pc, #80]	; (168c <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    163a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    163c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1640:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1642:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1646:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    164a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    164c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1650:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1654:	4f0e      	ldr	r7, [pc, #56]	; (1690 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1656:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    165a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    165c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    165e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1660:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1664:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1666:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    166a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    166e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1672:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1676:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    167a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    167e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    1680:	f004 fd49 	bl	6116 <configure_builtin_stack_guard>
    pop {r2, lr}
    1684:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1688:	4770      	bx	lr
    168a:	0000      	.short	0x0000
    ldr r1, =_kernel
    168c:	20000b98 	.word	0x20000b98
    ldr v4, =_SCS_ICSR
    1690:	e000ed04 	.word	0xe000ed04

00001694 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1694:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1698:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    169a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    169e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    16a2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    16a4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    16a8:	2902      	cmp	r1, #2
    beq _oops
    16aa:	d0ff      	beq.n	16ac <_oops>

000016ac <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    16ac:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    16ae:	f004 fd15 	bl	60dc <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    16b2:	bd01      	pop	{r0, pc}

000016b4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    16b4:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    16b6:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    16ba:	490e      	ldr	r1, [pc, #56]	; (16f4 <arch_new_thread+0x40>)
    16bc:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    16c0:	f021 0101 	bic.w	r1, r1, #1
    16c4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    16c8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    16cc:	9b01      	ldr	r3, [sp, #4]
    16ce:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    16d2:	9b02      	ldr	r3, [sp, #8]
    16d4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    16d8:	9b03      	ldr	r3, [sp, #12]
    16da:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    16de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    16e2:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    16e6:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    16e8:	2300      	movs	r3, #0
    16ea:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    16ee:	bc10      	pop	{r4}
    16f0:	4770      	bx	lr
    16f2:	bf00      	nop
    16f4:	000056bb 	.word	0x000056bb

000016f8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    16f8:	4b09      	ldr	r3, [pc, #36]	; (1720 <arch_switch_to_main_thread+0x28>)
    16fa:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    16fc:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1700:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1704:	4610      	mov	r0, r2
    1706:	f381 8809 	msr	PSP, r1
    170a:	2100      	movs	r1, #0
    170c:	b663      	cpsie	if
    170e:	f381 8811 	msr	BASEPRI, r1
    1712:	f3bf 8f6f 	isb	sy
    1716:	2200      	movs	r2, #0
    1718:	2300      	movs	r3, #0
    171a:	f003 ffce 	bl	56ba <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    171e:	bf00      	nop
    1720:	20000b98 	.word	0x20000b98

00001724 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1724:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1726:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1728:	4a0b      	ldr	r2, [pc, #44]	; (1758 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    172a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    172c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    172e:	bf1e      	ittt	ne
	movne	r1, #0
    1730:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1732:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1734:	f005 ff1c 	blne	7570 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1738:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    173a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    173e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1742:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1746:	4905      	ldr	r1, [pc, #20]	; (175c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1748:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    174a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    174c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    174e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1752:	4903      	ldr	r1, [pc, #12]	; (1760 <_isr_wrapper+0x3c>)
	bx r1
    1754:	4708      	bx	r1
    1756:	0000      	.short	0x0000
	ldr r2, =_kernel
    1758:	20000b98 	.word	0x20000b98
	ldr r1, =_sw_isr_table
    175c:	00007b98 	.word	0x00007b98
	ldr r1, =z_arm_int_exit
    1760:	00001765 	.word	0x00001765

00001764 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1764:	4b04      	ldr	r3, [pc, #16]	; (1778 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1766:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1768:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    176a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    176c:	d003      	beq.n	1776 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    176e:	4903      	ldr	r1, [pc, #12]	; (177c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1774:	600a      	str	r2, [r1, #0]

00001776 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1776:	4770      	bx	lr
	ldr r3, =_kernel
    1778:	20000b98 	.word	0x20000b98
	ldr r1, =_SCS_ICSR
    177c:	e000ed04 	.word	0xe000ed04

00001780 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1780:	b510      	push	{r4, lr}
    1782:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1784:	4b18      	ldr	r3, [pc, #96]	; (17e8 <mem_manage_fault+0x68>)
    1786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    178c:	f013 0f02 	tst.w	r3, #2
    1790:	d00b      	beq.n	17aa <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1792:	4b15      	ldr	r3, [pc, #84]	; (17e8 <mem_manage_fault+0x68>)
    1794:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1798:	f013 0f80 	tst.w	r3, #128	; 0x80
    179c:	d005      	beq.n	17aa <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    179e:	b121      	cbz	r1, 17aa <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    17a0:	4a11      	ldr	r2, [pc, #68]	; (17e8 <mem_manage_fault+0x68>)
    17a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    17a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    17a8:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    17aa:	4b0f      	ldr	r3, [pc, #60]	; (17e8 <mem_manage_fault+0x68>)
    17ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    17ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    17b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17b2:	f013 0f10 	tst.w	r3, #16
    17b6:	d101      	bne.n	17bc <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    17b8:	4b0b      	ldr	r3, [pc, #44]	; (17e8 <mem_manage_fault+0x68>)
    17ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    17bc:	4b0a      	ldr	r3, [pc, #40]	; (17e8 <mem_manage_fault+0x68>)
    17be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17c0:	f013 0f20 	tst.w	r3, #32
    17c4:	d004      	beq.n	17d0 <mem_manage_fault+0x50>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    17c6:	4a08      	ldr	r2, [pc, #32]	; (17e8 <mem_manage_fault+0x68>)
    17c8:	6a53      	ldr	r3, [r2, #36]	; 0x24
    17ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    17ce:	6253      	str	r3, [r2, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    17d0:	4a05      	ldr	r2, [pc, #20]	; (17e8 <mem_manage_fault+0x68>)
    17d2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    17d4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    17d8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    17da:	2101      	movs	r1, #1
    17dc:	f004 fca0 	bl	6120 <memory_fault_recoverable>
    17e0:	7020      	strb	r0, [r4, #0]

	return reason;
}
    17e2:	2000      	movs	r0, #0
    17e4:	bd10      	pop	{r4, pc}
    17e6:	bf00      	nop
    17e8:	e000ed00 	.word	0xe000ed00

000017ec <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    17ec:	b510      	push	{r4, lr}
    17ee:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    17f0:	4b12      	ldr	r3, [pc, #72]	; (183c <bus_fault+0x50>)
    17f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    17f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    17f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17f8:	f413 7f00 	tst.w	r3, #512	; 0x200
    17fc:	d00b      	beq.n	1816 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    17fe:	4b0f      	ldr	r3, [pc, #60]	; (183c <bus_fault+0x50>)
    1800:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1804:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1808:	d005      	beq.n	1816 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    180a:	b121      	cbz	r1, 1816 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    180c:	4a0b      	ldr	r2, [pc, #44]	; (183c <bus_fault+0x50>)
    180e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1814:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1816:	4b09      	ldr	r3, [pc, #36]	; (183c <bus_fault+0x50>)
    1818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    181c:	f413 7f80 	tst.w	r3, #256	; 0x100
    1820:	d101      	bne.n	1826 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1822:	4b06      	ldr	r3, [pc, #24]	; (183c <bus_fault+0x50>)
    1824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1826:	4a05      	ldr	r2, [pc, #20]	; (183c <bus_fault+0x50>)
    1828:	6a93      	ldr	r3, [r2, #40]	; 0x28
    182a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    182e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1830:	2101      	movs	r1, #1
    1832:	f004 fc75 	bl	6120 <memory_fault_recoverable>
    1836:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1838:	2000      	movs	r0, #0
    183a:	bd10      	pop	{r4, pc}
    183c:	e000ed00 	.word	0xe000ed00

00001840 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1840:	4b0a      	ldr	r3, [pc, #40]	; (186c <usage_fault+0x2c>)
    1842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1846:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1848:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    184c:	d10b      	bne.n	1866 <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    184e:	4b07      	ldr	r3, [pc, #28]	; (186c <usage_fault+0x2c>)
    1850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1856:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    185a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    185e:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1862:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1864:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    1866:	2002      	movs	r0, #2
    1868:	e7f1      	b.n	184e <usage_fault+0xe>
    186a:	bf00      	nop
    186c:	e000ed00 	.word	0xe000ed00

00001870 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1870:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1872:	4b0d      	ldr	r3, [pc, #52]	; (18a8 <z_arm_is_synchronous_svc+0x38>)
    1874:	695a      	ldr	r2, [r3, #20]
    1876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    187a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    187c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1880:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    1884:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1888:	695a      	ldr	r2, [r3, #20]
    188a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    188e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1894:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1898:	f64d 7302 	movw	r3, #57090	; 0xdf02
    189c:	4299      	cmp	r1, r3
    189e:	d001      	beq.n	18a4 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    18a0:	2000      	movs	r0, #0
    18a2:	4770      	bx	lr
		return true;
    18a4:	2001      	movs	r0, #1
}
    18a6:	4770      	bx	lr
    18a8:	e000ed00 	.word	0xe000ed00

000018ac <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    18ac:	b538      	push	{r3, r4, r5, lr}
    18ae:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    18b0:	2300      	movs	r3, #0
    18b2:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    18b4:	4b1a      	ldr	r3, [pc, #104]	; (1920 <hard_fault+0x74>)
    18b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    18b8:	f010 0002 	ands.w	r0, r0, #2
    18bc:	d12d      	bne.n	191a <hard_fault+0x6e>
    18be:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    18c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    18c2:	2b00      	cmp	r3, #0
    18c4:	db2a      	blt.n	191c <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    18c6:	4b16      	ldr	r3, [pc, #88]	; (1920 <hard_fault+0x74>)
    18c8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    18ca:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    18ce:	d025      	beq.n	191c <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
    18d0:	4628      	mov	r0, r5
    18d2:	f7ff ffcd 	bl	1870 <z_arm_is_synchronous_svc>
    18d6:	b108      	cbz	r0, 18dc <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
    18d8:	6828      	ldr	r0, [r5, #0]
    18da:	e01f      	b.n	191c <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    18dc:	4b10      	ldr	r3, [pc, #64]	; (1920 <hard_fault+0x74>)
    18de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18e0:	f013 0fff 	tst.w	r3, #255	; 0xff
    18e4:	d10d      	bne.n	1902 <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    18e6:	4b0e      	ldr	r3, [pc, #56]	; (1920 <hard_fault+0x74>)
    18e8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    18ea:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
    18ee:	d10e      	bne.n	190e <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    18f0:	4b0b      	ldr	r3, [pc, #44]	; (1920 <hard_fault+0x74>)
    18f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    18f8:	d310      	bcc.n	191c <hard_fault+0x70>
			reason = usage_fault(esf);
    18fa:	4628      	mov	r0, r5
    18fc:	f7ff ffa0 	bl	1840 <usage_fault>
    1900:	e00c      	b.n	191c <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    1902:	4622      	mov	r2, r4
    1904:	2101      	movs	r1, #1
    1906:	4628      	mov	r0, r5
    1908:	f7ff ff3a 	bl	1780 <mem_manage_fault>
    190c:	e006      	b.n	191c <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    190e:	4622      	mov	r2, r4
    1910:	2101      	movs	r1, #1
    1912:	4628      	mov	r0, r5
    1914:	f7ff ff6a 	bl	17ec <bus_fault>
    1918:	e000      	b.n	191c <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    191a:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    191c:	bd38      	pop	{r3, r4, r5, pc}
    191e:	bf00      	nop
    1920:	e000ed00 	.word	0xe000ed00

00001924 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1924:	b570      	push	{r4, r5, r6, lr}
    1926:	b08a      	sub	sp, #40	; 0x28
    1928:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    192a:	4b22      	ldr	r3, [pc, #136]	; (19b4 <z_arm_fault+0x90>)
    192c:	6859      	ldr	r1, [r3, #4]
    192e:	f3c1 0108 	ubfx	r1, r1, #0, #9
    1932:	2300      	movs	r3, #0
    1934:	f383 8811 	msr	BASEPRI, r3
    1938:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    193c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1940:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1944:	d115      	bne.n	1972 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1946:	f002 030c 	and.w	r3, r2, #12
    194a:	2b08      	cmp	r3, #8
    194c:	d014      	beq.n	1978 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    194e:	f012 0f08 	tst.w	r2, #8
    1952:	d00b      	beq.n	196c <z_arm_fault+0x48>
	*nested_exc = false;
    1954:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    1956:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    195a:	4620      	mov	r0, r4
    195c:	f004 fbe5 	bl	612a <fault_handle>
    1960:	4605      	mov	r5, r0
	if (recoverable) {
    1962:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    1966:	b153      	cbz	r3, 197e <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1968:	b00a      	add	sp, #40	; 0x28
    196a:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    196c:	4604      	mov	r4, r0
			*nested_exc = true;
    196e:	2601      	movs	r6, #1
    1970:	e7f1      	b.n	1956 <z_arm_fault+0x32>
	*nested_exc = false;
    1972:	2600      	movs	r6, #0
		return NULL;
    1974:	4634      	mov	r4, r6
    1976:	e7ee      	b.n	1956 <z_arm_fault+0x32>
	*nested_exc = false;
    1978:	2600      	movs	r6, #0
		return NULL;
    197a:	4634      	mov	r4, r6
    197c:	e7eb      	b.n	1956 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    197e:	2220      	movs	r2, #32
    1980:	4621      	mov	r1, r4
    1982:	a801      	add	r0, sp, #4
    1984:	f004 fc97 	bl	62b6 <memcpy>
	if (nested_exc) {
    1988:	b14e      	cbz	r6, 199e <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    198a:	9b08      	ldr	r3, [sp, #32]
    198c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1990:	b95a      	cbnz	r2, 19aa <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1992:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1996:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    199a:	9308      	str	r3, [sp, #32]
    199c:	e005      	b.n	19aa <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    199e:	9b08      	ldr	r3, [sp, #32]
    19a0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    19a4:	f023 0301 	bic.w	r3, r3, #1
    19a8:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    19aa:	a901      	add	r1, sp, #4
    19ac:	4628      	mov	r0, r5
    19ae:	f004 fb91 	bl	60d4 <z_arm_fatal_error>
    19b2:	e7d9      	b.n	1968 <z_arm_fault+0x44>
    19b4:	e000ed00 	.word	0xe000ed00

000019b8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    19b8:	4b04      	ldr	r3, [pc, #16]	; (19cc <z_arm_fault_init+0x14>)
    19ba:	695a      	ldr	r2, [r3, #20]
    19bc:	f042 0210 	orr.w	r2, r2, #16
    19c0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    19c2:	695a      	ldr	r2, [r3, #20]
    19c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    19c8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    19ca:	4770      	bx	lr
    19cc:	e000ed00 	.word	0xe000ed00

000019d0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    19d0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    19d4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    19d8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    19da:	4672      	mov	r2, lr
	bl z_arm_fault
    19dc:	f7ff ffa2 	bl	1924 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    19e0:	bd01      	pop	{r0, pc}
    19e2:	bf00      	nop

000019e4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    19e4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    19e6:	e007      	b.n	19f8 <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19e8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    19ec:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    19f0:	2120      	movs	r1, #32
    19f2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    19f6:	3201      	adds	r2, #1
    19f8:	2a44      	cmp	r2, #68	; 0x44
    19fa:	dc09      	bgt.n	1a10 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    19fc:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    19fe:	2b00      	cmp	r3, #0
    1a00:	daf2      	bge.n	19e8 <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1a02:	f003 030f 	and.w	r3, r3, #15
    1a06:	4903      	ldr	r1, [pc, #12]	; (1a14 <z_arm_interrupt_init+0x30>)
    1a08:	4419      	add	r1, r3
    1a0a:	2320      	movs	r3, #32
    1a0c:	760b      	strb	r3, [r1, #24]
    1a0e:	e7f2      	b.n	19f6 <z_arm_interrupt_init+0x12>
	}
}
    1a10:	4770      	bx	lr
    1a12:	bf00      	nop
    1a14:	e000ecfc 	.word	0xe000ecfc

00001a18 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    1a18:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    1a1a:	4915      	ldr	r1, [pc, #84]	; (1a70 <__start+0x58>)
    strb r0, [r1]
    1a1c:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1a1e:	2000      	movs	r0, #0
    msr CONTROL, r0
    1a20:	f380 8814 	msr	CONTROL, r0
    isb
    1a24:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1a28:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1a2a:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1a2e:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1a32:	f7ff fb07 	bl	1044 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1a36:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1a38:	490e      	ldr	r1, [pc, #56]	; (1a74 <__start+0x5c>)
    str r0, [r1]
    1a3a:	6008      	str	r0, [r1, #0]
    dsb
    1a3c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1a40:	480d      	ldr	r0, [pc, #52]	; (1a78 <__start+0x60>)
    msr msp, r0
    1a42:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1a46:	f000 f841 	bl	1acc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a4a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1a4c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1a50:	480a      	ldr	r0, [pc, #40]	; (1a7c <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1a52:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1a56:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1a58:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1a5c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1a60:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1a62:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1a64:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1a68:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1a6c:	f7ff fdac 	bl	15c8 <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
    1a70:	20000dbf 	.word	0x20000dbf
    ldr r1, =_SCS_MPU_CTRL
    1a74:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1a78:	20001b00 	.word	0x20001b00
    ldr r0, =z_interrupt_stacks
    1a7c:	20000dc0 	.word	0x20000dc0

00001a80 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    1a80:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1a84:	4905      	ldr	r1, [pc, #20]	; (1a9c <__NVIC_SystemReset+0x1c>)
    1a86:	68ca      	ldr	r2, [r1, #12]
    1a88:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1a8c:	4b04      	ldr	r3, [pc, #16]	; (1aa0 <__NVIC_SystemReset+0x20>)
    1a8e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1a90:	60cb      	str	r3, [r1, #12]
    1a92:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1a96:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1a98:	e7fd      	b.n	1a96 <__NVIC_SystemReset+0x16>
    1a9a:	bf00      	nop
    1a9c:	e000ed00 	.word	0xe000ed00
    1aa0:	05fa0004 	.word	0x05fa0004

00001aa4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1aa4:	4b08      	ldr	r3, [pc, #32]	; (1ac8 <z_arm_clear_arm_mpu_config+0x24>)
    1aa6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    1aaa:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    1aae:	2300      	movs	r3, #0
    1ab0:	e006      	b.n	1ac0 <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    1ab2:	4a05      	ldr	r2, [pc, #20]	; (1ac8 <z_arm_clear_arm_mpu_config+0x24>)
    1ab4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
    1ab8:	2100      	movs	r1, #0
    1aba:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    1abe:	3301      	adds	r3, #1
    1ac0:	4283      	cmp	r3, r0
    1ac2:	dbf6      	blt.n	1ab2 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    1ac4:	4770      	bx	lr
    1ac6:	bf00      	nop
    1ac8:	e000ed00 	.word	0xe000ed00

00001acc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1acc:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1ace:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1ad0:	2400      	movs	r4, #0
    1ad2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1ad6:	f7ff ffe5 	bl	1aa4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1ada:	4623      	mov	r3, r4
    1adc:	e008      	b.n	1af0 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    1ade:	f103 0120 	add.w	r1, r3, #32
    1ae2:	4a0e      	ldr	r2, [pc, #56]	; (1b1c <z_arm_init_arch_hw_at_boot+0x50>)
    1ae4:	f04f 30ff 	mov.w	r0, #4294967295
    1ae8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1aec:	3301      	adds	r3, #1
    1aee:	b2db      	uxtb	r3, r3
    1af0:	2b0f      	cmp	r3, #15
    1af2:	d9f4      	bls.n	1ade <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1af4:	2300      	movs	r3, #0
    1af6:	e008      	b.n	1b0a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1af8:	f103 0160 	add.w	r1, r3, #96	; 0x60
    1afc:	4a07      	ldr	r2, [pc, #28]	; (1b1c <z_arm_init_arch_hw_at_boot+0x50>)
    1afe:	f04f 30ff 	mov.w	r0, #4294967295
    1b02:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1b06:	3301      	adds	r3, #1
    1b08:	b2db      	uxtb	r3, r3
    1b0a:	2b0f      	cmp	r3, #15
    1b0c:	d9f4      	bls.n	1af8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1b0e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1b10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b14:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1b18:	bd10      	pop	{r4, pc}
    1b1a:	bf00      	nop
    1b1c:	e000e100 	.word	0xe000e100

00001b20 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1b20:	b508      	push	{r3, lr}
	if (_current == thread) {
    1b22:	4b0a      	ldr	r3, [pc, #40]	; (1b4c <z_impl_k_thread_abort+0x2c>)
    1b24:	689b      	ldr	r3, [r3, #8]
    1b26:	4283      	cmp	r3, r0
    1b28:	d002      	beq.n	1b30 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    1b2a:	f003 fa0f 	bl	4f4c <z_thread_abort>
}
    1b2e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1b30:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1b34:	2b00      	cmp	r3, #0
    1b36:	d0f8      	beq.n	1b2a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1b38:	4b05      	ldr	r3, [pc, #20]	; (1b50 <z_impl_k_thread_abort+0x30>)
    1b3a:	685a      	ldr	r2, [r3, #4]
    1b3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1b40:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1b48:	625a      	str	r2, [r3, #36]	; 0x24
    1b4a:	e7ee      	b.n	1b2a <z_impl_k_thread_abort+0xa>
    1b4c:	20000b98 	.word	0x20000b98
    1b50:	e000ed00 	.word	0xe000ed00

00001b54 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1b54:	b510      	push	{r4, lr}
    1b56:	b084      	sub	sp, #16
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1b58:	4c0a      	ldr	r4, [pc, #40]	; (1b84 <z_arm_configure_static_mpu_regions+0x30>)
    1b5a:	4623      	mov	r3, r4
    1b5c:	4a0a      	ldr	r2, [pc, #40]	; (1b88 <z_arm_configure_static_mpu_regions+0x34>)
    1b5e:	2101      	movs	r1, #1
    1b60:	480a      	ldr	r0, [pc, #40]	; (1b8c <z_arm_configure_static_mpu_regions+0x38>)
    1b62:	f004 fb73 	bl	624c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1b66:	2300      	movs	r3, #0
    1b68:	9301      	str	r3, [sp, #4]
    1b6a:	9302      	str	r3, [sp, #8]
    1b6c:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1b6e:	4b08      	ldr	r3, [pc, #32]	; (1b90 <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1b70:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1b72:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1b74:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1b76:	2101      	movs	r1, #1
    1b78:	a801      	add	r0, sp, #4
    1b7a:	f004 fb6b 	bl	6254 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1b7e:	b004      	add	sp, #16
    1b80:	bd10      	pop	{r4, pc}
    1b82:	bf00      	nop
    1b84:	20070000 	.word	0x20070000
    1b88:	20000000 	.word	0x20000000
    1b8c:	00008084 	.word	0x00008084
    1b90:	20000208 	.word	0x20000208

00001b94 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
    1b94:	4b02      	ldr	r3, [pc, #8]	; (1ba0 <mpu_init+0xc>)
    1b96:	4a03      	ldr	r2, [pc, #12]	; (1ba4 <mpu_init+0x10>)
    1b98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
    1b9c:	4770      	bx	lr
    1b9e:	bf00      	nop
    1ba0:	e000ed00 	.word	0xe000ed00
    1ba4:	0044ffaa 	.word	0x0044ffaa

00001ba8 <mpu_set_region>:
	MPU->RNR = rnr;
    1ba8:	4b03      	ldr	r3, [pc, #12]	; (1bb8 <mpu_set_region+0x10>)
    1baa:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
    1bae:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
    1bb2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
    1bb6:	4770      	bx	lr
    1bb8:	e000ed00 	.word	0xe000ed00

00001bbc <mpu_region_get_conf>:
	MPU->RNR = rnr;
    1bbc:	4b0e      	ldr	r3, [pc, #56]	; (1bf8 <mpu_region_get_conf+0x3c>)
    1bbe:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    1bc2:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    1bc6:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
    1bca:	7a0a      	ldrb	r2, [r1, #8]
    1bcc:	f360 0204 	bfi	r2, r0, #0, #5
    1bd0:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
    1bd2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1bd6:	f3c2 0242 	ubfx	r2, r2, #1, #3
    1bda:	7a08      	ldrb	r0, [r1, #8]
    1bdc:	f362 1047 	bfi	r0, r2, #5, #3
    1be0:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
    1be2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1be6:	f022 021f 	bic.w	r2, r2, #31
    1bea:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
    1bec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    1bf0:	f023 031f 	bic.w	r3, r3, #31
    1bf4:	60cb      	str	r3, [r1, #12]
}
    1bf6:	4770      	bx	lr
    1bf8:	e000ed00 	.word	0xe000ed00

00001bfc <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c00:	b087      	sub	sp, #28
    1c02:	4681      	mov	r9, r0
    1c04:	9100      	str	r1, [sp, #0]
    1c06:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    1c08:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    1c0a:	2700      	movs	r7, #0
    1c0c:	e034      	b.n	1c78 <mpu_configure_regions_and_partition+0x7c>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    1c0e:	45d8      	cmp	r8, fp
    1c10:	d165      	bne.n	1cde <mpu_configure_regions_and_partition+0xe2>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    1c12:	4629      	mov	r1, r5
    1c14:	b2c0      	uxtb	r0, r0
    1c16:	f004 fae9 	bl	61ec <mpu_configure_region>
    1c1a:	e02c      	b.n	1c76 <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = rnr;
    1c1c:	4a58      	ldr	r2, [pc, #352]	; (1d80 <mpu_configure_regions_and_partition+0x184>)
    1c1e:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
    1c22:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    1c26:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    1c2a:	f021 011f 	bic.w	r1, r1, #31
    1c2e:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
    1c30:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1c34:	4629      	mov	r1, r5
    1c36:	b2e0      	uxtb	r0, r4
    1c38:	f004 fad8 	bl	61ec <mpu_configure_region>
    1c3c:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1c3e:	f110 0f16 	cmn.w	r0, #22
    1c42:	f000 8096 	beq.w	1d72 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1c46:	3401      	adds	r4, #1
    1c48:	e015      	b.n	1c76 <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    1c4a:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    1c4c:	494c      	ldr	r1, [pc, #304]	; (1d80 <mpu_configure_regions_and_partition+0x184>)
    1c4e:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    1c52:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1c56:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1c5a:	f023 031f 	bic.w	r3, r3, #31
    1c5e:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    1c60:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1c64:	4629      	mov	r1, r5
    1c66:	b2e0      	uxtb	r0, r4
    1c68:	f004 fac0 	bl	61ec <mpu_configure_region>
    1c6c:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1c6e:	f110 0f16 	cmn.w	r0, #22
    1c72:	d07e      	beq.n	1d72 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1c74:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    1c76:	3701      	adds	r7, #1
    1c78:	9b00      	ldr	r3, [sp, #0]
    1c7a:	429f      	cmp	r7, r3
    1c7c:	da79      	bge.n	1d72 <mpu_configure_regions_and_partition+0x176>
		if (regions[i].size == 0U) {
    1c7e:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    1c82:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    1c86:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    1c8a:	686e      	ldr	r6, [r5, #4]
    1c8c:	2e00      	cmp	r6, #0
    1c8e:	d0f2      	beq.n	1c76 <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
    1c90:	9b01      	ldr	r3, [sp, #4]
    1c92:	b123      	cbz	r3, 1c9e <mpu_configure_regions_and_partition+0xa2>
			(!mpu_partition_is_valid(&regions[i]))) {
    1c94:	4628      	mov	r0, r5
    1c96:	f004 fa8c 	bl	61b2 <mpu_partition_is_valid>
		if (do_sanity_check &&
    1c9a:	2800      	cmp	r0, #0
    1c9c:	d065      	beq.n	1d6a <mpu_configure_regions_and_partition+0x16e>
			get_region_index(regions[i].start, regions[i].size);
    1c9e:	4631      	mov	r1, r6
    1ca0:	f859 000a 	ldr.w	r0, [r9, sl]
    1ca4:	f004 fac1 	bl	622a <get_region_index>
    1ca8:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
    1caa:	f110 0f16 	cmn.w	r0, #22
    1cae:	d05f      	beq.n	1d70 <mpu_configure_regions_and_partition+0x174>
    1cb0:	42a0      	cmp	r0, r4
    1cb2:	da62      	bge.n	1d7a <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
    1cb4:	4b32      	ldr	r3, [pc, #200]	; (1d80 <mpu_configure_regions_and_partition+0x184>)
    1cb6:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    1cba:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1cbe:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    1cc2:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
    1cc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1cca:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1cce:	f859 300a 	ldr.w	r3, [r9, sl]
    1cd2:	6869      	ldr	r1, [r5, #4]
    1cd4:	4419      	add	r1, r3
    1cd6:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    1cda:	429a      	cmp	r2, r3
    1cdc:	d097      	beq.n	1c0e <mpu_configure_regions_and_partition+0x12>
		} else if (regions[i].start == u_reg_base) {
    1cde:	429a      	cmp	r2, r3
    1ce0:	d09c      	beq.n	1c1c <mpu_configure_regions_and_partition+0x20>
		} else if (reg_last == u_reg_last) {
    1ce2:	45d8      	cmp	r8, fp
    1ce4:	d0b1      	beq.n	1c4a <mpu_configure_regions_and_partition+0x4e>
			/* The new regions lies strictly inside the
			 * underlying region, which needs to split
			 * into two regions.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    1ce6:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    1ce8:	4925      	ldr	r1, [pc, #148]	; (1d80 <mpu_configure_regions_and_partition+0x184>)
    1cea:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    1cee:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1cf2:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1cf6:	f023 031f 	bic.w	r3, r3, #31
    1cfa:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    1cfc:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1d00:	4629      	mov	r1, r5
    1d02:	b2e0      	uxtb	r0, r4
    1d04:	f004 fa72 	bl	61ec <mpu_configure_region>
    1d08:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1d0a:	f110 0f16 	cmn.w	r0, #22
    1d0e:	d030      	beq.n	1d72 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}
			reg_index++;
    1d10:	3001      	adds	r0, #1
	MPU->RNR = rnr;
    1d12:	4b1b      	ldr	r3, [pc, #108]	; (1d80 <mpu_configure_regions_and_partition+0x184>)
    1d14:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    1d18:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1d1c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1d20:	f361 0204 	bfi	r2, r1, #0, #5
    1d24:	f88d 2010 	strb.w	r2, [sp, #16]
	return MPU->RLAR;
    1d28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1d2c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    1d30:	b2d2      	uxtb	r2, r2
    1d32:	f363 1247 	bfi	r2, r3, #5, #3
    1d36:	f88d 2010 	strb.w	r2, [sp, #16]
			 */
			struct arm_mpu_region fill_region;

			mpu_region_get_access_attr(u_reg_index,
				&fill_region.attr);
			fill_region.base = regions[i].start +
    1d3a:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    1d3e:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    1d40:	4413      	add	r3, r2
    1d42:	9302      	str	r3, [sp, #8]
			fill_region.attr.r_limit =
			REGION_LIMIT_ADDR((regions[i].start +
    1d44:	f023 031f 	bic.w	r3, r3, #31
    1d48:	eba8 080b 	sub.w	r8, r8, fp
    1d4c:	4443      	add	r3, r8
    1d4e:	3b01      	subs	r3, #1
    1d50:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    1d54:	9305      	str	r3, [sp, #20]
				regions[i].size), (u_reg_last - reg_last));

			reg_index =
				region_allocate_and_init(reg_index,
    1d56:	a902      	add	r1, sp, #8
    1d58:	b2c0      	uxtb	r0, r0
    1d5a:	f004 fa3c 	bl	61d6 <region_allocate_and_init>
    1d5e:	4604      	mov	r4, r0
					(const struct arm_mpu_region *)
						&fill_region);

			if (reg_index == -EINVAL) {
    1d60:	f110 0f16 	cmn.w	r0, #22
    1d64:	d005      	beq.n	1d72 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1d66:	3401      	adds	r4, #1
    1d68:	e785      	b.n	1c76 <mpu_configure_regions_and_partition+0x7a>
			return -EINVAL;
    1d6a:	f06f 0415 	mvn.w	r4, #21
    1d6e:	e000      	b.n	1d72 <mpu_configure_regions_and_partition+0x176>
			return -EINVAL;
    1d70:	4604      	mov	r4, r0
		}
	}

	return reg_index;
}
    1d72:	4620      	mov	r0, r4
    1d74:	b007      	add	sp, #28
    1d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    1d7a:	f06f 0415 	mvn.w	r4, #21
    1d7e:	e7f8      	b.n	1d72 <mpu_configure_regions_and_partition+0x176>
    1d80:	e000ed00 	.word	0xe000ed00

00001d84 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1d84:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1d86:	4c03      	ldr	r4, [pc, #12]	; (1d94 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1d88:	2301      	movs	r3, #1
    1d8a:	7822      	ldrb	r2, [r4, #0]
    1d8c:	f7ff ff36 	bl	1bfc <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1d90:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1d92:	bd10      	pop	{r4, pc}
    1d94:	20000db8 	.word	0x20000db8

00001d98 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    1d98:	b570      	push	{r4, r5, r6, lr}
    1d9a:	4605      	mov	r5, r0
    1d9c:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1d9e:	2400      	movs	r4, #0
    1da0:	e000      	b.n	1da4 <mpu_mark_areas_for_dynamic_regions+0xc>
    1da2:	3401      	adds	r4, #1
    1da4:	42a6      	cmp	r6, r4
    1da6:	dd1e      	ble.n	1de6 <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1da8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1dac:	009a      	lsls	r2, r3, #2
    1dae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1db2:	6859      	ldr	r1, [r3, #4]
    1db4:	2900      	cmp	r1, #0
    1db6:	d0f4      	beq.n	1da2 <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1db8:	58a8      	ldr	r0, [r5, r2]
    1dba:	f004 fa36 	bl	622a <get_region_index>
		dyn_reg_info[i].index =
    1dbe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1dc2:	4a0b      	ldr	r2, [pc, #44]	; (1df0 <mpu_mark_areas_for_dynamic_regions+0x58>)
    1dc4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1dc8:	f110 0f16 	cmn.w	r0, #22
    1dcc:	d00c      	beq.n	1de8 <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1dce:	4b09      	ldr	r3, [pc, #36]	; (1df4 <mpu_mark_areas_for_dynamic_regions+0x5c>)
    1dd0:	781b      	ldrb	r3, [r3, #0]
    1dd2:	4298      	cmp	r0, r3
    1dd4:	da09      	bge.n	1dea <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    1dd6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1dda:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    1dde:	3104      	adds	r1, #4
    1de0:	f7ff feec 	bl	1bbc <mpu_region_get_conf>
    1de4:	e7dd      	b.n	1da2 <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    1de6:	2000      	movs	r0, #0
}
    1de8:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    1dea:	f06f 0015 	mvn.w	r0, #21
    1dee:	e7fb      	b.n	1de8 <mpu_mark_areas_for_dynamic_regions+0x50>
    1df0:	20000a28 	.word	0x20000a28
    1df4:	20000db8 	.word	0x20000db8

00001df8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1df8:	4b04      	ldr	r3, [pc, #16]	; (1e0c <arm_core_mpu_enable+0x14>)
    1dfa:	2205      	movs	r2, #5
    1dfc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1e00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e04:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop
    1e0c:	e000ed00 	.word	0xe000ed00

00001e10 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1e10:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1e14:	4b02      	ldr	r3, [pc, #8]	; (1e20 <arm_core_mpu_disable+0x10>)
    1e16:	2200      	movs	r2, #0
    1e18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1e1c:	4770      	bx	lr
    1e1e:	bf00      	nop
    1e20:	e000ed00 	.word	0xe000ed00

00001e24 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1e24:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1e26:	4b0e      	ldr	r3, [pc, #56]	; (1e60 <z_arm_mpu_init+0x3c>)
    1e28:	681d      	ldr	r5, [r3, #0]
    1e2a:	2d08      	cmp	r5, #8
    1e2c:	d815      	bhi.n	1e5a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1e2e:	f7ff ffef 	bl	1e10 <arm_core_mpu_disable>
#endif
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    1e32:	f7ff feaf 	bl	1b94 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e36:	2400      	movs	r4, #0
    1e38:	e007      	b.n	1e4a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1e3a:	4b09      	ldr	r3, [pc, #36]	; (1e60 <z_arm_mpu_init+0x3c>)
    1e3c:	6859      	ldr	r1, [r3, #4]
    1e3e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1e42:	4620      	mov	r0, r4
    1e44:	f004 f9a1 	bl	618a <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e48:	3401      	adds	r4, #1
    1e4a:	42a5      	cmp	r5, r4
    1e4c:	d8f5      	bhi.n	1e3a <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1e4e:	4b05      	ldr	r3, [pc, #20]	; (1e64 <z_arm_mpu_init+0x40>)
    1e50:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1e52:	f7ff ffd1 	bl	1df8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1e56:	2000      	movs	r0, #0
}
    1e58:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1e5a:	f04f 30ff 	mov.w	r0, #4294967295
    1e5e:	e7fb      	b.n	1e58 <z_arm_mpu_init+0x34>
    1e60:	00008094 	.word	0x00008094
    1e64:	20000db8 	.word	0x20000db8

00001e68 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1e68:	4b01      	ldr	r3, [pc, #4]	; (1e70 <__stdout_hook_install+0x8>)
    1e6a:	6018      	str	r0, [r3, #0]
}
    1e6c:	4770      	bx	lr
    1e6e:	bf00      	nop
    1e70:	20000028 	.word	0x20000028

00001e74 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1e74:	4800      	ldr	r0, [pc, #0]	; (1e78 <get_hf_flags+0x4>)
    1e76:	4770      	bx	lr
    1e78:	20000ac8 	.word	0x20000ac8

00001e7c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1e7c:	4b03      	ldr	r3, [pc, #12]	; (1e8c <get_subsys+0x10>)
    1e7e:	1ac0      	subs	r0, r0, r3
    1e80:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1e82:	4b03      	ldr	r3, [pc, #12]	; (1e90 <get_subsys+0x14>)
    1e84:	fb03 f000 	mul.w	r0, r3, r0
    1e88:	4770      	bx	lr
    1e8a:	bf00      	nop
    1e8c:	20000a50 	.word	0x20000a50
    1e90:	b6db6db7 	.word	0xb6db6db7

00001e94 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1e94:	b538      	push	{r3, r4, r5, lr}
    1e96:	4605      	mov	r5, r0
    1e98:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1e9a:	f7ff ffef 	bl	1e7c <get_subsys>
    1e9e:	4601      	mov	r1, r0
    1ea0:	2240      	movs	r2, #64	; 0x40
    1ea2:	4803      	ldr	r0, [pc, #12]	; (1eb0 <onoff_stop+0x1c>)
    1ea4:	f004 fb06 	bl	64b4 <stop>
    1ea8:	4601      	mov	r1, r0
	notify(mgr, res);
    1eaa:	4628      	mov	r0, r5
    1eac:	47a0      	blx	r4
}
    1eae:	bd38      	pop	{r3, r4, r5, pc}
    1eb0:	00007b20 	.word	0x00007b20

00001eb4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1eb4:	b530      	push	{r4, r5, lr}
    1eb6:	b083      	sub	sp, #12
    1eb8:	4605      	mov	r5, r0
    1eba:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1ebc:	f7ff ffde 	bl	1e7c <get_subsys>
    1ec0:	4601      	mov	r1, r0
    1ec2:	2340      	movs	r3, #64	; 0x40
    1ec4:	9300      	str	r3, [sp, #0]
    1ec6:	4623      	mov	r3, r4
    1ec8:	4a05      	ldr	r2, [pc, #20]	; (1ee0 <onoff_start+0x2c>)
    1eca:	4806      	ldr	r0, [pc, #24]	; (1ee4 <onoff_start+0x30>)
    1ecc:	f004 fb0c 	bl	64e8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1ed0:	1e01      	subs	r1, r0, #0
    1ed2:	db01      	blt.n	1ed8 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    1ed4:	b003      	add	sp, #12
    1ed6:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    1ed8:	4628      	mov	r0, r5
    1eda:	47a0      	blx	r4
}
    1edc:	e7fa      	b.n	1ed4 <onoff_start+0x20>
    1ede:	bf00      	nop
    1ee0:	00006531 	.word	0x00006531
    1ee4:	00007b20 	.word	0x00007b20

00001ee8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    1ee8:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    1eea:	2805      	cmp	r0, #5
    1eec:	d815      	bhi.n	1f1a <clock_event_handler+0x32>
    1eee:	e8df f000 	tbb	[pc, r0]
    1ef2:	1a03      	.short	0x1a03
    1ef4:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1ef8:	2100      	movs	r1, #0
    1efa:	480d      	ldr	r0, [pc, #52]	; (1f30 <clock_event_handler+0x48>)
    1efc:	f004 fa65 	bl	63ca <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1f00:	6883      	ldr	r3, [r0, #8]
    1f02:	f013 0f07 	tst.w	r3, #7
    1f06:	d108      	bne.n	1f1a <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1f08:	2100      	movs	r1, #0
    1f0a:	4809      	ldr	r0, [pc, #36]	; (1f30 <clock_event_handler+0x48>)
    1f0c:	f004 fac0 	bl	6490 <clkstarted_handle>
    1f10:	e003      	b.n	1f1a <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1f12:	2102      	movs	r1, #2
    1f14:	4806      	ldr	r0, [pc, #24]	; (1f30 <clock_event_handler+0x48>)
    1f16:	f004 fabb 	bl	6490 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    1f1a:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1f1c:	2103      	movs	r1, #3
    1f1e:	4804      	ldr	r0, [pc, #16]	; (1f30 <clock_event_handler+0x48>)
    1f20:	f004 fab6 	bl	6490 <clkstarted_handle>
		break;
    1f24:	e7f9      	b.n	1f1a <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1f26:	2101      	movs	r1, #1
    1f28:	4801      	ldr	r0, [pc, #4]	; (1f30 <clock_event_handler+0x48>)
    1f2a:	f004 fab1 	bl	6490 <clkstarted_handle>
}
    1f2e:	e7f4      	b.n	1f1a <clock_event_handler+0x32>
    1f30:	00007b20 	.word	0x00007b20

00001f34 <generic_hfclk_start>:
{
    1f34:	b510      	push	{r4, lr}
    1f36:	b082      	sub	sp, #8
	__asm__ volatile(
    1f38:	f04f 0320 	mov.w	r3, #32
    1f3c:	f3ef 8411 	mrs	r4, BASEPRI
    1f40:	f383 8812 	msr	BASEPRI_MAX, r3
    1f44:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1f48:	4a14      	ldr	r2, [pc, #80]	; (1f9c <generic_hfclk_start+0x68>)
    1f4a:	6813      	ldr	r3, [r2, #0]
    1f4c:	f043 0102 	orr.w	r1, r3, #2
    1f50:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1f52:	f013 0f01 	tst.w	r3, #1
    1f56:	d109      	bne.n	1f6c <generic_hfclk_start+0x38>
	bool already_started = false;
    1f58:	2300      	movs	r3, #0
	__asm__ volatile(
    1f5a:	f384 8811 	msr	BASEPRI, r4
    1f5e:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1f62:	b9b3      	cbnz	r3, 1f92 <generic_hfclk_start+0x5e>
	hfclk_start();
    1f64:	f004 faec 	bl	6540 <hfclk_start>
}
    1f68:	b002      	add	sp, #8
    1f6a:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    1f6c:	f10d 0207 	add.w	r2, sp, #7
    1f70:	2101      	movs	r1, #1
    1f72:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    1f76:	f004 f9ee 	bl	6356 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1f7e:	2b01      	cmp	r3, #1
    1f80:	d001      	beq.n	1f86 <generic_hfclk_start+0x52>
	bool already_started = false;
    1f82:	2300      	movs	r3, #0
    1f84:	e7e9      	b.n	1f5a <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    1f86:	f7ff ff75 	bl	1e74 <get_hf_flags>
    1f8a:	f004 fa6e 	bl	646a <set_on_state>
			already_started = true;
    1f8e:	2301      	movs	r3, #1
    1f90:	e7e3      	b.n	1f5a <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    1f92:	2100      	movs	r1, #0
    1f94:	4802      	ldr	r0, [pc, #8]	; (1fa0 <generic_hfclk_start+0x6c>)
    1f96:	f004 fa7b 	bl	6490 <clkstarted_handle>
		return;
    1f9a:	e7e5      	b.n	1f68 <generic_hfclk_start+0x34>
    1f9c:	20000af0 	.word	0x20000af0
    1fa0:	00007b20 	.word	0x00007b20

00001fa4 <generic_hfclk_stop>:
{
    1fa4:	b510      	push	{r4, lr}
	__asm__ volatile(
    1fa6:	f04f 0320 	mov.w	r3, #32
    1faa:	f3ef 8411 	mrs	r4, BASEPRI
    1fae:	f383 8812 	msr	BASEPRI_MAX, r3
    1fb2:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    1fb6:	4a08      	ldr	r2, [pc, #32]	; (1fd8 <generic_hfclk_stop+0x34>)
    1fb8:	6813      	ldr	r3, [r2, #0]
    1fba:	f023 0102 	bic.w	r1, r3, #2
    1fbe:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    1fc0:	f013 0f01 	tst.w	r3, #1
    1fc4:	d004      	beq.n	1fd0 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
    1fc6:	f384 8811 	msr	BASEPRI, r4
    1fca:	f3bf 8f6f 	isb	sy
}
    1fce:	bd10      	pop	{r4, pc}
		hfclk_stop();
    1fd0:	f004 faca 	bl	6568 <hfclk_stop>
    1fd4:	e7f7      	b.n	1fc6 <generic_hfclk_stop+0x22>
    1fd6:	bf00      	nop
    1fd8:	20000af0 	.word	0x20000af0

00001fdc <lfclk_spinwait>:
{
    1fdc:	b570      	push	{r4, r5, r6, lr}
    1fde:	b082      	sub	sp, #8
    1fe0:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1fe2:	2801      	cmp	r0, #1
    1fe4:	d107      	bne.n	1ff6 <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1fe6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1fea:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1fee:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1ff2:	2b02      	cmp	r3, #2
    1ff4:	d037      	beq.n	2066 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x66>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1ff6:	f005 fa84 	bl	7502 <k_is_in_isr>
    1ffa:	4604      	mov	r4, r0
    1ffc:	b910      	cbnz	r0, 2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>
	return !z_sys_post_kernel;
    1ffe:	4b2b      	ldr	r3, [pc, #172]	; (20ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xac>)
    2000:	781b      	ldrb	r3, [r3, #0]
    2002:	b97b      	cbnz	r3, 2024 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x24>
	__asm__ volatile(
    2004:	f04f 0320 	mov.w	r3, #32
    2008:	f3ef 8611 	mrs	r6, BASEPRI
    200c:	f383 8812 	msr	BASEPRI_MAX, r3
    2010:	f3bf 8f6f 	isb	sy
    2014:	2401      	movs	r4, #1
	if (!isr_mode) {
    2016:	b994      	cbnz	r4, 203e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3e>
    p_reg->INTENCLR = mask;
    2018:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    201c:	2202      	movs	r2, #2
    201e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    2022:	e00c      	b.n	203e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3e>
	int key = isr_mode ? irq_lock() : 0;
    2024:	2600      	movs	r6, #0
    2026:	e7f6      	b.n	2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2028:	b1fc      	cbz	r4, 206a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6a>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    202a:	4630      	mov	r0, r6
    202c:	f7ff fa86 	bl	153c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2030:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2034:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2038:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    203a:	2b01      	cmp	r3, #1
    203c:	d019      	beq.n	2072 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x72>
    203e:	f10d 0207 	add.w	r2, sp, #7
    2042:	2100      	movs	r1, #0
    2044:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    2048:	f004 f985 	bl	6356 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    204c:	2800      	cmp	r0, #0
    204e:	d0eb      	beq.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
		 && ((type == target_type)
    2050:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2054:	2b02      	cmp	r3, #2
    2056:	d001      	beq.n	205c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5c>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2058:	2d01      	cmp	r5, #1
    205a:	d1e5      	bne.n	2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>
	if (isr_mode) {
    205c:	b304      	cbz	r4, 20a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa0>
	__asm__ volatile(
    205e:	f386 8811 	msr	BASEPRI, r6
    2062:	f3bf 8f6f 	isb	sy
}
    2066:	b002      	add	sp, #8
    2068:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
    206a:	2001      	movs	r0, #1
    206c:	f004 fa90 	bl	6590 <k_msleep>
    2070:	e7de      	b.n	2030 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x30>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2072:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2076:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    207a:	2b00      	cmp	r3, #0
    207c:	d0df      	beq.n	203e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    207e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2082:	2200      	movs	r2, #0
    2084:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2088:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    208c:	2202      	movs	r2, #2
    208e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2092:	4a07      	ldr	r2, [pc, #28]	; (20b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb0>)
    2094:	2120      	movs	r1, #32
    2096:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    209a:	2201      	movs	r2, #1
    209c:	609a      	str	r2, [r3, #8]
}
    209e:	e7ce      	b.n	203e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3e>
    p_reg->INTENSET = mask;
    20a0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    20a4:	2202      	movs	r2, #2
    20a6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    20aa:	e7dc      	b.n	2066 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x66>
    20ac:	20000dbf 	.word	0x20000dbf
    20b0:	e000e100 	.word	0xe000e100

000020b4 <api_blocking_start>:
{
    20b4:	b500      	push	{lr}
    20b6:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    20b8:	f8cd d000 	str.w	sp, [sp]
    20bc:	f8cd d004 	str.w	sp, [sp, #4]
    20c0:	2300      	movs	r3, #0
    20c2:	9302      	str	r3, [sp, #8]
    20c4:	2301      	movs	r3, #1
    20c6:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    20c8:	466b      	mov	r3, sp
    20ca:	4a07      	ldr	r2, [pc, #28]	; (20e8 <api_blocking_start+0x34>)
    20cc:	f004 fa28 	bl	6520 <api_start>
	if (err < 0) {
    20d0:	2800      	cmp	r0, #0
    20d2:	db05      	blt.n	20e0 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    20d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    20d8:	2300      	movs	r3, #0
    20da:	4668      	mov	r0, sp
    20dc:	f002 fa0c 	bl	44f8 <z_impl_k_sem_take>
}
    20e0:	b005      	add	sp, #20
    20e2:	f85d fb04 	ldr.w	pc, [sp], #4
    20e6:	bf00      	nop
    20e8:	000065bd 	.word	0x000065bd

000020ec <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    20ec:	b570      	push	{r4, r5, r6, lr}
    20ee:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    20f0:	2200      	movs	r2, #0
    20f2:	2101      	movs	r1, #1
    20f4:	2005      	movs	r0, #5
    20f6:	f003 fffc 	bl	60f2 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    20fa:	4811      	ldr	r0, [pc, #68]	; (2140 <clk_init+0x54>)
    20fc:	f001 f8f6 	bl	32ec <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2100:	4b10      	ldr	r3, [pc, #64]	; (2144 <clk_init+0x58>)
    2102:	4298      	cmp	r0, r3
    2104:	d119      	bne.n	213a <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2106:	f005 f86a 	bl	71de <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    210a:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    210c:	2c03      	cmp	r4, #3
    210e:	d812      	bhi.n	2136 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2110:	4621      	mov	r1, r4
    2112:	4630      	mov	r0, r6
    2114:	f004 f959 	bl	63ca <get_sub_data>
    2118:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    211a:	4621      	mov	r1, r4
    211c:	4630      	mov	r0, r6
    211e:	f004 f95f 	bl	63e0 <get_onoff_manager>
    2122:	4909      	ldr	r1, [pc, #36]	; (2148 <clk_init+0x5c>)
    2124:	f003 fcc9 	bl	5aba <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2128:	2800      	cmp	r0, #0
    212a:	db05      	blt.n	2138 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    212c:	2301      	movs	r3, #1
    212e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2130:	441c      	add	r4, r3
    2132:	b2e4      	uxtb	r4, r4
    2134:	e7ea      	b.n	210c <clk_init+0x20>
	}

	return 0;
    2136:	2000      	movs	r0, #0
}
    2138:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    213a:	f06f 0004 	mvn.w	r0, #4
    213e:	e7fb      	b.n	2138 <clk_init+0x4c>
    2140:	00001ee9 	.word	0x00001ee9
    2144:	0bad0000 	.word	0x0bad0000
    2148:	000080cc 	.word	0x000080cc

0000214c <z_nrf_clock_control_lf_on>:
{
    214c:	b510      	push	{r4, lr}
    214e:	4604      	mov	r4, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2150:	4b0e      	ldr	r3, [pc, #56]	; (218c <z_nrf_clock_control_lf_on+0x40>)
    2152:	2101      	movs	r1, #1
    2154:	e8d3 2fef 	ldaex	r2, [r3]
    2158:	e8c3 1fe0 	stlex	r0, r1, [r3]
    215c:	2800      	cmp	r0, #0
    215e:	d1f9      	bne.n	2154 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    2160:	b11a      	cbz	r2, 216a <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    2162:	1e63      	subs	r3, r4, #1
    2164:	2b01      	cmp	r3, #1
    2166:	d90d      	bls.n	2184 <z_nrf_clock_control_lf_on+0x38>
}
    2168:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    216a:	4809      	ldr	r0, [pc, #36]	; (2190 <z_nrf_clock_control_lf_on+0x44>)
    216c:	f004 f938 	bl	63e0 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2170:	4908      	ldr	r1, [pc, #32]	; (2194 <z_nrf_clock_control_lf_on+0x48>)
    2172:	2300      	movs	r3, #0
    2174:	604b      	str	r3, [r1, #4]
    2176:	608b      	str	r3, [r1, #8]
    2178:	60cb      	str	r3, [r1, #12]
    217a:	2301      	movs	r3, #1
    217c:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    217e:	f003 fcb9 	bl	5af4 <onoff_request>
    2182:	e7ee      	b.n	2162 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    2184:	4620      	mov	r0, r4
    2186:	f7ff ff29 	bl	1fdc <lfclk_spinwait>
		break;
    218a:	e7ed      	b.n	2168 <z_nrf_clock_control_lf_on+0x1c>
    218c:	20000a4c 	.word	0x20000a4c
    2190:	00007b20 	.word	0x00007b20
    2194:	20000a3c 	.word	0x20000a3c

00002198 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    2198:	b510      	push	{r4, lr}
    219a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    219c:	280a      	cmp	r0, #10
    219e:	d006      	beq.n	21ae <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    21a0:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    21a2:	4806      	ldr	r0, [pc, #24]	; (21bc <console_out+0x24>)
    21a4:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    21a6:	685b      	ldr	r3, [r3, #4]
    21a8:	4798      	blx	r3

	return c;
}
    21aa:	4620      	mov	r0, r4
    21ac:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    21ae:	4803      	ldr	r0, [pc, #12]	; (21bc <console_out+0x24>)
    21b0:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    21b2:	685b      	ldr	r3, [r3, #4]
    21b4:	210d      	movs	r1, #13
    21b6:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    21b8:	e7f2      	b.n	21a0 <console_out+0x8>
    21ba:	bf00      	nop
    21bc:	00007b80 	.word	0x00007b80

000021c0 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    21c0:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    21c2:	4c04      	ldr	r4, [pc, #16]	; (21d4 <uart_console_hook_install+0x14>)
    21c4:	4620      	mov	r0, r4
    21c6:	f7ff fe4f 	bl	1e68 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    21ca:	4620      	mov	r0, r4
    21cc:	f7fe fa6a 	bl	6a4 <__printk_hook_install>
#endif
}
    21d0:	bd10      	pop	{r4, pc}
    21d2:	bf00      	nop
    21d4:	00002199 	.word	0x00002199

000021d8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    21d8:	b508      	push	{r3, lr}
    21da:	4805      	ldr	r0, [pc, #20]	; (21f0 <uart_console_init+0x18>)
    21dc:	f005 f8ff 	bl	73de <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    21e0:	b118      	cbz	r0, 21ea <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    21e2:	f7ff ffed 	bl	21c0 <uart_console_hook_install>

	return 0;
    21e6:	2000      	movs	r0, #0
}
    21e8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    21ea:	f06f 0012 	mvn.w	r0, #18
    21ee:	e7fb      	b.n	21e8 <uart_console_init+0x10>
    21f0:	00007b80 	.word	0x00007b80

000021f4 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    21f4:	b128      	cbz	r0, 2202 <get_dev+0xe>
    21f6:	2801      	cmp	r0, #1
    21f8:	d101      	bne.n	21fe <get_dev+0xa>
    21fa:	4803      	ldr	r0, [pc, #12]	; (2208 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    21fc:	4770      	bx	lr
	const struct device *dev = NULL;
    21fe:	2000      	movs	r0, #0
    2200:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2202:	4802      	ldr	r0, [pc, #8]	; (220c <get_dev+0x18>)
    2204:	4770      	bx	lr
    2206:	bf00      	nop
    2208:	00007b38 	.word	0x00007b38
    220c:	00007b50 	.word	0x00007b50

00002210 <gpio_nrfx_pin_interrupt_configure>:
{
    2210:	b5f0      	push	{r4, r5, r6, r7, lr}
    2212:	b085      	sub	sp, #20
    2214:	460e      	mov	r6, r1
    2216:	4619      	mov	r1, r3
	return port->config;
    2218:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    221a:	7b1b      	ldrb	r3, [r3, #12]
    221c:	f006 051f 	and.w	r5, r6, #31
    2220:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2224:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    2228:	d022      	beq.n	2270 <gpio_nrfx_pin_interrupt_configure+0x60>
    222a:	4607      	mov	r7, r0
    222c:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    222e:	2300      	movs	r3, #0
    2230:	9301      	str	r3, [sp, #4]
    2232:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    2234:	4610      	mov	r0, r2
    2236:	f004 fa9b 	bl	6770 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    223a:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    223e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2240:	6899      	ldr	r1, [r3, #8]
    2242:	40f1      	lsrs	r1, r6
    2244:	f011 0f01 	tst.w	r1, #1
    2248:	d102      	bne.n	2250 <gpio_nrfx_pin_interrupt_configure+0x40>
    224a:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    224e:	d014      	beq.n	227a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2250:	2300      	movs	r3, #0
    2252:	aa01      	add	r2, sp, #4
    2254:	4619      	mov	r1, r3
    2256:	4628      	mov	r0, r5
    2258:	f001 fb34 	bl	38c4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    225c:	4b1a      	ldr	r3, [pc, #104]	; (22c8 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    225e:	4298      	cmp	r0, r3
    2260:	d12f      	bne.n	22c2 <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2262:	2101      	movs	r1, #1
    2264:	4628      	mov	r0, r5
    2266:	f001 fc91 	bl	3b8c <nrfx_gpiote_trigger_enable>
	return 0;
    226a:	2000      	movs	r0, #0
}
    226c:	b005      	add	sp, #20
    226e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    2270:	4628      	mov	r0, r5
    2272:	f001 fcbd 	bl	3bf0 <nrfx_gpiote_trigger_disable>
		return 0;
    2276:	2000      	movs	r0, #0
    2278:	e7f8      	b.n	226c <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    227a:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    227e:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2280:	2a01      	cmp	r2, #1
    2282:	d012      	beq.n	22aa <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    2284:	4a11      	ldr	r2, [pc, #68]	; (22cc <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2286:	3380      	adds	r3, #128	; 0x80
    2288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    228c:	f013 0f01 	tst.w	r3, #1
    2290:	d1de      	bne.n	2250 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2292:	f10d 010f 	add.w	r1, sp, #15
    2296:	4628      	mov	r0, r5
    2298:	f001 fc1c 	bl	3ad4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    229c:	4b0c      	ldr	r3, [pc, #48]	; (22d0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    229e:	4298      	cmp	r0, r3
    22a0:	d005      	beq.n	22ae <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    22a2:	f10d 030f 	add.w	r3, sp, #15
    22a6:	9302      	str	r3, [sp, #8]
    22a8:	e7d2      	b.n	2250 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    22aa:	4a0a      	ldr	r2, [pc, #40]	; (22d4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    22ac:	e7eb      	b.n	2286 <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    22ae:	f10d 000f 	add.w	r0, sp, #15
    22b2:	f001 fc63 	bl	3b7c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    22b6:	4b04      	ldr	r3, [pc, #16]	; (22c8 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    22b8:	4298      	cmp	r0, r3
    22ba:	d0f2      	beq.n	22a2 <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    22bc:	f06f 000b 	mvn.w	r0, #11
    22c0:	e7d4      	b.n	226c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    22c2:	f06f 0015 	mvn.w	r0, #21
    22c6:	e7d1      	b.n	226c <gpio_nrfx_pin_interrupt_configure+0x5c>
    22c8:	0bad0000 	.word	0x0bad0000
    22cc:	50842500 	.word	0x50842500
    22d0:	0bad0004 	.word	0x0bad0004
    22d4:	50842800 	.word	0x50842800

000022d8 <gpio_nrfx_pin_configure>:
{
    22d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22dc:	b086      	sub	sp, #24
    22de:	460e      	mov	r6, r1
    22e0:	4614      	mov	r4, r2
	return port->config;
    22e2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    22e6:	f898 300c 	ldrb.w	r3, [r8, #12]
    22ea:	f001 051f 	and.w	r5, r1, #31
    22ee:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    22f2:	f10d 0117 	add.w	r1, sp, #23
    22f6:	4628      	mov	r0, r5
    22f8:	f001 fbec 	bl	3ad4 <nrfx_gpiote_channel_get>
    22fc:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    22fe:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    2302:	d039      	beq.n	2378 <gpio_nrfx_pin_configure+0xa0>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2304:	2100      	movs	r1, #0
    2306:	9103      	str	r1, [sp, #12]
    2308:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    230a:	460b      	mov	r3, r1
    230c:	aa03      	add	r2, sp, #12
    230e:	4628      	mov	r0, r5
    2310:	f001 fad8 	bl	38c4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2314:	4b32      	ldr	r3, [pc, #200]	; (23e0 <gpio_nrfx_pin_configure+0x108>)
    2316:	4298      	cmp	r0, r3
    2318:	d15f      	bne.n	23da <gpio_nrfx_pin_configure+0x102>
	if (free_ch) {
    231a:	429f      	cmp	r7, r3
    231c:	d03c      	beq.n	2398 <gpio_nrfx_pin_configure+0xc0>
	if (flags & GPIO_OUTPUT) {
    231e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    2322:	d047      	beq.n	23b4 <gpio_nrfx_pin_configure+0xdc>
		int rv = get_drive(flags, &drive);
    2324:	f10d 0103 	add.w	r1, sp, #3
    2328:	4620      	mov	r0, r4
    232a:	f004 f9ae 	bl	668a <get_drive>
		if (rv != 0) {
    232e:	4607      	mov	r7, r0
    2330:	bb48      	cbnz	r0, 2386 <gpio_nrfx_pin_configure+0xae>
		nrfx_gpiote_output_config_t output_config = {
    2332:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2336:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    233a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    233e:	bf0c      	ite	eq
    2340:	2301      	moveq	r3, #1
    2342:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2344:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2348:	4620      	mov	r0, r4
    234a:	f004 f9e1 	bl	6710 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    234e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2352:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    2356:	d024      	beq.n	23a2 <gpio_nrfx_pin_configure+0xca>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2358:	f8d8 2004 	ldr.w	r2, [r8, #4]
    235c:	2301      	movs	r3, #1
    235e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    2360:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2362:	2200      	movs	r2, #0
    2364:	a901      	add	r1, sp, #4
    2366:	4628      	mov	r0, r5
    2368:	f001 fb42 	bl	39f0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    236c:	4b1c      	ldr	r3, [pc, #112]	; (23e0 <gpio_nrfx_pin_configure+0x108>)
    236e:	4298      	cmp	r0, r3
    2370:	d009      	beq.n	2386 <gpio_nrfx_pin_configure+0xae>
    2372:	f06f 0715 	mvn.w	r7, #21
    2376:	e006      	b.n	2386 <gpio_nrfx_pin_configure+0xae>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    2378:	4628      	mov	r0, r5
    237a:	f001 fc5b 	bl	3c34 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    237e:	4b18      	ldr	r3, [pc, #96]	; (23e0 <gpio_nrfx_pin_configure+0x108>)
    2380:	429f      	cmp	r7, r3
    2382:	d004      	beq.n	238e <gpio_nrfx_pin_configure+0xb6>
		return 0;
    2384:	2700      	movs	r7, #0
}
    2386:	4638      	mov	r0, r7
    2388:	b006      	add	sp, #24
    238a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    238e:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2392:	f001 fbeb 	bl	3b6c <nrfx_gpiote_channel_free>
    2396:	e7f5      	b.n	2384 <gpio_nrfx_pin_configure+0xac>
		err = nrfx_gpiote_channel_free(ch);
    2398:	f89d 0017 	ldrb.w	r0, [sp, #23]
    239c:	f001 fbe6 	bl	3b6c <nrfx_gpiote_channel_free>
    23a0:	e7bd      	b.n	231e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    23a2:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    23a6:	d0dc      	beq.n	2362 <gpio_nrfx_pin_configure+0x8a>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    23a8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    23ac:	2301      	movs	r3, #1
    23ae:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    23b0:	60d3      	str	r3, [r2, #12]
}
    23b2:	e7d6      	b.n	2362 <gpio_nrfx_pin_configure+0x8a>
		.pull = get_pull(flags)
    23b4:	4620      	mov	r0, r4
    23b6:	f004 f9ab 	bl	6710 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    23ba:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    23be:	2300      	movs	r3, #0
    23c0:	461a      	mov	r2, r3
    23c2:	a902      	add	r1, sp, #8
    23c4:	4628      	mov	r0, r5
    23c6:	f001 fa7d 	bl	38c4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    23ca:	4b05      	ldr	r3, [pc, #20]	; (23e0 <gpio_nrfx_pin_configure+0x108>)
    23cc:	4298      	cmp	r0, r3
    23ce:	d101      	bne.n	23d4 <gpio_nrfx_pin_configure+0xfc>
    23d0:	2700      	movs	r7, #0
    23d2:	e7d8      	b.n	2386 <gpio_nrfx_pin_configure+0xae>
    23d4:	f06f 0715 	mvn.w	r7, #21
    23d8:	e7d5      	b.n	2386 <gpio_nrfx_pin_configure+0xae>
		return -EINVAL;
    23da:	f06f 0715 	mvn.w	r7, #21
    23de:	e7d2      	b.n	2386 <gpio_nrfx_pin_configure+0xae>
    23e0:	0bad0000 	.word	0x0bad0000

000023e4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    23e4:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    23e6:	f001 fbb7 	bl	3b58 <nrfx_gpiote_is_init>
    23ea:	b108      	cbz	r0, 23f0 <gpio_nrfx_init+0xc>
		return 0;
    23ec:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    23ee:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    23f0:	f001 fb88 	bl	3b04 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    23f4:	4b08      	ldr	r3, [pc, #32]	; (2418 <gpio_nrfx_init+0x34>)
    23f6:	4298      	cmp	r0, r3
    23f8:	d10a      	bne.n	2410 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    23fa:	2100      	movs	r1, #0
    23fc:	4807      	ldr	r0, [pc, #28]	; (241c <gpio_nrfx_init+0x38>)
    23fe:	f001 fb63 	bl	3ac8 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2402:	2200      	movs	r2, #0
    2404:	2105      	movs	r1, #5
    2406:	200d      	movs	r0, #13
    2408:	f003 fe73 	bl	60f2 <z_arm_irq_priority_set>
	return 0;
    240c:	2000      	movs	r0, #0
    240e:	e7ee      	b.n	23ee <gpio_nrfx_init+0xa>
		return -EIO;
    2410:	f06f 0004 	mvn.w	r0, #4
    2414:	e7eb      	b.n	23ee <gpio_nrfx_init+0xa>
    2416:	bf00      	nop
    2418:	0bad0000 	.word	0x0bad0000
    241c:	000067a9 	.word	0x000067a9

00002420 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    2420:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    2422:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    2424:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    2428:	d06f      	beq.n	250a <baudrate_set+0xea>
    242a:	d83a      	bhi.n	24a2 <baudrate_set+0x82>
    242c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2430:	d06e      	beq.n	2510 <baudrate_set+0xf0>
    2432:	d90a      	bls.n	244a <baudrate_set+0x2a>
    2434:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    2438:	d075      	beq.n	2526 <baudrate_set+0x106>
    243a:	d924      	bls.n	2486 <baudrate_set+0x66>
    243c:	f647 2312 	movw	r3, #31250	; 0x7a12
    2440:	4299      	cmp	r1, r3
    2442:	d12b      	bne.n	249c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2444:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2448:	e013      	b.n	2472 <baudrate_set+0x52>
	switch (baudrate) {
    244a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    244e:	d061      	beq.n	2514 <baudrate_set+0xf4>
    2450:	d907      	bls.n	2462 <baudrate_set+0x42>
    2452:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2456:	d063      	beq.n	2520 <baudrate_set+0x100>
    2458:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    245c:	d110      	bne.n	2480 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    245e:	4b3c      	ldr	r3, [pc, #240]	; (2550 <baudrate_set+0x130>)
    2460:	e007      	b.n	2472 <baudrate_set+0x52>
	switch (baudrate) {
    2462:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2466:	d058      	beq.n	251a <baudrate_set+0xfa>
    2468:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    246c:	d105      	bne.n	247a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    246e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2472:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    2476:	2000      	movs	r0, #0
    2478:	4770      	bx	lr
	switch (baudrate) {
    247a:	f06f 0015 	mvn.w	r0, #21
    247e:	4770      	bx	lr
    2480:	f06f 0015 	mvn.w	r0, #21
    2484:	4770      	bx	lr
    2486:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    248a:	d04e      	beq.n	252a <baudrate_set+0x10a>
    248c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2490:	d101      	bne.n	2496 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2492:	4b30      	ldr	r3, [pc, #192]	; (2554 <baudrate_set+0x134>)
    2494:	e7ed      	b.n	2472 <baudrate_set+0x52>
	switch (baudrate) {
    2496:	f06f 0015 	mvn.w	r0, #21
    249a:	4770      	bx	lr
    249c:	f06f 0015 	mvn.w	r0, #21
    24a0:	4770      	bx	lr
    24a2:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    24a6:	d042      	beq.n	252e <baudrate_set+0x10e>
    24a8:	d909      	bls.n	24be <baudrate_set+0x9e>
    24aa:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    24ae:	d046      	beq.n	253e <baudrate_set+0x11e>
    24b0:	d91f      	bls.n	24f2 <baudrate_set+0xd2>
    24b2:	4b29      	ldr	r3, [pc, #164]	; (2558 <baudrate_set+0x138>)
    24b4:	4299      	cmp	r1, r3
    24b6:	d148      	bne.n	254a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    24b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    24bc:	e7d9      	b.n	2472 <baudrate_set+0x52>
	switch (baudrate) {
    24be:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    24c2:	d037      	beq.n	2534 <baudrate_set+0x114>
    24c4:	d905      	bls.n	24d2 <baudrate_set+0xb2>
    24c6:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    24ca:	d10f      	bne.n	24ec <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    24cc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    24d0:	e7cf      	b.n	2472 <baudrate_set+0x52>
	switch (baudrate) {
    24d2:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    24d6:	4299      	cmp	r1, r3
    24d8:	d02e      	beq.n	2538 <baudrate_set+0x118>
    24da:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    24de:	d102      	bne.n	24e6 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    24e0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    24e4:	e7c5      	b.n	2472 <baudrate_set+0x52>
	switch (baudrate) {
    24e6:	f06f 0015 	mvn.w	r0, #21
    24ea:	4770      	bx	lr
    24ec:	f06f 0015 	mvn.w	r0, #21
    24f0:	4770      	bx	lr
    24f2:	4b1a      	ldr	r3, [pc, #104]	; (255c <baudrate_set+0x13c>)
    24f4:	4299      	cmp	r1, r3
    24f6:	d025      	beq.n	2544 <baudrate_set+0x124>
    24f8:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    24fc:	d102      	bne.n	2504 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    24fe:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2502:	e7b6      	b.n	2472 <baudrate_set+0x52>
	switch (baudrate) {
    2504:	f06f 0015 	mvn.w	r0, #21
    2508:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    250a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    250e:	e7b0      	b.n	2472 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2510:	4b13      	ldr	r3, [pc, #76]	; (2560 <baudrate_set+0x140>)
    2512:	e7ae      	b.n	2472 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2514:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2518:	e7ab      	b.n	2472 <baudrate_set+0x52>
	switch (baudrate) {
    251a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    251e:	e7a8      	b.n	2472 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2520:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2524:	e7a5      	b.n	2472 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2526:	4b0f      	ldr	r3, [pc, #60]	; (2564 <baudrate_set+0x144>)
    2528:	e7a3      	b.n	2472 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    252a:	4b0f      	ldr	r3, [pc, #60]	; (2568 <baudrate_set+0x148>)
    252c:	e7a1      	b.n	2472 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    252e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2532:	e79e      	b.n	2472 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2534:	4b0d      	ldr	r3, [pc, #52]	; (256c <baudrate_set+0x14c>)
    2536:	e79c      	b.n	2472 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2538:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    253c:	e799      	b.n	2472 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    253e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2542:	e796      	b.n	2472 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2544:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2548:	e793      	b.n	2472 <baudrate_set+0x52>
	switch (baudrate) {
    254a:	f06f 0015 	mvn.w	r0, #21
}
    254e:	4770      	bx	lr
    2550:	0013b000 	.word	0x0013b000
    2554:	004ea000 	.word	0x004ea000
    2558:	000f4240 	.word	0x000f4240
    255c:	0003d090 	.word	0x0003d090
    2560:	00275000 	.word	0x00275000
    2564:	0075c000 	.word	0x0075c000
    2568:	003af000 	.word	0x003af000
    256c:	013a9000 	.word	0x013a9000

00002570 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2572:	4605      	mov	r5, r0
    2574:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    2576:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2578:	f004 ffc3 	bl	7502 <k_is_in_isr>
    257c:	b910      	cbnz	r0, 2584 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    257e:	4b12      	ldr	r3, [pc, #72]	; (25c8 <uarte_nrfx_poll_out+0x58>)
    2580:	781b      	ldrb	r3, [r3, #0]
    2582:	b983      	cbnz	r3, 25a6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2584:	f04f 0320 	mov.w	r3, #32
    2588:	f3ef 8411 	mrs	r4, BASEPRI
    258c:	f383 8812 	msr	BASEPRI_MAX, r3
    2590:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2594:	4628      	mov	r0, r5
    2596:	f004 f9f1 	bl	697c <is_tx_ready>
    259a:	b940      	cbnz	r0, 25ae <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    259c:	f384 8811 	msr	BASEPRI, r4
    25a0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    25a4:	e7ee      	b.n	2584 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    25a6:	4628      	mov	r0, r5
    25a8:	f004 fb15 	bl	6bd6 <wait_tx_ready>
    25ac:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    25ae:	697b      	ldr	r3, [r7, #20]
    25b0:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    25b2:	2201      	movs	r2, #1
    25b4:	6979      	ldr	r1, [r7, #20]
    25b6:	4628      	mov	r0, r5
    25b8:	f004 f9fa 	bl	69b0 <tx_start>
	__asm__ volatile(
    25bc:	f384 8811 	msr	BASEPRI, r4
    25c0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    25c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25c6:	bf00      	nop
    25c8:	20000dbf 	.word	0x20000dbf

000025cc <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    25cc:	b538      	push	{r3, r4, r5, lr}
    25ce:	4605      	mov	r5, r0
    25d0:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    25d2:	f101 001c 	add.w	r0, r1, #28
    25d6:	f000 feff 	bl	33d8 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    25da:	4b0a      	ldr	r3, [pc, #40]	; (2604 <endtx_stoptx_ppi_init+0x38>)
    25dc:	4298      	cmp	r0, r3
    25de:	d10e      	bne.n	25fe <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    25e0:	7f23      	ldrb	r3, [r4, #28]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    25e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    25e6:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    25ea:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    25ee:	7f22      	ldrb	r2, [r4, #28]
    25f0:	2301      	movs	r3, #1
    25f2:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    25f4:	4a04      	ldr	r2, [pc, #16]	; (2608 <endtx_stoptx_ppi_init+0x3c>)
    25f6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    25fa:	2000      	movs	r0, #0
}
    25fc:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    25fe:	f06f 0004 	mvn.w	r0, #4
    2602:	e7fb      	b.n	25fc <endtx_stoptx_ppi_init+0x30>
    2604:	0bad0000 	.word	0x0bad0000
    2608:	50017000 	.word	0x50017000

0000260c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    260c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    2610:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2614:	4b01      	ldr	r3, [pc, #4]	; (261c <set_comparator+0x10>)
    2616:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    261a:	4770      	bx	lr
    261c:	50015000 	.word	0x50015000

00002620 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2624:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2626:	4a02      	ldr	r2, [pc, #8]	; (2630 <event_enable+0x10>)
    2628:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    262c:	4770      	bx	lr
    262e:	bf00      	nop
    2630:	50015000 	.word	0x50015000

00002634 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2638:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    263a:	4a02      	ldr	r2, [pc, #8]	; (2644 <event_disable+0x10>)
    263c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    2640:	4770      	bx	lr
    2642:	bf00      	nop
    2644:	50015000 	.word	0x50015000

00002648 <counter>:
     return p_reg->COUNTER;
    2648:	4b01      	ldr	r3, [pc, #4]	; (2650 <counter+0x8>)
    264a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    264e:	4770      	bx	lr
    2650:	50015000 	.word	0x50015000

00002654 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
    2654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2658:	4606      	mov	r6, r0
    265a:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
    265c:	f7ff ffea 	bl	2634 <event_disable>
	event_clear(chan);
    2660:	4630      	mov	r0, r6
    2662:	f004 fb70 	bl	6d46 <event_clear>
	uint32_t cc_val = req_cc;
    2666:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    2668:	2703      	movs	r7, #3
    266a:	e001      	b.n	2670 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
    266c:	193d      	adds	r5, r7, r4
			cc_inc++;
    266e:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
    2670:	4629      	mov	r1, r5
    2672:	4630      	mov	r0, r6
    2674:	f7ff ffca 	bl	260c <set_comparator>
		event_enable(chan);
    2678:	4630      	mov	r0, r6
    267a:	f7ff ffd1 	bl	2620 <event_enable>
		now = counter();
    267e:	f7ff ffe3 	bl	2648 <counter>
    2682:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2684:	1cc1      	adds	r1, r0, #3
    2686:	4628      	mov	r0, r5
    2688:	f004 fb4c 	bl	6d24 <counter_sub>
    268c:	4b0b      	ldr	r3, [pc, #44]	; (26bc <set_alarm+0x68>)
    268e:	4298      	cmp	r0, r3
    2690:	d911      	bls.n	26b6 <set_alarm+0x62>
			if (event_check(chan)) {
    2692:	4630      	mov	r0, r6
    2694:	f004 fb4a 	bl	6d2c <event_check>
    2698:	2800      	cmp	r0, #0
    269a:	d0e7      	beq.n	266c <set_alarm+0x18>
				now = counter();
    269c:	f7ff ffd4 	bl	2648 <counter>
    26a0:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    26a2:	4641      	mov	r1, r8
    26a4:	f004 fb3e 	bl	6d24 <counter_sub>
    26a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    26ac:	d903      	bls.n	26b6 <set_alarm+0x62>
					event_clear(chan);
    26ae:	4630      	mov	r0, r6
    26b0:	f004 fb49 	bl	6d46 <event_clear>
    26b4:	e7da      	b.n	266c <set_alarm+0x18>
		} else {
			break;
		}
	}
}
    26b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26ba:	bf00      	nop
    26bc:	007ffffd 	.word	0x007ffffd

000026c0 <compare_int_lock>:
{
    26c0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    26c2:	2301      	movs	r3, #1
    26c4:	4083      	lsls	r3, r0
    26c6:	ea6f 0c03 	mvn.w	ip, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    26ca:	4a0c      	ldr	r2, [pc, #48]	; (26fc <compare_int_lock+0x3c>)
    26cc:	e8d2 1fef 	ldaex	r1, [r2]
    26d0:	ea01 0e0c 	and.w	lr, r1, ip
    26d4:	e8c2 efe4 	stlex	r4, lr, [r2]
    26d8:	2c00      	cmp	r4, #0
    26da:	d1f7      	bne.n	26cc <compare_int_lock+0xc>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    26dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    26e0:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    26e2:	4807      	ldr	r0, [pc, #28]	; (2700 <compare_int_lock+0x40>)
    26e4:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    26e8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26ec:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    26f0:	420b      	tst	r3, r1
}
    26f2:	bf14      	ite	ne
    26f4:	2001      	movne	r0, #1
    26f6:	2000      	moveq	r0, #0
    26f8:	bd10      	pop	{r4, pc}
    26fa:	bf00      	nop
    26fc:	20000b50 	.word	0x20000b50
    2700:	50015000 	.word	0x50015000

00002704 <channel_processing_check_and_clear>:
	sys_clock_announce(dticks);
}

static bool channel_processing_check_and_clear(int32_t chan)
{
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2708:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
    270a:	4a12      	ldr	r2, [pc, #72]	; (2754 <channel_processing_check_and_clear+0x50>)
    270c:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    2710:	4213      	tst	r3, r2
    2712:	d101      	bne.n	2718 <channel_processing_check_and_clear+0x14>
			event_clear(chan);
			return true;
		}
	}

	return false;
    2714:	2000      	movs	r0, #0
}
    2716:	4770      	bx	lr
{
    2718:	b510      	push	{r4, lr}
    271a:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    271c:	2301      	movs	r3, #1
    271e:	4083      	lsls	r3, r0
    2720:	43db      	mvns	r3, r3
    2722:	490d      	ldr	r1, [pc, #52]	; (2758 <channel_processing_check_and_clear+0x54>)
    2724:	e8d1 2fef 	ldaex	r2, [r1]
    2728:	ea02 0003 	and.w	r0, r2, r3
    272c:	e8c1 0fec 	stlex	ip, r0, [r1]
    2730:	f1bc 0f00 	cmp.w	ip, #0
    2734:	d1f6      	bne.n	2724 <channel_processing_check_and_clear+0x20>
    2736:	fa22 f304 	lsr.w	r3, r2, r4
    273a:	f013 0f01 	tst.w	r3, #1
    273e:	d103      	bne.n	2748 <channel_processing_check_and_clear+0x44>
		    event_check(chan)) {
    2740:	4620      	mov	r0, r4
    2742:	f004 faf3 	bl	6d2c <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    2746:	b118      	cbz	r0, 2750 <channel_processing_check_and_clear+0x4c>
			event_clear(chan);
    2748:	4620      	mov	r0, r4
    274a:	f004 fafc 	bl	6d46 <event_clear>
			return true;
    274e:	2001      	movs	r0, #1
}
    2750:	bd10      	pop	{r4, pc}
    2752:	bf00      	nop
    2754:	50015000 	.word	0x50015000
    2758:	20000b4c 	.word	0x20000b4c

0000275c <compare_int_unlock>:
	if (key) {
    275c:	b901      	cbnz	r1, 2760 <compare_int_unlock+0x4>
}
    275e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    2760:	2301      	movs	r3, #1
    2762:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2764:	4a0d      	ldr	r2, [pc, #52]	; (279c <compare_int_unlock+0x40>)
    2766:	e8d2 cfef 	ldaex	ip, [r2]
    276a:	ea4c 0c03 	orr.w	ip, ip, r3
    276e:	e8c2 cfe1 	stlex	r1, ip, [r2]
    2772:	2900      	cmp	r1, #0
    2774:	d1f7      	bne.n	2766 <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    277a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    277c:	4a08      	ldr	r2, [pc, #32]	; (27a0 <compare_int_unlock+0x44>)
    277e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2782:	4b08      	ldr	r3, [pc, #32]	; (27a4 <compare_int_unlock+0x48>)
    2784:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2788:	40c3      	lsrs	r3, r0
    278a:	f013 0f01 	tst.w	r3, #1
    278e:	d0e6      	beq.n	275e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2790:	4b05      	ldr	r3, [pc, #20]	; (27a8 <compare_int_unlock+0x4c>)
    2792:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2796:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    279a:	e7e0      	b.n	275e <compare_int_unlock+0x2>
    279c:	20000b50 	.word	0x20000b50
    27a0:	50015000 	.word	0x50015000
    27a4:	20000b4c 	.word	0x20000b4c
    27a8:	e000e100 	.word	0xe000e100

000027ac <sys_clock_timeout_handler>:
{
    27ac:	b538      	push	{r3, r4, r5, lr}
    27ae:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    27b0:	4610      	mov	r0, r2
    27b2:	4619      	mov	r1, r3
    27b4:	f004 fad3 	bl	6d5e <absolute_time_to_cc>
    27b8:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    27ba:	490d      	ldr	r1, [pc, #52]	; (27f0 <sys_clock_timeout_handler+0x44>)
    27bc:	680b      	ldr	r3, [r1, #0]
    27be:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
    27c0:	181b      	adds	r3, r3, r0
    27c2:	684c      	ldr	r4, [r1, #4]
    27c4:	f144 0400 	adc.w	r4, r4, #0
    27c8:	600b      	str	r3, [r1, #0]
    27ca:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    27cc:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    27d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    27d4:	d209      	bcs.n	27ea <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    27d6:	4b07      	ldr	r3, [pc, #28]	; (27f4 <sys_clock_timeout_handler+0x48>)
    27d8:	681b      	ldr	r3, [r3, #0]
    27da:	0a19      	lsrs	r1, r3, #8
    27dc:	061b      	lsls	r3, r3, #24
    27de:	18d4      	adds	r4, r2, r3
    27e0:	f141 0500 	adc.w	r5, r1, #0
    27e4:	4b04      	ldr	r3, [pc, #16]	; (27f8 <sys_clock_timeout_handler+0x4c>)
    27e6:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
    27ea:	f002 fce7 	bl	51bc <sys_clock_announce>
}
    27ee:	bd38      	pop	{r3, r4, r5, pc}
    27f0:	20000218 	.word	0x20000218
    27f4:	20000b54 	.word	0x20000b54
    27f8:	20000220 	.word	0x20000220

000027fc <z_nrf_rtc_timer_read>:
{
    27fc:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    27fe:	4b0d      	ldr	r3, [pc, #52]	; (2834 <z_nrf_rtc_timer_read+0x38>)
    2800:	681c      	ldr	r4, [r3, #0]
    2802:	0a25      	lsrs	r5, r4, #8
    2804:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2806:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    280a:	f7ff ff1d 	bl	2648 <counter>
    280e:	4603      	mov	r3, r0
	val += cntr;
    2810:	1900      	adds	r0, r0, r4
    2812:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    281a:	d20a      	bcs.n	2832 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    281c:	4b06      	ldr	r3, [pc, #24]	; (2838 <z_nrf_rtc_timer_read+0x3c>)
    281e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2822:	4290      	cmp	r0, r2
    2824:	eb71 0303 	sbcs.w	r3, r1, r3
    2828:	d203      	bcs.n	2832 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    282a:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    282e:	f141 0100 	adc.w	r1, r1, #0
}
    2832:	bd38      	pop	{r3, r4, r5, pc}
    2834:	20000b54 	.word	0x20000b54
    2838:	20000220 	.word	0x20000220

0000283c <compare_set_nolocks>:
{
    283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    283e:	4606      	mov	r6, r0
    2840:	4614      	mov	r4, r2
    2842:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    2844:	4610      	mov	r0, r2
    2846:	4619      	mov	r1, r3
    2848:	f004 fa89 	bl	6d5e <absolute_time_to_cc>
    284c:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    284e:	f7ff ffd5 	bl	27fc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2852:	42a0      	cmp	r0, r4
    2854:	eb71 0305 	sbcs.w	r3, r1, r5
    2858:	d215      	bcs.n	2886 <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    285a:	1a20      	subs	r0, r4, r0
    285c:	eb65 0101 	sbc.w	r1, r5, r1
    2860:	4b15      	ldr	r3, [pc, #84]	; (28b8 <compare_set_nolocks+0x7c>)
    2862:	4298      	cmp	r0, r3
    2864:	f171 0100 	sbcs.w	r1, r1, #0
    2868:	d223      	bcs.n	28b2 <compare_set_nolocks+0x76>
		if (target_time != cc_data[chan].target_time) {
    286a:	4b14      	ldr	r3, [pc, #80]	; (28bc <compare_set_nolocks+0x80>)
    286c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2870:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2874:	42ab      	cmp	r3, r5
    2876:	bf08      	it	eq
    2878:	42a2      	cmpeq	r2, r4
    287a:	d00e      	beq.n	289a <compare_set_nolocks+0x5e>
			set_alarm(chan, cc_value);
    287c:	4639      	mov	r1, r7
    287e:	4630      	mov	r0, r6
    2880:	f7ff fee8 	bl	2654 <set_alarm>
    2884:	e009      	b.n	289a <compare_set_nolocks+0x5e>
		atomic_or(&force_isr_mask, BIT(chan));
    2886:	2301      	movs	r3, #1
    2888:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    288a:	4a0d      	ldr	r2, [pc, #52]	; (28c0 <compare_set_nolocks+0x84>)
    288c:	e8d2 0fef 	ldaex	r0, [r2]
    2890:	4318      	orrs	r0, r3
    2892:	e8c2 0fe1 	stlex	r1, r0, [r2]
    2896:	2900      	cmp	r1, #0
    2898:	d1f8      	bne.n	288c <compare_set_nolocks+0x50>
	cc_data[chan].target_time = target_time;
    289a:	4b08      	ldr	r3, [pc, #32]	; (28bc <compare_set_nolocks+0x80>)
    289c:	0132      	lsls	r2, r6, #4
    289e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    28a2:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    28a6:	9906      	ldr	r1, [sp, #24]
    28a8:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    28aa:	9b07      	ldr	r3, [sp, #28]
    28ac:	6073      	str	r3, [r6, #4]
	return ret;
    28ae:	2000      	movs	r0, #0
}
    28b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    28b2:	f06f 0015 	mvn.w	r0, #21
    28b6:	e7fb      	b.n	28b0 <compare_set_nolocks+0x74>
    28b8:	00800001 	.word	0x00800001
    28bc:	20000208 	.word	0x20000208
    28c0:	20000b4c 	.word	0x20000b4c

000028c4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    28c4:	b530      	push	{r4, r5, lr}
    28c6:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    28c8:	2300      	movs	r3, #0
    28ca:	4a1d      	ldr	r2, [pc, #116]	; (2940 <sys_clock_driver_init+0x7c>)
    28cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    28d0:	2b00      	cmp	r3, #0
    28d2:	dd24      	ble.n	291e <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    28d4:	4c1a      	ldr	r4, [pc, #104]	; (2940 <sys_clock_driver_init+0x7c>)
    28d6:	2502      	movs	r5, #2
    28d8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28dc:	4b19      	ldr	r3, [pc, #100]	; (2944 <sys_clock_driver_init+0x80>)
    28de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    28e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    28e6:	2200      	movs	r2, #0
    28e8:	2101      	movs	r1, #1
    28ea:	2015      	movs	r0, #21
    28ec:	f003 fc01 	bl	60f2 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    28f0:	2015      	movs	r0, #21
    28f2:	f003 fbf9 	bl	60e8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    28f6:	2301      	movs	r3, #1
    28f8:	60a3      	str	r3, [r4, #8]
    28fa:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    28fc:	4a12      	ldr	r2, [pc, #72]	; (2948 <sys_clock_driver_init+0x84>)
    28fe:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2900:	2400      	movs	r4, #0
    2902:	9401      	str	r4, [sp, #4]
    2904:	4b11      	ldr	r3, [pc, #68]	; (294c <sys_clock_driver_init+0x88>)
    2906:	9300      	str	r3, [sp, #0]
    2908:	4a11      	ldr	r2, [pc, #68]	; (2950 <sys_clock_driver_init+0x8c>)
    290a:	2300      	movs	r3, #0
    290c:	4620      	mov	r0, r4
    290e:	f004 fa37 	bl	6d80 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2912:	4628      	mov	r0, r5
    2914:	f7ff fc1a 	bl	214c <z_nrf_clock_control_lf_on>

	return 0;
}
    2918:	4620      	mov	r0, r4
    291a:	b003      	add	sp, #12
    291c:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    291e:	4a0d      	ldr	r2, [pc, #52]	; (2954 <sys_clock_driver_init+0x90>)
    2920:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2924:	f04f 30ff 	mov.w	r0, #4294967295
    2928:	f04f 31ff 	mov.w	r1, #4294967295
    292c:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2930:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2934:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    2936:	4902      	ldr	r1, [pc, #8]	; (2940 <sys_clock_driver_init+0x7c>)
    2938:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    293c:	3301      	adds	r3, #1
    293e:	e7c7      	b.n	28d0 <sys_clock_driver_init+0xc>
    2940:	50015000 	.word	0x50015000
    2944:	e000e100 	.word	0xe000e100
    2948:	20000b50 	.word	0x20000b50
    294c:	000027ad 	.word	0x000027ad
    2950:	007fffff 	.word	0x007fffff
    2954:	20000208 	.word	0x20000208

00002958 <process_channel>:
{
    2958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    295c:	b082      	sub	sp, #8
    295e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2960:	f7ff fed0 	bl	2704 <channel_processing_check_and_clear>
    2964:	b910      	cbnz	r0, 296c <process_channel+0x14>
}
    2966:	b002      	add	sp, #8
    2968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    296c:	f7ff ff46 	bl	27fc <z_nrf_rtc_timer_read>
    2970:	4682      	mov	sl, r0
    2972:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    2974:	f004 f9f6 	bl	6d64 <full_int_lock>
    2978:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    297a:	4b15      	ldr	r3, [pc, #84]	; (29d0 <process_channel+0x78>)
    297c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2980:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2984:	45c2      	cmp	sl, r8
    2986:	eb75 0509 	sbcs.w	r5, r5, r9
    298a:	d20b      	bcs.n	29a4 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    298c:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    298e:	4630      	mov	r0, r6
    2990:	f004 f9f1 	bl	6d76 <full_int_unlock>
		if (handler) {
    2994:	2d00      	cmp	r5, #0
    2996:	d0e6      	beq.n	2966 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2998:	9700      	str	r7, [sp, #0]
    299a:	4642      	mov	r2, r8
    299c:	464b      	mov	r3, r9
    299e:	4620      	mov	r0, r4
    29a0:	47a8      	blx	r5
}
    29a2:	e7e0      	b.n	2966 <process_channel+0xe>
			handler = cc_data[chan].callback;
    29a4:	4a0a      	ldr	r2, [pc, #40]	; (29d0 <process_channel+0x78>)
    29a6:	0123      	lsls	r3, r4, #4
    29a8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    29ac:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    29ae:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    29b0:	2000      	movs	r0, #0
    29b2:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    29b4:	f04f 32ff 	mov.w	r2, #4294967295
    29b8:	f04f 33ff 	mov.w	r3, #4294967295
    29bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    29c0:	4620      	mov	r0, r4
    29c2:	f7ff fe37 	bl	2634 <event_disable>
			event_clear(chan);
    29c6:	4620      	mov	r0, r4
    29c8:	f004 f9bd 	bl	6d46 <event_clear>
    29cc:	e7df      	b.n	298e <process_channel+0x36>
    29ce:	bf00      	nop
    29d0:	20000208 	.word	0x20000208

000029d4 <rtc_nrf_isr>:
{
    29d4:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    29d6:	4b0e      	ldr	r3, [pc, #56]	; (2a10 <rtc_nrf_isr+0x3c>)
    29d8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    29dc:	f013 0f02 	tst.w	r3, #2
    29e0:	d00d      	beq.n	29fe <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    29e2:	4b0b      	ldr	r3, [pc, #44]	; (2a10 <rtc_nrf_isr+0x3c>)
    29e4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    29e8:	b14b      	cbz	r3, 29fe <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    29ea:	4b09      	ldr	r3, [pc, #36]	; (2a10 <rtc_nrf_isr+0x3c>)
    29ec:	2200      	movs	r2, #0
    29ee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    29f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    29f6:	4a07      	ldr	r2, [pc, #28]	; (2a14 <rtc_nrf_isr+0x40>)
    29f8:	6813      	ldr	r3, [r2, #0]
    29fa:	3301      	adds	r3, #1
    29fc:	6013      	str	r3, [r2, #0]
{
    29fe:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2a00:	2c00      	cmp	r4, #0
    2a02:	dd00      	ble.n	2a06 <rtc_nrf_isr+0x32>
}
    2a04:	bd10      	pop	{r4, pc}
		process_channel(chan);
    2a06:	4620      	mov	r0, r4
    2a08:	f7ff ffa6 	bl	2958 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2a0c:	3401      	adds	r4, #1
    2a0e:	e7f7      	b.n	2a00 <rtc_nrf_isr+0x2c>
    2a10:	50015000 	.word	0x50015000
    2a14:	20000b54 	.word	0x20000b54

00002a18 <sys_clock_set_timeout>:
{
    2a18:	b510      	push	{r4, lr}
    2a1a:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
    2a1c:	f1b0 3fff 	cmp.w	r0, #4294967295
    2a20:	d006      	beq.n	2a30 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2a22:	2801      	cmp	r0, #1
    2a24:	dd09      	ble.n	2a3a <sys_clock_set_timeout+0x22>
    2a26:	4b15      	ldr	r3, [pc, #84]	; (2a7c <sys_clock_set_timeout+0x64>)
    2a28:	4298      	cmp	r0, r3
    2a2a:	dc24      	bgt.n	2a76 <sys_clock_set_timeout+0x5e>
    2a2c:	4604      	mov	r4, r0
    2a2e:	e005      	b.n	2a3c <sys_clock_set_timeout+0x24>
		sys_busy = false;
    2a30:	4b13      	ldr	r3, [pc, #76]	; (2a80 <sys_clock_set_timeout+0x68>)
    2a32:	2200      	movs	r2, #0
    2a34:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
    2a36:	4c13      	ldr	r4, [pc, #76]	; (2a84 <sys_clock_set_timeout+0x6c>)
    2a38:	e003      	b.n	2a42 <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2a3a:	2401      	movs	r4, #1
		sys_busy = true;
    2a3c:	4b10      	ldr	r3, [pc, #64]	; (2a80 <sys_clock_set_timeout+0x68>)
    2a3e:	2201      	movs	r2, #1
    2a40:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2a42:	f7ff fedb 	bl	27fc <z_nrf_rtc_timer_read>
    2a46:	4b10      	ldr	r3, [pc, #64]	; (2a88 <sys_clock_set_timeout+0x70>)
    2a48:	681a      	ldr	r2, [r3, #0]
    2a4a:	685b      	ldr	r3, [r3, #4]
    2a4c:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    2a4e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2a52:	d300      	bcc.n	2a56 <sys_clock_set_timeout+0x3e>
		cyc = 0;
    2a54:	2400      	movs	r4, #0
	cyc += unannounced;
    2a56:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    2a58:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    2a5c:	d300      	bcc.n	2a60 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
    2a5e:	4c09      	ldr	r4, [pc, #36]	; (2a84 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
    2a60:	2000      	movs	r0, #0
    2a62:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2a64:	9001      	str	r0, [sp, #4]
    2a66:	4909      	ldr	r1, [pc, #36]	; (2a8c <sys_clock_set_timeout+0x74>)
    2a68:	9100      	str	r1, [sp, #0]
    2a6a:	f143 0300 	adc.w	r3, r3, #0
    2a6e:	f004 f987 	bl	6d80 <compare_set>
}
    2a72:	b002      	add	sp, #8
    2a74:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2a76:	4c03      	ldr	r4, [pc, #12]	; (2a84 <sys_clock_set_timeout+0x6c>)
    2a78:	e7e0      	b.n	2a3c <sys_clock_set_timeout+0x24>
    2a7a:	bf00      	nop
    2a7c:	007ffffe 	.word	0x007ffffe
    2a80:	20000dbd 	.word	0x20000dbd
    2a84:	007fffff 	.word	0x007fffff
    2a88:	20000218 	.word	0x20000218
    2a8c:	000027ad 	.word	0x000027ad

00002a90 <sys_clock_elapsed>:
{
    2a90:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2a92:	f7ff feb3 	bl	27fc <z_nrf_rtc_timer_read>
    2a96:	4b02      	ldr	r3, [pc, #8]	; (2aa0 <sys_clock_elapsed+0x10>)
    2a98:	681b      	ldr	r3, [r3, #0]
}
    2a9a:	1ac0      	subs	r0, r0, r3
    2a9c:	bd08      	pop	{r3, pc}
    2a9e:	bf00      	nop
    2aa0:	20000218 	.word	0x20000218

00002aa4 <nrf_gpio_cfg>:
{
    2aa4:	b430      	push	{r4, r5}
    *p_pin = pin_number & 0x1F;
    2aa6:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    2aaa:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2aac:	2801      	cmp	r0, #1
    2aae:	d018      	beq.n	2ae2 <nrf_gpio_cfg+0x3e>
        case 0: return NRF_P0;
    2ab0:	4d0d      	ldr	r5, [pc, #52]	; (2ae8 <nrf_gpio_cfg+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2ab2:	f10c 0080 	add.w	r0, ip, #128	; 0x80
    2ab6:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
    2aba:	f004 4ce0 	and.w	ip, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2abe:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    2ac2:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2ac6:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2aca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    2ace:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2ad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2ad6:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
    2ada:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
    2ade:	bc30      	pop	{r4, r5}
    2ae0:	4770      	bx	lr
        case 1: return NRF_P1;
    2ae2:	4d02      	ldr	r5, [pc, #8]	; (2aec <nrf_gpio_cfg+0x48>)
    2ae4:	e7e5      	b.n	2ab2 <nrf_gpio_cfg+0xe>
    2ae6:	bf00      	nop
    2ae8:	50842500 	.word	0x50842500
    2aec:	50842800 	.word	0x50842800

00002af0 <nrf_gpio_pin_write>:
    if (value == 0)
    2af0:	b959      	cbnz	r1, 2b0a <nrf_gpio_pin_write+0x1a>
    *p_pin = pin_number & 0x1F;
    2af2:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2af6:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2af8:	2801      	cmp	r0, #1
    2afa:	d004      	beq.n	2b06 <nrf_gpio_pin_write+0x16>
        case 0: return NRF_P0;
    2afc:	4a09      	ldr	r2, [pc, #36]	; (2b24 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2afe:	2301      	movs	r3, #1
    2b00:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    2b02:	60d3      	str	r3, [r2, #12]
}
    2b04:	4770      	bx	lr
        case 1: return NRF_P1;
    2b06:	4a08      	ldr	r2, [pc, #32]	; (2b28 <nrf_gpio_pin_write+0x38>)
    2b08:	e7f9      	b.n	2afe <nrf_gpio_pin_write+0xe>
    *p_pin = pin_number & 0x1F;
    2b0a:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2b0e:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2b10:	2801      	cmp	r0, #1
    2b12:	d004      	beq.n	2b1e <nrf_gpio_pin_write+0x2e>
        case 0: return NRF_P0;
    2b14:	4a03      	ldr	r2, [pc, #12]	; (2b24 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2b16:	2301      	movs	r3, #1
    2b18:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2b1a:	6093      	str	r3, [r2, #8]
}
    2b1c:	4770      	bx	lr
        case 1: return NRF_P1;
    2b1e:	4a02      	ldr	r2, [pc, #8]	; (2b28 <nrf_gpio_pin_write+0x38>)
    2b20:	e7f9      	b.n	2b16 <nrf_gpio_pin_write+0x26>
    2b22:	bf00      	nop
    2b24:	50842500 	.word	0x50842500
    2b28:	50842800 	.word	0x50842800

00002b2c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    2b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b30:	b085      	sub	sp, #20
    2b32:	4607      	mov	r7, r0
    2b34:	468b      	mov	fp, r1
    2b36:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2b38:	2400      	movs	r4, #0
    2b3a:	e022      	b.n	2b82 <pinctrl_configure_pins+0x56>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    2b3c:	f04f 35ff 	mov.w	r5, #4294967295
    2b40:	e02c      	b.n	2b9c <pinctrl_configure_pins+0x70>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    2b42:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2b46:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2b48:	9603      	str	r6, [sp, #12]
			write = 1U;
    2b4a:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    2b4c:	2d7f      	cmp	r5, #127	; 0x7f
    2b4e:	d016      	beq.n	2b7e <pinctrl_configure_pins+0x52>
			if (write != NO_WRITE) {
    2b50:	f1b1 3fff 	cmp.w	r1, #4294967295
    2b54:	f040 810e 	bne.w	2d74 <pinctrl_configure_pins+0x248>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    2b58:	f857 300a 	ldr.w	r3, [r7, sl]
    2b5c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2b60:	d002      	beq.n	2b68 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2b62:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    2b64:	2200      	movs	r2, #0
    2b66:	9203      	str	r2, [sp, #12]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2b68:	2200      	movs	r2, #0
    2b6a:	9201      	str	r2, [sp, #4]
    2b6c:	f8cd 9000 	str.w	r9, [sp]
    2b70:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    2b74:	4632      	mov	r2, r6
    2b76:	9903      	ldr	r1, [sp, #12]
    2b78:	4628      	mov	r0, r5
    2b7a:	f7ff ff93 	bl	2aa4 <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2b7e:	3401      	adds	r4, #1
    2b80:	b2e4      	uxtb	r4, r4
    2b82:	455c      	cmp	r4, fp
    2b84:	f080 80fa 	bcs.w	2d7c <pinctrl_configure_pins+0x250>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2b88:	ea4f 0a84 	mov.w	sl, r4, lsl #2
    2b8c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    2b90:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2b94:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    2b98:	2d7f      	cmp	r5, #127	; 0x7f
    2b9a:	d0cf      	beq.n	2b3c <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    2b9c:	0c1b      	lsrs	r3, r3, #16
    2b9e:	2b22      	cmp	r3, #34	; 0x22
    2ba0:	f200 80ee 	bhi.w	2d80 <pinctrl_configure_pins+0x254>
    2ba4:	a201      	add	r2, pc, #4	; (adr r2, 2bac <pinctrl_configure_pins+0x80>)
    2ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2baa:	bf00      	nop
    2bac:	00002b43 	.word	0x00002b43
    2bb0:	00002c39 	.word	0x00002c39
    2bb4:	00002c47 	.word	0x00002c47
    2bb8:	00002c53 	.word	0x00002c53
    2bbc:	00002c61 	.word	0x00002c61
    2bc0:	00002c6f 	.word	0x00002c6f
    2bc4:	00002c7b 	.word	0x00002c7b
    2bc8:	00002d81 	.word	0x00002d81
    2bcc:	00002d81 	.word	0x00002d81
    2bd0:	00002d81 	.word	0x00002d81
    2bd4:	00002d81 	.word	0x00002d81
    2bd8:	00002c89 	.word	0x00002c89
    2bdc:	00002c9d 	.word	0x00002c9d
    2be0:	00002d81 	.word	0x00002d81
    2be4:	00002d81 	.word	0x00002d81
    2be8:	00002d81 	.word	0x00002d81
    2bec:	00002d81 	.word	0x00002d81
    2bf0:	00002d81 	.word	0x00002d81
    2bf4:	00002d81 	.word	0x00002d81
    2bf8:	00002d81 	.word	0x00002d81
    2bfc:	00002d81 	.word	0x00002d81
    2c00:	00002d81 	.word	0x00002d81
    2c04:	00002cb1 	.word	0x00002cb1
    2c08:	00002cc3 	.word	0x00002cc3
    2c0c:	00002cd5 	.word	0x00002cd5
    2c10:	00002ce7 	.word	0x00002ce7
    2c14:	00002d81 	.word	0x00002d81
    2c18:	00002d81 	.word	0x00002d81
    2c1c:	00002d81 	.word	0x00002d81
    2c20:	00002cf9 	.word	0x00002cf9
    2c24:	00002d09 	.word	0x00002d09
    2c28:	00002d15 	.word	0x00002d15
    2c2c:	00002d25 	.word	0x00002d25
    2c30:	00002d35 	.word	0x00002d35
    2c34:	00002d45 	.word	0x00002d45
			NRF_PSEL_UART(reg, RXD) = pin;
    2c38:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2c3c:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2c3e:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2c40:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2c44:	e782      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
    2c46:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2c4a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2c4c:	9603      	str	r6, [sp, #12]
			write = 1U;
    2c4e:	4631      	mov	r1, r6
			break;
    2c50:	e77c      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
    2c52:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2c56:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2c58:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2c5a:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2c5e:	e775      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    2c60:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2c64:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2c66:	2301      	movs	r3, #1
    2c68:	9303      	str	r3, [sp, #12]
			write = 0U;
    2c6a:	4631      	mov	r1, r6
			break;
    2c6c:	e76e      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    2c6e:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2c72:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2c74:	9603      	str	r6, [sp, #12]
			write = 0U;
    2c76:	2100      	movs	r1, #0
			break;
    2c78:	e768      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    2c7a:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2c7e:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2c80:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2c82:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2c86:	e761      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    2c88:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2c8c:	f1b9 0f00 	cmp.w	r9, #0
    2c90:	d060      	beq.n	2d54 <pinctrl_configure_pins+0x228>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2c92:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2c94:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2c96:	f04f 31ff 	mov.w	r1, #4294967295
    2c9a:	e757      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    2c9c:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2ca0:	f1b9 0f00 	cmp.w	r9, #0
    2ca4:	d05e      	beq.n	2d64 <pinctrl_configure_pins+0x238>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2ca6:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2ca8:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2caa:	f04f 31ff 	mov.w	r1, #4294967295
    2cae:	e74d      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    2cb0:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    2cb4:	f857 100a 	ldr.w	r1, [r7, sl]
    2cb8:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2cbc:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2cbe:	9603      	str	r6, [sp, #12]
			break;
    2cc0:	e744      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    2cc2:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2cc6:	f857 100a 	ldr.w	r1, [r7, sl]
    2cca:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2cce:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2cd0:	9603      	str	r6, [sp, #12]
			break;
    2cd2:	e73b      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    2cd4:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2cd8:	f857 100a 	ldr.w	r1, [r7, sl]
    2cdc:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2ce0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2ce2:	9603      	str	r6, [sp, #12]
			break;
    2ce4:	e732      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2ce6:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    2cea:	f857 100a 	ldr.w	r1, [r7, sl]
    2cee:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2cf2:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2cf4:	9603      	str	r6, [sp, #12]
			break;
    2cf6:	e729      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    2cf8:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2cfc:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2cfe:	2300      	movs	r3, #0
    2d00:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2d02:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2d06:	e721      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    2d08:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d0c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2d0e:	9603      	str	r6, [sp, #12]
			write = 1U;
    2d10:	4631      	mov	r1, r6
			break;
    2d12:	e71b      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    2d14:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d18:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d1a:	2300      	movs	r3, #0
    2d1c:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2d1e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2d22:	e713      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    2d24:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d28:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d2a:	2300      	movs	r3, #0
    2d2c:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2d2e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2d32:	e70b      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    2d34:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d38:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d3a:	2300      	movs	r3, #0
    2d3c:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2d3e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2d42:	e703      	b.n	2b4c <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    2d44:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d48:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d4a:	2300      	movs	r3, #0
    2d4c:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2d4e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2d52:	e6fb      	b.n	2b4c <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2d54:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d56:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    2d5a:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    2d5e:	f04f 0906 	mov.w	r9, #6
    2d62:	e6f3      	b.n	2b4c <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2d64:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d66:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    2d6a:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    2d6e:	f04f 0906 	mov.w	r9, #6
    2d72:	e6eb      	b.n	2b4c <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
    2d74:	4628      	mov	r0, r5
    2d76:	f7ff febb 	bl	2af0 <nrf_gpio_pin_write>
    2d7a:	e6ed      	b.n	2b58 <pinctrl_configure_pins+0x2c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    2d7c:	2000      	movs	r0, #0
    2d7e:	e001      	b.n	2d84 <pinctrl_configure_pins+0x258>
		switch (NRF_GET_FUN(pins[i])) {
    2d80:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2d84:	b005      	add	sp, #20
    2d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d8a:	bf00      	nop

00002d8c <callback_ctrl>:
static struct k_spinlock lock;
static sys_slist_t button_handlers;
static struct k_mutex button_handler_mut;

static int callback_ctrl(bool enable)
{
    2d8c:	b538      	push	{r3, r4, r5, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
    2d8e:	b120      	cbz	r0, 2d9a <callback_ctrl+0xe>
    2d90:	f04f 6598 	mov.w	r5, #79691776	; 0x4c00000
	int err = 0;

	/* This must be done with irqs disabled to avoid pin callback
	 * being fired before others are still not activated.
	 */
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
    2d94:	2400      	movs	r4, #0
	int err = 0;
    2d96:	4620      	mov	r0, r4
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
    2d98:	e00c      	b.n	2db4 <callback_ctrl+0x28>
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
    2d9a:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
    2d9e:	e7f9      	b.n	2d94 <callback_ctrl+0x8>
 * @return a value from gpio_pin_interrupt_configure()
 */
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
						  gpio_flags_t flags)
{
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    2da0:	4b07      	ldr	r3, [pc, #28]	; (2dc0 <callback_ctrl+0x34>)
    2da2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
    2da6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    2daa:	7919      	ldrb	r1, [r3, #4]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    2dac:	462a      	mov	r2, r5
    2dae:	f004 f81d 	bl	6dec <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
    2db2:	3401      	adds	r4, #1
    2db4:	2c03      	cmp	r4, #3
    2db6:	d801      	bhi.n	2dbc <callback_ctrl+0x30>
    2db8:	2800      	cmp	r0, #0
    2dba:	d0f1      	beq.n	2da0 <callback_ctrl+0x14>
		err = gpio_pin_interrupt_configure_dt(&buttons[i], flags);
	}

	return err;
}
    2dbc:	bd38      	pop	{r3, r4, r5, pc}
    2dbe:	bf00      	nop
    2dc0:	00008280 	.word	0x00008280

00002dc4 <get_buttons>:

static uint32_t get_buttons(void)
{
    2dc4:	b538      	push	{r3, r4, r5, lr}
	uint32_t ret = 0;
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    2dc6:	2400      	movs	r4, #0
	uint32_t ret = 0;
    2dc8:	4625      	mov	r5, r4
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    2dca:	e000      	b.n	2dce <get_buttons+0xa>
    2dcc:	3401      	adds	r4, #1
    2dce:	2c03      	cmp	r4, #3
    2dd0:	d810      	bhi.n	2df4 <get_buttons+0x30>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
    2dd2:	4b09      	ldr	r3, [pc, #36]	; (2df8 <get_buttons+0x34>)
    2dd4:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    2dd8:	7911      	ldrb	r1, [r2, #4]
    2dda:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
    2dde:	f004 f858 	bl	6e92 <gpio_pin_get>
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
    2de2:	2800      	cmp	r0, #0
    2de4:	db05      	blt.n	2df2 <get_buttons+0x2e>
			LOG_ERR("Cannot read gpio pin");
			return 0;
		}
		if (val) {
    2de6:	2800      	cmp	r0, #0
    2de8:	d0f0      	beq.n	2dcc <get_buttons+0x8>
			ret |= 1U << i;
    2dea:	2301      	movs	r3, #1
    2dec:	40a3      	lsls	r3, r4
    2dee:	431d      	orrs	r5, r3
    2df0:	e7ec      	b.n	2dcc <get_buttons+0x8>
			return 0;
    2df2:	2500      	movs	r5, #0
		}
	}

	return ret;
}
    2df4:	4628      	mov	r0, r5
    2df6:	bd38      	pop	{r3, r4, r5, pc}
    2df8:	00008280 	.word	0x00008280

00002dfc <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
    2dfc:	b510      	push	{r4, lr}
	__asm__ volatile(
    2dfe:	f04f 0320 	mov.w	r3, #32
    2e02:	f3ef 8411 	mrs	r4, BASEPRI
    2e06:	f383 8812 	msr	BASEPRI_MAX, r3
    2e0a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); // 自旋锁，上锁
	/***********临界区开始***********/

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
    2e0e:	2000      	movs	r0, #0
    2e10:	f7ff ffbc 	bl	2d8c <callback_ctrl>

	if (err) {
		LOG_ERR("Cannot disable callbacks");
	}

	switch (state) {
    2e14:	4b08      	ldr	r3, [pc, #32]	; (2e38 <button_pressed+0x3c>)
    2e16:	781b      	ldrb	r3, [r3, #0]
    2e18:	b123      	cbz	r3, 2e24 <button_pressed+0x28>
	__asm__ volatile(
    2e1a:	f384 8811 	msr	BASEPRI, r4
    2e1e:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}
	/**********临界区结束***********/
	k_spin_unlock(&lock, key); // 自旋锁，开锁
}
    2e22:	bd10      	pop	{r4, pc}
		state = STATE_SCANNING;
    2e24:	4b04      	ldr	r3, [pc, #16]	; (2e38 <button_pressed+0x3c>)
    2e26:	2201      	movs	r2, #1
    2e28:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
    2e2a:	2221      	movs	r2, #33	; 0x21
    2e2c:	2300      	movs	r3, #0
    2e2e:	4803      	ldr	r0, [pc, #12]	; (2e3c <button_pressed+0x40>)
    2e30:	f001 fcd0 	bl	47d4 <k_work_reschedule>
		break;
    2e34:	e7f1      	b.n	2e1a <button_pressed+0x1e>
    2e36:	bf00      	nop
    2e38:	20000dbe 	.word	0x20000dbe
    2e3c:	20000228 	.word	0x20000228

00002e40 <button_handlers_call>:
{
    2e40:	b570      	push	{r4, r5, r6, lr}
    2e42:	4605      	mov	r5, r0
    2e44:	460e      	mov	r6, r1
	if (button_handler_cb != NULL) {
    2e46:	4b0f      	ldr	r3, [pc, #60]	; (2e84 <button_handlers_call+0x44>)
    2e48:	681b      	ldr	r3, [r3, #0]
    2e4a:	b103      	cbz	r3, 2e4e <button_handlers_call+0xe>
		button_handler_cb(button_state, has_changed);
    2e4c:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
    2e4e:	f04f 32ff 	mov.w	r2, #4294967295
    2e52:	f04f 33ff 	mov.w	r3, #4294967295
    2e56:	480c      	ldr	r0, [pc, #48]	; (2e88 <button_handlers_call+0x48>)
    2e58:	f001 fa68 	bl	432c <z_impl_k_mutex_lock>
	return list->head;
    2e5c:	4b0b      	ldr	r3, [pc, #44]	; (2e8c <button_handlers_call+0x4c>)
    2e5e:	681c      	ldr	r4, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    2e60:	b114      	cbz	r4, 2e68 <button_handlers_call+0x28>
    2e62:	3c04      	subs	r4, #4
    2e64:	e000      	b.n	2e68 <button_handlers_call+0x28>
    2e66:	3c04      	subs	r4, #4
    2e68:	b13c      	cbz	r4, 2e7a <button_handlers_call+0x3a>
			handler->cb(button_state, has_changed);
    2e6a:	6823      	ldr	r3, [r4, #0]
    2e6c:	4631      	mov	r1, r6
    2e6e:	4628      	mov	r0, r5
    2e70:	4798      	blx	r3
	return node->next;
    2e72:	6864      	ldr	r4, [r4, #4]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    2e74:	2c00      	cmp	r4, #0
    2e76:	d1f6      	bne.n	2e66 <button_handlers_call+0x26>
    2e78:	e7f6      	b.n	2e68 <button_handlers_call+0x28>
	return z_impl_k_mutex_unlock(mutex);
    2e7a:	4803      	ldr	r0, [pc, #12]	; (2e88 <button_handlers_call+0x48>)
    2e7c:	f001 fada 	bl	4434 <z_impl_k_mutex_unlock>
}
    2e80:	bd70      	pop	{r4, r5, r6, pc}
    2e82:	bf00      	nop
    2e84:	20000b8c 	.word	0x20000b8c
    2e88:	20000b60 	.word	0x20000b60
    2e8c:	20000b74 	.word	0x20000b74

00002e90 <buttons_scan_fn>:
{
    2e90:	b510      	push	{r4, lr}
	button_scan = get_buttons();
    2e92:	f7ff ff97 	bl	2dc4 <get_buttons>
    2e96:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2e98:	4b1b      	ldr	r3, [pc, #108]	; (2f08 <buttons_scan_fn+0x78>)
    2e9a:	e8d3 2fef 	ldaex	r2, [r3]
    2e9e:	e8c3 4fe1 	stlex	r1, r4, [r3]
    2ea2:	2900      	cmp	r1, #0
    2ea4:	d1f9      	bne.n	2e9a <buttons_scan_fn+0xa>
	if (!initial_run) {
    2ea6:	4b19      	ldr	r3, [pc, #100]	; (2f0c <buttons_scan_fn+0x7c>)
    2ea8:	781b      	ldrb	r3, [r3, #0]
    2eaa:	b943      	cbnz	r3, 2ebe <buttons_scan_fn+0x2e>
		if (button_scan != last_button_scan) {
    2eac:	4b18      	ldr	r3, [pc, #96]	; (2f10 <buttons_scan_fn+0x80>)
    2eae:	6819      	ldr	r1, [r3, #0]
    2eb0:	42a1      	cmp	r1, r4
    2eb2:	d007      	beq.n	2ec4 <buttons_scan_fn+0x34>
			button_handlers_call(button_scan, has_changed);
    2eb4:	4061      	eors	r1, r4
    2eb6:	4620      	mov	r0, r4
    2eb8:	f7ff ffc2 	bl	2e40 <button_handlers_call>
    2ebc:	e002      	b.n	2ec4 <buttons_scan_fn+0x34>
		initial_run = false;
    2ebe:	4b13      	ldr	r3, [pc, #76]	; (2f0c <buttons_scan_fn+0x7c>)
    2ec0:	2200      	movs	r2, #0
    2ec2:	701a      	strb	r2, [r3, #0]
	last_button_scan = button_scan;
    2ec4:	4b12      	ldr	r3, [pc, #72]	; (2f10 <buttons_scan_fn+0x80>)
    2ec6:	601c      	str	r4, [r3, #0]
	if (button_scan != 0) {
    2ec8:	b984      	cbnz	r4, 2eec <buttons_scan_fn+0x5c>
	__asm__ volatile(
    2eca:	f04f 0320 	mov.w	r3, #32
    2ece:	f3ef 8411 	mrs	r4, BASEPRI
    2ed2:	f383 8812 	msr	BASEPRI_MAX, r3
    2ed6:	f3bf 8f6f 	isb	sy
		switch (state) {
    2eda:	4b0e      	ldr	r3, [pc, #56]	; (2f14 <buttons_scan_fn+0x84>)
    2edc:	781b      	ldrb	r3, [r3, #0]
    2ede:	2b01      	cmp	r3, #1
    2ee0:	d00b      	beq.n	2efa <buttons_scan_fn+0x6a>
	__asm__ volatile(
    2ee2:	f384 8811 	msr	BASEPRI, r4
    2ee6:	f3bf 8f6f 	isb	sy
}
    2eea:	bd10      	pop	{r4, pc}
		k_work_reschedule(&buttons_scan,
    2eec:	f44f 72a4 	mov.w	r2, #328	; 0x148
    2ef0:	2300      	movs	r3, #0
    2ef2:	4809      	ldr	r0, [pc, #36]	; (2f18 <buttons_scan_fn+0x88>)
    2ef4:	f001 fc6e 	bl	47d4 <k_work_reschedule>
    2ef8:	e7f7      	b.n	2eea <buttons_scan_fn+0x5a>
			state = STATE_WAITING;
    2efa:	4b06      	ldr	r3, [pc, #24]	; (2f14 <buttons_scan_fn+0x84>)
    2efc:	2200      	movs	r2, #0
    2efe:	701a      	strb	r2, [r3, #0]
			err = callback_ctrl(true);
    2f00:	2001      	movs	r0, #1
    2f02:	f7ff ff43 	bl	2d8c <callback_ctrl>
			break;
    2f06:	e7ec      	b.n	2ee2 <buttons_scan_fn+0x52>
    2f08:	20000b88 	.word	0x20000b88
    2f0c:	20000180 	.word	0x20000180
    2f10:	20000b5c 	.word	0x20000b5c
    2f14:	20000dbe 	.word	0x20000dbe
    2f18:	20000228 	.word	0x20000228

00002f1c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2f1c:	4b06      	ldr	r3, [pc, #24]	; (2f38 <dk_read_buttons+0x1c>)
    2f1e:	e8d3 3faf 	lda	r3, [r3]
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
    2f22:	b100      	cbz	r0, 2f26 <dk_read_buttons+0xa>
		*button_state = current_state;
    2f24:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
    2f26:	b119      	cbz	r1, 2f30 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
    2f28:	4a04      	ldr	r2, [pc, #16]	; (2f3c <dk_read_buttons+0x20>)
    2f2a:	6812      	ldr	r2, [r2, #0]
    2f2c:	405a      	eors	r2, r3
    2f2e:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
    2f30:	4a02      	ldr	r2, [pc, #8]	; (2f3c <dk_read_buttons+0x20>)
    2f32:	6013      	str	r3, [r2, #0]
}
    2f34:	4770      	bx	lr
    2f36:	bf00      	nop
    2f38:	20000b88 	.word	0x20000b88
    2f3c:	20000b58 	.word	0x20000b58

00002f40 <dk_buttons_init>:
{
    2f40:	b538      	push	{r3, r4, r5, lr}
	button_handler_cb = button_handler;
    2f42:	4b33      	ldr	r3, [pc, #204]	; (3010 <dk_buttons_init+0xd0>)
    2f44:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
    2f46:	4833      	ldr	r0, [pc, #204]	; (3014 <dk_buttons_init+0xd4>)
    2f48:	f004 fb2e 	bl	75a8 <z_impl_k_mutex_init>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    2f4c:	2400      	movs	r4, #0
    2f4e:	e00b      	b.n	2f68 <dk_buttons_init+0x28>
			GPIO_PULL_UP : GPIO_PULL_DOWN;
    2f50:	2120      	movs	r1, #32
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
    2f52:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    2f56:	4830      	ldr	r0, [pc, #192]	; (3018 <dk_buttons_init+0xd8>)
    2f58:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    2f5c:	f003 ff82 	bl	6e64 <gpio_pin_configure_dt>
		if (err) {
    2f60:	4603      	mov	r3, r0
    2f62:	2800      	cmp	r0, #0
    2f64:	d152      	bne.n	300c <dk_buttons_init+0xcc>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    2f66:	3401      	adds	r4, #1
    2f68:	2c03      	cmp	r4, #3
    2f6a:	d808      	bhi.n	2f7e <dk_buttons_init+0x3e>
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
    2f6c:	4b2a      	ldr	r3, [pc, #168]	; (3018 <dk_buttons_init+0xd8>)
    2f6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    2f72:	88db      	ldrh	r3, [r3, #6]
			GPIO_PULL_UP : GPIO_PULL_DOWN;
    2f74:	f013 0f01 	tst.w	r3, #1
    2f78:	d0ea      	beq.n	2f50 <dk_buttons_init+0x10>
    2f7a:	2110      	movs	r1, #16
    2f7c:	e7e9      	b.n	2f52 <dk_buttons_init+0x12>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    2f7e:	2400      	movs	r4, #0
	uint32_t pin_mask = 0;
    2f80:	4625      	mov	r5, r4
    2f82:	e007      	b.n	2f94 <dk_buttons_init+0x54>
		pin_mask |= BIT(buttons[i].pin);
    2f84:	4b24      	ldr	r3, [pc, #144]	; (3018 <dk_buttons_init+0xd8>)
    2f86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    2f8a:	791a      	ldrb	r2, [r3, #4]
    2f8c:	2301      	movs	r3, #1
    2f8e:	4093      	lsls	r3, r2
    2f90:	431d      	orrs	r5, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    2f92:	3401      	adds	r4, #1
    2f94:	2c03      	cmp	r4, #3
    2f96:	d80d      	bhi.n	2fb4 <dk_buttons_init+0x74>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    2f98:	4b1f      	ldr	r3, [pc, #124]	; (3018 <dk_buttons_init+0xd8>)
    2f9a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
    2f9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    2fa2:	7919      	ldrb	r1, [r3, #4]
    2fa4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2fa8:	f003 ff20 	bl	6dec <z_impl_gpio_pin_interrupt_configure>
		if (err) {
    2fac:	4603      	mov	r3, r0
    2fae:	2800      	cmp	r0, #0
    2fb0:	d0e8      	beq.n	2f84 <dk_buttons_init+0x44>
    2fb2:	e02b      	b.n	300c <dk_buttons_init+0xcc>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    2fb4:	4b19      	ldr	r3, [pc, #100]	; (301c <dk_buttons_init+0xdc>)
    2fb6:	4a1a      	ldr	r2, [pc, #104]	; (3020 <dk_buttons_init+0xe0>)
    2fb8:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
    2fba:	609d      	str	r5, [r3, #8]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    2fbc:	2400      	movs	r4, #0
    2fbe:	2c03      	cmp	r4, #3
    2fc0:	d809      	bhi.n	2fd6 <dk_buttons_init+0x96>
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
    2fc2:	4916      	ldr	r1, [pc, #88]	; (301c <dk_buttons_init+0xdc>)
    2fc4:	4b14      	ldr	r3, [pc, #80]	; (3018 <dk_buttons_init+0xd8>)
    2fc6:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
    2fca:	f003 ff8f 	bl	6eec <gpio_add_callback>
		if (err) {
    2fce:	4603      	mov	r3, r0
    2fd0:	b9e0      	cbnz	r0, 300c <dk_buttons_init+0xcc>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    2fd2:	3401      	adds	r4, #1
    2fd4:	e7f3      	b.n	2fbe <dk_buttons_init+0x7e>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
    2fd6:	4c13      	ldr	r4, [pc, #76]	; (3024 <dk_buttons_init+0xe4>)
    2fd8:	4913      	ldr	r1, [pc, #76]	; (3028 <dk_buttons_init+0xe8>)
    2fda:	4620      	mov	r0, r4
    2fdc:	f004 fb6a 	bl	76b4 <k_work_init_delayable>
	state = STATE_SCANNING;
    2fe0:	4b12      	ldr	r3, [pc, #72]	; (302c <dk_buttons_init+0xec>)
    2fe2:	2201      	movs	r2, #1
    2fe4:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
    2fe6:	2200      	movs	r2, #0
    2fe8:	2300      	movs	r3, #0
    2fea:	4620      	mov	r0, r4
    2fec:	f001 fbea 	bl	47c4 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
    2ff0:	2100      	movs	r1, #0
    2ff2:	4608      	mov	r0, r1
    2ff4:	f7ff ff92 	bl	2f1c <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());// 原子操作赋值：get_buttons() 原子赋值给 my_buttons
    2ff8:	f7ff fee4 	bl	2dc4 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2ffc:	4b0c      	ldr	r3, [pc, #48]	; (3030 <dk_buttons_init+0xf0>)
    2ffe:	e8d3 2fef 	ldaex	r2, [r3]
    3002:	e8c3 0fe1 	stlex	r1, r0, [r3]
    3006:	2900      	cmp	r1, #0
    3008:	d1f9      	bne.n	2ffe <dk_buttons_init+0xbe>
	return 0;
    300a:	2300      	movs	r3, #0
}
    300c:	4618      	mov	r0, r3
    300e:	bd38      	pop	{r3, r4, r5, pc}
    3010:	20000b8c 	.word	0x20000b8c
    3014:	20000b60 	.word	0x20000b60
    3018:	00008280 	.word	0x00008280
    301c:	20000b7c 	.word	0x20000b7c
    3020:	00002dfd 	.word	0x00002dfd
    3024:	20000228 	.word	0x20000228
    3028:	00002e91 	.word	0x00002e91
    302c:	20000dbe 	.word	0x20000dbe
    3030:	20000b88 	.word	0x20000b88

00003034 <dk_set_leds_state>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
{
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
    3034:	280f      	cmp	r0, #15
    3036:	d823      	bhi.n	3080 <dk_set_leds_state+0x4c>
{
    3038:	b570      	push	{r4, r5, r6, lr}
    303a:	4605      	mov	r5, r0
    303c:	460e      	mov	r6, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
    303e:	290f      	cmp	r1, #15
    3040:	d822      	bhi.n	3088 <dk_set_leds_state+0x54>
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    3042:	2400      	movs	r4, #0
    3044:	e00b      	b.n	305e <dk_set_leds_state+0x2a>
		int val, err;

		if (BIT(i) & leds_on_mask) {
			val = 1;
    3046:	2201      	movs	r2, #1
	return gpio_pin_set(spec->port, spec->pin, value);
    3048:	4b11      	ldr	r3, [pc, #68]	; (3090 <dk_set_leds_state+0x5c>)
    304a:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
    304e:	7909      	ldrb	r1, [r1, #4]
    3050:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
    3054:	f003 ff3d 	bl	6ed2 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
    3058:	4603      	mov	r3, r0
    305a:	b978      	cbnz	r0, 307c <dk_set_leds_state+0x48>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    305c:	3401      	adds	r4, #1
    305e:	2c03      	cmp	r4, #3
    3060:	d80b      	bhi.n	307a <dk_set_leds_state+0x46>
		if (BIT(i) & leds_on_mask) {
    3062:	fa25 f304 	lsr.w	r3, r5, r4
    3066:	f013 0f01 	tst.w	r3, #1
    306a:	d1ec      	bne.n	3046 <dk_set_leds_state+0x12>
		} else if (BIT(i) & leds_off_mask) {
    306c:	fa26 f304 	lsr.w	r3, r6, r4
    3070:	f013 0f01 	tst.w	r3, #1
    3074:	d0f2      	beq.n	305c <dk_set_leds_state+0x28>
			val = 0;
    3076:	2200      	movs	r2, #0
    3078:	e7e6      	b.n	3048 <dk_set_leds_state+0x14>
			LOG_ERR("Cannot write LED gpio");
			return err;
		}
	}

	return 0;
    307a:	2300      	movs	r3, #0
}
    307c:	4618      	mov	r0, r3
    307e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    3080:	f06f 0315 	mvn.w	r3, #21
}
    3084:	4618      	mov	r0, r3
    3086:	4770      	bx	lr
		return -EINVAL;
    3088:	f06f 0315 	mvn.w	r3, #21
    308c:	e7f6      	b.n	307c <dk_set_leds_state+0x48>
    308e:	bf00      	nop
    3090:	00008260 	.word	0x00008260

00003094 <dk_leds_init>:
{
    3094:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    3096:	2400      	movs	r4, #0
    3098:	2c03      	cmp	r4, #3
    309a:	d80a      	bhi.n	30b2 <dk_leds_init+0x1e>
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
    309c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    30a0:	4807      	ldr	r0, [pc, #28]	; (30c0 <dk_leds_init+0x2c>)
    30a2:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    30a6:	f003 fedd 	bl	6e64 <gpio_pin_configure_dt>
		if (err) {
    30aa:	4603      	mov	r3, r0
    30ac:	b930      	cbnz	r0, 30bc <dk_leds_init+0x28>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    30ae:	3401      	adds	r4, #1
    30b0:	e7f2      	b.n	3098 <dk_leds_init+0x4>
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
    30b2:	210f      	movs	r1, #15
    30b4:	2000      	movs	r0, #0
    30b6:	f7ff ffbd 	bl	3034 <dk_set_leds_state>
    30ba:	4603      	mov	r3, r0
}
    30bc:	4618      	mov	r0, r3
    30be:	bd10      	pop	{r4, pc}
    30c0:	00008260 	.word	0x00008260

000030c4 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
    30c4:	2803      	cmp	r0, #3
    30c6:	d80a      	bhi.n	30de <dk_set_led+0x1a>
{
    30c8:	b508      	push	{r3, lr}
    30ca:	460a      	mov	r2, r1
    30cc:	4b05      	ldr	r3, [pc, #20]	; (30e4 <dk_set_led+0x20>)
    30ce:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    30d2:	7909      	ldrb	r1, [r1, #4]
    30d4:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
    30d8:	f003 fefb 	bl	6ed2 <gpio_pin_set>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
    30dc:	bd08      	pop	{r3, pc}
		return -EINVAL;
    30de:	f06f 0015 	mvn.w	r0, #21
}
    30e2:	4770      	bx	lr
    30e4:	00008260 	.word	0x00008260

000030e8 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    30e8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30ec:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    30f0:	f002 0203 	and.w	r2, r2, #3
    30f4:	4b02      	ldr	r3, [pc, #8]	; (3100 <SystemCoreClockUpdate+0x18>)
    30f6:	40d3      	lsrs	r3, r2
    30f8:	4a02      	ldr	r2, [pc, #8]	; (3104 <SystemCoreClockUpdate+0x1c>)
    30fa:	6013      	str	r3, [r2, #0]
#endif
}
    30fc:	4770      	bx	lr
    30fe:	bf00      	nop
    3100:	07a12000 	.word	0x07a12000
    3104:	20000094 	.word	0x20000094

00003108 <SystemInit>:

void SystemInit(void)
{
    3108:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    310a:	f003 ff89 	bl	7020 <nrf53_errata_97>
    310e:	b168      	cbz	r0, 312c <SystemInit+0x24>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    3110:	4b4e      	ldr	r3, [pc, #312]	; (324c <SystemInit+0x144>)
    3112:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
    3116:	b94b      	cbnz	r3, 312c <SystemInit+0x24>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    3118:	4b4c      	ldr	r3, [pc, #304]	; (324c <SystemInit+0x144>)
    311a:	220d      	movs	r2, #13
    311c:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    3120:	2201      	movs	r2, #1
    3122:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    3126:	2200      	movs	r2, #0
    3128:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    312c:	2200      	movs	r2, #0
    312e:	e00b      	b.n	3148 <SystemInit+0x40>
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    3130:	f102 0360 	add.w	r3, r2, #96	; 0x60
    3134:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3138:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    313c:	00db      	lsls	r3, r3, #3
    313e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    3142:	685b      	ldr	r3, [r3, #4]
    3144:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    3146:	3201      	adds	r2, #1
    3148:	2a1f      	cmp	r2, #31
    314a:	d808      	bhi.n	315e <SystemInit+0x56>
    314c:	f102 0360 	add.w	r3, r2, #96	; 0x60
    3150:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3154:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    3158:	f1b3 3fff 	cmp.w	r3, #4294967295
    315c:	d1e8      	bne.n	3130 <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    315e:	f003 ff37 	bl	6fd0 <nrf53_errata_64>
    3162:	b130      	cbz	r0, 3172 <SystemInit+0x6a>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    3164:	4b39      	ldr	r3, [pc, #228]	; (324c <SystemInit+0x144>)
    3166:	2229      	movs	r2, #41	; 0x29
    3168:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    316c:	2203      	movs	r2, #3
    316e:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    3172:	f003 fee1 	bl	6f38 <nrf53_errata_42>
    3176:	b140      	cbz	r0, 318a <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    3178:	4b35      	ldr	r3, [pc, #212]	; (3250 <SystemInit+0x148>)
    317a:	4a36      	ldr	r2, [pc, #216]	; (3254 <SystemInit+0x14c>)
    317c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    3180:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3184:	2201      	movs	r2, #1
    3186:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    318a:	f003 fee9 	bl	6f60 <nrf53_errata_46>
    318e:	b118      	cbz	r0, 3198 <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    3190:	4b31      	ldr	r3, [pc, #196]	; (3258 <SystemInit+0x150>)
    3192:	2200      	movs	r2, #0
    3194:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    3198:	f003 fefa 	bl	6f90 <nrf53_errata_49>
    319c:	b168      	cbz	r0, 31ba <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    319e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    31a6:	f013 0f01 	tst.w	r3, #1
    31aa:	d006      	beq.n	31ba <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    31ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31b0:	2200      	movs	r2, #0
    31b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    31b6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    31ba:	f003 fefd 	bl	6fb8 <nrf53_errata_55>
    31be:	b160      	cbz	r0, 31da <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    31c0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    31c8:	f013 0f01 	tst.w	r3, #1
    31cc:	d005      	beq.n	31da <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    31ce:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31d2:	f06f 0201 	mvn.w	r2, #1
    31d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    31da:	f003 ff0d 	bl	6ff8 <nrf53_errata_69>
    31de:	b118      	cbz	r0, 31e8 <SystemInit+0xe0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    31e0:	4b1a      	ldr	r3, [pc, #104]	; (324c <SystemInit+0x144>)
    31e2:	2265      	movs	r2, #101	; 0x65
    31e4:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        }

        if (nrf53_errata_140())
    31e8:	f003 ff2e 	bl	7048 <nrf53_errata_140>
    31ec:	b120      	cbz	r0, 31f8 <SystemInit+0xf0>
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    31ee:	4b1a      	ldr	r3, [pc, #104]	; (3258 <SystemInit+0x150>)
    31f0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    31f4:	2b00      	cmp	r3, #0
    31f6:	db11      	blt.n	321c <SystemInit+0x114>

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    31f8:	4a18      	ldr	r2, [pc, #96]	; (325c <SystemInit+0x154>)
    31fa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    31fe:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    3202:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    3206:	4a16      	ldr	r2, [pc, #88]	; (3260 <SystemInit+0x158>)
    3208:	6811      	ldr	r1, [r2, #0]
    320a:	4b16      	ldr	r3, [pc, #88]	; (3264 <SystemInit+0x15c>)
    320c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    3210:	69d2      	ldr	r2, [r2, #28]
    3212:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    3216:	f7ff ff67 	bl	30e8 <SystemCoreClockUpdate>
}
    321a:	bd08      	pop	{r3, pc}
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    321c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3220:	2203      	movs	r2, #3
    3222:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    3226:	2201      	movs	r2, #1
    3228:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    322a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    322e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3232:	2b00      	cmp	r3, #0
    3234:	d0f9      	beq.n	322a <SystemInit+0x122>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    3236:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    323a:	2200      	movs	r2, #0
    323c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    3240:	2201      	movs	r2, #1
    3242:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    3244:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    3248:	e7d6      	b.n	31f8 <SystemInit+0xf0>
    324a:	bf00      	nop
    324c:	50004000 	.word	0x50004000
    3250:	50039000 	.word	0x50039000
    3254:	beef0044 	.word	0xbeef0044
    3258:	50032000 	.word	0x50032000
    325c:	e000ed00 	.word	0xe000ed00
    3260:	00ff8000 	.word	0x00ff8000
    3264:	50006000 	.word	0x50006000

00003268 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3268:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    326a:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    326c:	fab4 f384 	clz	r3, r4
    3270:	f1c3 031f 	rsb	r3, r3, #31
    3274:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    3278:	2b00      	cmp	r3, #0
    327a:	db12      	blt.n	32a2 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    327c:	2201      	movs	r2, #1
    327e:	fa02 f303 	lsl.w	r3, r2, r3
    3282:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3286:	e8d0 2fef 	ldaex	r2, [r0]
    328a:	42a2      	cmp	r2, r4
    328c:	d104      	bne.n	3298 <nrfx_flag32_alloc+0x30>
    328e:	e8c0 3fee 	stlex	lr, r3, [r0]
    3292:	f1be 0f00 	cmp.w	lr, #0
    3296:	d1f6      	bne.n	3286 <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3298:	d1e7      	bne.n	326a <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    329a:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    329e:	4802      	ldr	r0, [pc, #8]	; (32a8 <nrfx_flag32_alloc+0x40>)
}
    32a0:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    32a2:	4802      	ldr	r0, [pc, #8]	; (32ac <nrfx_flag32_alloc+0x44>)
    32a4:	e7fc      	b.n	32a0 <nrfx_flag32_alloc+0x38>
    32a6:	bf00      	nop
    32a8:	0bad0000 	.word	0x0bad0000
    32ac:	0bad0002 	.word	0x0bad0002

000032b0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    32b0:	6803      	ldr	r3, [r0, #0]
    32b2:	40cb      	lsrs	r3, r1
    32b4:	f013 0f01 	tst.w	r3, #1
    32b8:	d111      	bne.n	32de <nrfx_flag32_free+0x2e>
{
    32ba:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    32bc:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    32be:	2301      	movs	r3, #1
    32c0:	408b      	lsls	r3, r1
    32c2:	4313      	orrs	r3, r2
    32c4:	e8d0 cfef 	ldaex	ip, [r0]
    32c8:	4594      	cmp	ip, r2
    32ca:	d104      	bne.n	32d6 <nrfx_flag32_free+0x26>
    32cc:	e8c0 3fee 	stlex	lr, r3, [r0]
    32d0:	f1be 0f00 	cmp.w	lr, #0
    32d4:	d1f6      	bne.n	32c4 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    32d6:	d1f1      	bne.n	32bc <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    32d8:	4802      	ldr	r0, [pc, #8]	; (32e4 <nrfx_flag32_free+0x34>)
}
    32da:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    32de:	4802      	ldr	r0, [pc, #8]	; (32e8 <nrfx_flag32_free+0x38>)
}
    32e0:	4770      	bx	lr
    32e2:	bf00      	nop
    32e4:	0bad0000 	.word	0x0bad0000
    32e8:	0bad0004 	.word	0x0bad0004

000032ec <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    32ec:	4b05      	ldr	r3, [pc, #20]	; (3304 <nrfx_clock_init+0x18>)
    32ee:	791b      	ldrb	r3, [r3, #4]
    32f0:	b92b      	cbnz	r3, 32fe <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    32f2:	4b04      	ldr	r3, [pc, #16]	; (3304 <nrfx_clock_init+0x18>)
    32f4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    32f6:	2201      	movs	r2, #1
    32f8:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    32fa:	4803      	ldr	r0, [pc, #12]	; (3308 <nrfx_clock_init+0x1c>)
    32fc:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    32fe:	4803      	ldr	r0, [pc, #12]	; (330c <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3300:	4770      	bx	lr
    3302:	bf00      	nop
    3304:	20000b90 	.word	0x20000b90
    3308:	0bad0000 	.word	0x0bad0000
    330c:	0bad000c 	.word	0x0bad000c

00003310 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3310:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3312:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3316:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    331a:	b163      	cbz	r3, 3336 <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    331c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3320:	2000      	movs	r0, #0
    3322:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    3326:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    332a:	2201      	movs	r2, #1
    332c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3330:	4b28      	ldr	r3, [pc, #160]	; (33d4 <nrfx_power_clock_irq_handler+0xc4>)
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3336:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    333a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    333e:	b1bb      	cbz	r3, 3370 <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3340:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3344:	2200      	movs	r2, #0
    3346:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    334a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    334e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    3352:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3356:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    335a:	2a01      	cmp	r2, #1
    335c:	d031      	beq.n	33c2 <nrfx_power_clock_irq_handler+0xb2>
    p_reg->INTENCLR = mask;
    335e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3362:	2202      	movs	r2, #2
    3364:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3368:	4b1a      	ldr	r3, [pc, #104]	; (33d4 <nrfx_power_clock_irq_handler+0xc4>)
    336a:	681b      	ldr	r3, [r3, #0]
    336c:	2001      	movs	r0, #1
    336e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3370:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3374:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    3378:	b173      	cbz	r3, 3398 <nrfx_power_clock_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    337a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    337e:	2200      	movs	r2, #0
    3380:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3384:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    3388:	f44f 7280 	mov.w	r2, #256	; 0x100
    338c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    3390:	4b10      	ldr	r3, [pc, #64]	; (33d4 <nrfx_power_clock_irq_handler+0xc4>)
    3392:	681b      	ldr	r3, [r3, #0]
    3394:	2004      	movs	r0, #4
    3396:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3398:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    339c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    33a0:	b173      	cbz	r3, 33c0 <nrfx_power_clock_irq_handler+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33a2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    33a6:	2200      	movs	r2, #0
    33a8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    33ac:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    33b0:	f44f 7200 	mov.w	r2, #512	; 0x200
    33b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    33b8:	4b06      	ldr	r3, [pc, #24]	; (33d4 <nrfx_power_clock_irq_handler+0xc4>)
    33ba:	681b      	ldr	r3, [r3, #0]
    33bc:	2005      	movs	r0, #5
    33be:	4798      	blx	r3
    }
#endif
}
    33c0:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    33c2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    33c6:	2202      	movs	r2, #2
    33c8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    33cc:	2201      	movs	r2, #1
    33ce:	609a      	str	r2, [r3, #8]
}
    33d0:	e7ce      	b.n	3370 <nrfx_power_clock_irq_handler+0x60>
    33d2:	bf00      	nop
    33d4:	20000b90 	.word	0x20000b90

000033d8 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    33d8:	b508      	push	{r3, lr}
    33da:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    33dc:	4801      	ldr	r0, [pc, #4]	; (33e4 <nrfx_dppi_channel_alloc+0xc>)
    33de:	f7ff ff43 	bl	3268 <nrfx_flag32_alloc>
}
    33e2:	bd08      	pop	{r3, pc}
    33e4:	20000098 	.word	0x20000098

000033e8 <nrf_gpio_reconfigure>:
{
    33e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ea:	461c      	mov	r4, r3
    33ec:	9f05      	ldr	r7, [sp, #20]
    33ee:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    33f0:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    33f4:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    33f6:	2801      	cmp	r0, #1
    33f8:	d034      	beq.n	3464 <nrf_gpio_reconfigure+0x7c>
        case 0: return NRF_P0;
    33fa:	4d27      	ldr	r5, [pc, #156]	; (3498 <nrf_gpio_reconfigure+0xb0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    33fc:	f10c 0380 	add.w	r3, ip, #128	; 0x80
    3400:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    3404:	b381      	cbz	r1, 3468 <nrf_gpio_reconfigure+0x80>
    3406:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3408:	b382      	cbz	r2, 346c <nrf_gpio_reconfigure+0x84>
    340a:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    340e:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3412:	b374      	cbz	r4, 3472 <nrf_gpio_reconfigure+0x8a>
    3414:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3418:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    341c:	b367      	cbz	r7, 3478 <nrf_gpio_reconfigure+0x90>
    341e:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3422:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    3426:	b356      	cbz	r6, 347e <nrf_gpio_reconfigure+0x96>
    3428:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    342c:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    3430:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3434:	b331      	cbz	r1, 3484 <nrf_gpio_reconfigure+0x9c>
    3436:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3438:	b332      	cbz	r2, 3488 <nrf_gpio_reconfigure+0xa0>
    343a:	7812      	ldrb	r2, [r2, #0]
    343c:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    343e:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3440:	b324      	cbz	r4, 348c <nrf_gpio_reconfigure+0xa4>
    3442:	7822      	ldrb	r2, [r4, #0]
    3444:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3446:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3448:	b317      	cbz	r7, 3490 <nrf_gpio_reconfigure+0xa8>
    344a:	783a      	ldrb	r2, [r7, #0]
    344c:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    344e:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    3450:	b306      	cbz	r6, 3494 <nrf_gpio_reconfigure+0xac>
    3452:	7832      	ldrb	r2, [r6, #0]
    3454:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3456:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3458:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    345a:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    345e:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    3462:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    3464:	4d0d      	ldr	r5, [pc, #52]	; (349c <nrf_gpio_reconfigure+0xb4>)
    3466:	e7c9      	b.n	33fc <nrf_gpio_reconfigure+0x14>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    3468:	2000      	movs	r0, #0
    346a:	e7cd      	b.n	3408 <nrf_gpio_reconfigure+0x20>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    346c:	f04f 0e00 	mov.w	lr, #0
    3470:	e7cd      	b.n	340e <nrf_gpio_reconfigure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3472:	f04f 0e00 	mov.w	lr, #0
    3476:	e7cf      	b.n	3418 <nrf_gpio_reconfigure+0x30>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    3478:	f04f 0e00 	mov.w	lr, #0
    347c:	e7d1      	b.n	3422 <nrf_gpio_reconfigure+0x3a>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    347e:	f04f 0e00 	mov.w	lr, #0
    3482:	e7d3      	b.n	342c <nrf_gpio_reconfigure+0x44>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3484:	2300      	movs	r3, #0
    3486:	e7d7      	b.n	3438 <nrf_gpio_reconfigure+0x50>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3488:	2200      	movs	r2, #0
    348a:	e7d8      	b.n	343e <nrf_gpio_reconfigure+0x56>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    348c:	2200      	movs	r2, #0
    348e:	e7da      	b.n	3446 <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3490:	2200      	movs	r2, #0
    3492:	e7dc      	b.n	344e <nrf_gpio_reconfigure+0x66>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    3494:	2200      	movs	r2, #0
    3496:	e7de      	b.n	3456 <nrf_gpio_reconfigure+0x6e>
    3498:	50842500 	.word	0x50842500
    349c:	50842800 	.word	0x50842800

000034a0 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
    34a0:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    34a4:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    34a6:	2801      	cmp	r0, #1
    34a8:	d00a      	beq.n	34c0 <nrf_gpio_cfg_default+0x20>
        case 0: return NRF_P0;
    34aa:	4906      	ldr	r1, [pc, #24]	; (34c4 <nrf_gpio_cfg_default+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    34ac:	3280      	adds	r2, #128	; 0x80
    34ae:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    34b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    34b6:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    34ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    34be:	4770      	bx	lr
        case 1: return NRF_P1;
    34c0:	4901      	ldr	r1, [pc, #4]	; (34c8 <nrf_gpio_cfg_default+0x28>)
    34c2:	e7f3      	b.n	34ac <nrf_gpio_cfg_default+0xc>
    34c4:	50842500 	.word	0x50842500
    34c8:	50842800 	.word	0x50842800

000034cc <nrf_gpio_latches_read_and_clear>:
{
    34cc:	b500      	push	{lr}
    34ce:	b083      	sub	sp, #12
    34d0:	4684      	mov	ip, r0
    34d2:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    34d4:	4b0c      	ldr	r3, [pc, #48]	; (3508 <nrf_gpio_latches_read_and_clear+0x3c>)
    34d6:	e893 0003 	ldmia.w	r3, {r0, r1}
    34da:	ab02      	add	r3, sp, #8
    34dc:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    34e0:	4663      	mov	r3, ip
    34e2:	e009      	b.n	34f8 <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
    34e4:	a902      	add	r1, sp, #8
    34e6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    34ea:	f851 1c08 	ldr.w	r1, [r1, #-8]
    34ee:	6a08      	ldr	r0, [r1, #32]
    34f0:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    34f4:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
    34f6:	3301      	adds	r3, #1
    34f8:	eb0c 000e 	add.w	r0, ip, lr
    34fc:	4298      	cmp	r0, r3
    34fe:	d8f1      	bhi.n	34e4 <nrf_gpio_latches_read_and_clear+0x18>
}
    3500:	b003      	add	sp, #12
    3502:	f85d fb04 	ldr.w	pc, [sp], #4
    3506:	bf00      	nop
    3508:	00007e80 	.word	0x00007e80

0000350c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    350c:	3008      	adds	r0, #8
    350e:	4b03      	ldr	r3, [pc, #12]	; (351c <pin_in_use+0x10>)
    3510:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3514:	f000 0001 	and.w	r0, r0, #1
    3518:	4770      	bx	lr
    351a:	bf00      	nop
    351c:	2000009c 	.word	0x2000009c

00003520 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3520:	3008      	adds	r0, #8
    3522:	4b03      	ldr	r3, [pc, #12]	; (3530 <pin_in_use_by_te+0x10>)
    3524:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3528:	f3c0 1040 	ubfx	r0, r0, #5, #1
    352c:	4770      	bx	lr
    352e:	bf00      	nop
    3530:	2000009c 	.word	0x2000009c

00003534 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3534:	3008      	adds	r0, #8
    3536:	4b04      	ldr	r3, [pc, #16]	; (3548 <pin_has_trigger+0x14>)
    3538:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    353c:	f010 001c 	ands.w	r0, r0, #28
    3540:	bf18      	it	ne
    3542:	2001      	movne	r0, #1
    3544:	4770      	bx	lr
    3546:	bf00      	nop
    3548:	2000009c 	.word	0x2000009c

0000354c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    354c:	3008      	adds	r0, #8
    354e:	4b03      	ldr	r3, [pc, #12]	; (355c <pin_is_output+0x10>)
    3550:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3554:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3558:	4770      	bx	lr
    355a:	bf00      	nop
    355c:	2000009c 	.word	0x2000009c

00003560 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3560:	3008      	adds	r0, #8
    3562:	4b02      	ldr	r3, [pc, #8]	; (356c <pin_te_get+0xc>)
    3564:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3568:	0b40      	lsrs	r0, r0, #13
    356a:	4770      	bx	lr
    356c:	2000009c 	.word	0x2000009c

00003570 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3570:	2200      	movs	r2, #0
    3572:	e004      	b.n	357e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3574:	f04f 33ff 	mov.w	r3, #4294967295
    3578:	4283      	cmp	r3, r0
    357a:	d00f      	beq.n	359c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    357c:	3201      	adds	r2, #1
    357e:	2a2f      	cmp	r2, #47	; 0x2f
    3580:	d80a      	bhi.n	3598 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3582:	f102 0308 	add.w	r3, r2, #8
    3586:	4906      	ldr	r1, [pc, #24]	; (35a0 <handler_in_use+0x30>)
    3588:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    358c:	f413 7f80 	tst.w	r3, #256	; 0x100
    3590:	d0f0      	beq.n	3574 <handler_in_use+0x4>
    3592:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3596:	e7ef      	b.n	3578 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    3598:	2000      	movs	r0, #0
    359a:	4770      	bx	lr
            return true;
    359c:	2001      	movs	r0, #1
}
    359e:	4770      	bx	lr
    35a0:	2000009c 	.word	0x2000009c

000035a4 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    35a4:	2300      	movs	r3, #0
    35a6:	b113      	cbz	r3, 35ae <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    35a8:	f04f 30ff 	mov.w	r0, #4294967295
}
    35ac:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    35ae:	4a07      	ldr	r2, [pc, #28]	; (35cc <find_handler+0x28>)
    35b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    35b4:	4282      	cmp	r2, r0
    35b6:	d001      	beq.n	35bc <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    35b8:	3301      	adds	r3, #1
    35ba:	e7f4      	b.n	35a6 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    35bc:	4a03      	ldr	r2, [pc, #12]	; (35cc <find_handler+0x28>)
    35be:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    35c2:	6852      	ldr	r2, [r2, #4]
    35c4:	428a      	cmp	r2, r1
    35c6:	d1f7      	bne.n	35b8 <find_handler+0x14>
            return i;
    35c8:	4618      	mov	r0, r3
    35ca:	4770      	bx	lr
    35cc:	2000009c 	.word	0x2000009c

000035d0 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    35d0:	f100 0208 	add.w	r2, r0, #8
    35d4:	4b0e      	ldr	r3, [pc, #56]	; (3610 <get_initial_sense+0x40>)
    35d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    35da:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    35de:	2b04      	cmp	r3, #4
    35e0:	d010      	beq.n	3604 <get_initial_sense+0x34>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    35e2:	2b05      	cmp	r3, #5
    35e4:	d010      	beq.n	3608 <get_initial_sense+0x38>
    *p_pin = pin_number & 0x1F;
    35e6:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    35ea:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    35ec:	2801      	cmp	r0, #1
    35ee:	d007      	beq.n	3600 <get_initial_sense+0x30>
        case 0: return NRF_P0;
    35f0:	4b08      	ldr	r3, [pc, #32]	; (3614 <get_initial_sense+0x44>)
    return p_reg->IN;
    35f2:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    35f4:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    35f6:	f013 0f01 	tst.w	r3, #1
    35fa:	d007      	beq.n	360c <get_initial_sense+0x3c>
    35fc:	2003      	movs	r0, #3
    35fe:	4770      	bx	lr
        case 1: return NRF_P1;
    3600:	4b05      	ldr	r3, [pc, #20]	; (3618 <get_initial_sense+0x48>)
    3602:	e7f6      	b.n	35f2 <get_initial_sense+0x22>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3604:	2003      	movs	r0, #3
    3606:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3608:	2002      	movs	r0, #2
    360a:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    360c:	2002      	movs	r0, #2
    }

    return sense;
}
    360e:	4770      	bx	lr
    3610:	2000009c 	.word	0x2000009c
    3614:	50842500 	.word	0x50842500
    3618:	50842800 	.word	0x50842800

0000361c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    361c:	3008      	adds	r0, #8
    361e:	4b06      	ldr	r3, [pc, #24]	; (3638 <channel_handler_get+0x1c>)
    3620:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3624:	f410 7f80 	tst.w	r0, #256	; 0x100
    3628:	d004      	beq.n	3634 <channel_handler_get+0x18>
    362a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    362e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3632:	4770      	bx	lr
        return NULL;
    3634:	2000      	movs	r0, #0
}
    3636:	4770      	bx	lr
    3638:	2000009c 	.word	0x2000009c

0000363c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    363c:	b570      	push	{r4, r5, r6, lr}
    363e:	4604      	mov	r4, r0
    3640:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    3642:	f7ff ffeb 	bl	361c <channel_handler_get>

    if (handler)
    3646:	b120      	cbz	r0, 3652 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    3648:	6806      	ldr	r6, [r0, #0]
    364a:	6842      	ldr	r2, [r0, #4]
    364c:	4629      	mov	r1, r5
    364e:	4620      	mov	r0, r4
    3650:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    3652:	4b04      	ldr	r3, [pc, #16]	; (3664 <call_handler+0x28>)
    3654:	689b      	ldr	r3, [r3, #8]
    3656:	b123      	cbz	r3, 3662 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3658:	4a02      	ldr	r2, [pc, #8]	; (3664 <call_handler+0x28>)
    365a:	68d2      	ldr	r2, [r2, #12]
    365c:	4629      	mov	r1, r5
    365e:	4620      	mov	r0, r4
    3660:	4798      	blx	r3
    }
}
    3662:	bd70      	pop	{r4, r5, r6, pc}
    3664:	2000009c 	.word	0x2000009c

00003668 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    3668:	b570      	push	{r4, r5, r6, lr}
    366a:	4606      	mov	r6, r0
    366c:	460c      	mov	r4, r1
    366e:	4615      	mov	r5, r2
    if (is_level(trigger))
    3670:	4608      	mov	r0, r1
    3672:	f003 fe9c 	bl	73ae <is_level>
    3676:	b960      	cbnz	r0, 3692 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3678:	2d02      	cmp	r5, #2
    367a:	d026      	beq.n	36ca <next_sense_cond_call_handler+0x62>
    367c:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    367e:	4630      	mov	r0, r6
    3680:	f003 fe6d 	bl	735e <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3684:	2c03      	cmp	r4, #3
    3686:	d024      	beq.n	36d2 <next_sense_cond_call_handler+0x6a>
    3688:	2d02      	cmp	r5, #2
    368a:	d020      	beq.n	36ce <next_sense_cond_call_handler+0x66>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    368c:	2d03      	cmp	r5, #3
    368e:	d025      	beq.n	36dc <next_sense_cond_call_handler+0x74>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    3690:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    3692:	4621      	mov	r1, r4
    3694:	4630      	mov	r0, r6
    3696:	f7ff ffd1 	bl	363c <call_handler>
    *p_pin = pin_number & 0x1F;
    369a:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    369e:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    36a0:	2a01      	cmp	r2, #1
    36a2:	d010      	beq.n	36c6 <next_sense_cond_call_handler+0x5e>
        case 0: return NRF_P0;
    36a4:	4a0f      	ldr	r2, [pc, #60]	; (36e4 <next_sense_cond_call_handler+0x7c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    36a6:	3380      	adds	r3, #128	; 0x80
    36a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    36ac:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    36b0:	429d      	cmp	r5, r3
    36b2:	d1ed      	bne.n	3690 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    36b4:	2100      	movs	r1, #0
    36b6:	4630      	mov	r0, r6
    36b8:	f003 fe51 	bl	735e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    36bc:	4629      	mov	r1, r5
    36be:	4630      	mov	r0, r6
    36c0:	f003 fe4d 	bl	735e <nrf_gpio_cfg_sense_set>
    36c4:	e7e4      	b.n	3690 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    36c6:	4a08      	ldr	r2, [pc, #32]	; (36e8 <next_sense_cond_call_handler+0x80>)
    36c8:	e7ed      	b.n	36a6 <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    36ca:	2103      	movs	r1, #3
    36cc:	e7d7      	b.n	367e <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    36ce:	2c01      	cmp	r4, #1
    36d0:	d1dc      	bne.n	368c <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    36d2:	4621      	mov	r1, r4
    36d4:	4630      	mov	r0, r6
    36d6:	f7ff ffb1 	bl	363c <call_handler>
}
    36da:	e7d9      	b.n	3690 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    36dc:	2c02      	cmp	r4, #2
    36de:	d1d7      	bne.n	3690 <next_sense_cond_call_handler+0x28>
    36e0:	e7f7      	b.n	36d2 <next_sense_cond_call_handler+0x6a>
    36e2:	bf00      	nop
    36e4:	50842500 	.word	0x50842500
    36e8:	50842800 	.word	0x50842800

000036ec <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    36ec:	f100 0208 	add.w	r2, r0, #8
    36f0:	4b0e      	ldr	r3, [pc, #56]	; (372c <release_handler+0x40>)
    36f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    36f6:	f413 7f80 	tst.w	r3, #256	; 0x100
    36fa:	d016      	beq.n	372a <release_handler+0x3e>
{
    36fc:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    36fe:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3702:	4610      	mov	r0, r2
    3704:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3708:	4a08      	ldr	r2, [pc, #32]	; (372c <release_handler+0x40>)
    370a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    370e:	4620      	mov	r0, r4
    3710:	f7ff ff2e 	bl	3570 <handler_in_use>
    3714:	b100      	cbz	r0, 3718 <release_handler+0x2c>
}
    3716:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    3718:	4804      	ldr	r0, [pc, #16]	; (372c <release_handler+0x40>)
    371a:	2300      	movs	r3, #0
    371c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3720:	4621      	mov	r1, r4
    3722:	3074      	adds	r0, #116	; 0x74
    3724:	f7ff fdc4 	bl	32b0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3728:	e7f5      	b.n	3716 <release_handler+0x2a>
    372a:	4770      	bx	lr
    372c:	2000009c 	.word	0x2000009c

00003730 <pin_handler_trigger_uninit>:
{
    3730:	b510      	push	{r4, lr}
    3732:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    3734:	f7ff fef4 	bl	3520 <pin_in_use_by_te>
    3738:	b150      	cbz	r0, 3750 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    373a:	4620      	mov	r0, r4
    373c:	f7ff ff10 	bl	3560 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3740:	4b08      	ldr	r3, [pc, #32]	; (3764 <pin_handler_trigger_uninit+0x34>)
    3742:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3746:	2200      	movs	r2, #0
    3748:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    374c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    3750:	4620      	mov	r0, r4
    3752:	f7ff ffcb 	bl	36ec <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3756:	3408      	adds	r4, #8
    3758:	4b03      	ldr	r3, [pc, #12]	; (3768 <pin_handler_trigger_uninit+0x38>)
    375a:	2200      	movs	r2, #0
    375c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    3760:	bd10      	pop	{r4, pc}
    3762:	bf00      	nop
    3764:	5000d000 	.word	0x5000d000
    3768:	2000009c 	.word	0x2000009c

0000376c <pin_handler_set>:
{
    376c:	b570      	push	{r4, r5, r6, lr}
    376e:	b082      	sub	sp, #8
    3770:	4605      	mov	r5, r0
    3772:	460e      	mov	r6, r1
    3774:	4614      	mov	r4, r2
    release_handler(pin);
    3776:	f7ff ffb9 	bl	36ec <release_handler>
    if (!handler)
    377a:	b326      	cbz	r6, 37c6 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    377c:	4621      	mov	r1, r4
    377e:	4630      	mov	r0, r6
    3780:	f7ff ff10 	bl	35a4 <find_handler>
    if (handler_id < 0)
    3784:	1e03      	subs	r3, r0, #0
    3786:	db13      	blt.n	37b0 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    3788:	4910      	ldr	r1, [pc, #64]	; (37cc <pin_handler_set+0x60>)
    378a:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    378e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    3792:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3794:	f105 0008 	add.w	r0, r5, #8
    3798:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    379c:	025b      	lsls	r3, r3, #9
    379e:	b29b      	uxth	r3, r3
    37a0:	4313      	orrs	r3, r2
    37a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    37a6:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    37aa:	4809      	ldr	r0, [pc, #36]	; (37d0 <pin_handler_set+0x64>)
}
    37ac:	b002      	add	sp, #8
    37ae:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    37b0:	f10d 0107 	add.w	r1, sp, #7
    37b4:	4807      	ldr	r0, [pc, #28]	; (37d4 <pin_handler_set+0x68>)
    37b6:	f7ff fd57 	bl	3268 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    37ba:	4b05      	ldr	r3, [pc, #20]	; (37d0 <pin_handler_set+0x64>)
    37bc:	4298      	cmp	r0, r3
    37be:	d1f5      	bne.n	37ac <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    37c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    37c4:	e7e0      	b.n	3788 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    37c6:	4802      	ldr	r0, [pc, #8]	; (37d0 <pin_handler_set+0x64>)
    37c8:	e7f0      	b.n	37ac <pin_handler_set+0x40>
    37ca:	bf00      	nop
    37cc:	2000009c 	.word	0x2000009c
    37d0:	0bad0000 	.word	0x0bad0000
    37d4:	20000110 	.word	0x20000110

000037d8 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    37d8:	b570      	push	{r4, r5, r6, lr}
    37da:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    37dc:	466a      	mov	r2, sp
    37de:	2102      	movs	r1, #2
    37e0:	2000      	movs	r0, #0
    37e2:	f7ff fe73 	bl	34cc <nrf_gpio_latches_read_and_clear>
    37e6:	e03e      	b.n	3866 <port_event_handle+0x8e>
    37e8:	4e21      	ldr	r6, [pc, #132]	; (3870 <port_event_handle+0x98>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    37ea:	f105 0380 	add.w	r3, r5, #128	; 0x80
    37ee:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    37f2:	f3c2 4201 	ubfx	r2, r2, #16, #2
    37f6:	f7ff ff37 	bl	3668 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    37fa:	2301      	movs	r3, #1
    37fc:	40ab      	lsls	r3, r5
    37fe:	6233      	str	r3, [r6, #32]
            while (latch[i])
    3800:	ab02      	add	r3, sp, #8
    3802:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3806:	f853 0c08 	ldr.w	r0, [r3, #-8]
    380a:	b1f8      	cbz	r0, 384c <port_event_handle+0x74>
                uint32_t pin = NRF_CTZ(latch[i]);
    380c:	fa90 f0a0 	rbit	r0, r0
    3810:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    3814:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3818:	f100 0208 	add.w	r2, r0, #8
    381c:	4b15      	ldr	r3, [pc, #84]	; (3874 <port_event_handle+0x9c>)
    381e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    3822:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3826:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    3828:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    382c:	f81d 2005 	ldrb.w	r2, [sp, r5]
    3830:	2301      	movs	r3, #1
    3832:	40b3      	lsls	r3, r6
    3834:	43db      	mvns	r3, r3
    3836:	b25b      	sxtb	r3, r3
    3838:	4013      	ands	r3, r2
    383a:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    383e:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    3842:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3844:	2b01      	cmp	r3, #1
    3846:	d0cf      	beq.n	37e8 <port_event_handle+0x10>
        case 0: return NRF_P0;
    3848:	4e0b      	ldr	r6, [pc, #44]	; (3878 <port_event_handle+0xa0>)
    384a:	e7ce      	b.n	37ea <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    384c:	3401      	adds	r4, #1
    384e:	2c01      	cmp	r4, #1
    3850:	d9d6      	bls.n	3800 <port_event_handle+0x28>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3852:	4b0a      	ldr	r3, [pc, #40]	; (387c <port_event_handle+0xa4>)
    3854:	2200      	movs	r2, #0
    3856:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    385a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    385e:	4668      	mov	r0, sp
    3860:	f003 fdaa 	bl	73b8 <latch_pending_read_and_check>
    3864:	b108      	cbz	r0, 386a <port_event_handle+0x92>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3866:	2400      	movs	r4, #0
    3868:	e7f1      	b.n	384e <port_event_handle+0x76>
}
    386a:	b002      	add	sp, #8
    386c:	bd70      	pop	{r4, r5, r6, pc}
    386e:	bf00      	nop
    3870:	50842800 	.word	0x50842800
    3874:	2000009c 	.word	0x2000009c
    3878:	50842500 	.word	0x50842500
    387c:	5000d000 	.word	0x5000d000

00003880 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    3880:	b538      	push	{r3, r4, r5, lr}
    3882:	4604      	mov	r4, r0
    while (mask)
    3884:	e018      	b.n	38b8 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    3886:	fa94 f3a4 	rbit	r3, r4
    388a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    388e:	2201      	movs	r2, #1
    3890:	409a      	lsls	r2, r3
    3892:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3896:	4a0a      	ldr	r2, [pc, #40]	; (38c0 <gpiote_evt_handle+0x40>)
    3898:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    389c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    38a0:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    38a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    38a8:	f3c0 4001 	ubfx	r0, r0, #16, #2
    38ac:	f003 fd7d 	bl	73aa <gpiote_polarity_to_trigger>
    38b0:	4601      	mov	r1, r0
    38b2:	4628      	mov	r0, r5
    38b4:	f7ff fec2 	bl	363c <call_handler>
    while (mask)
    38b8:	2c00      	cmp	r4, #0
    38ba:	d1e4      	bne.n	3886 <gpiote_evt_handle+0x6>
    }
}
    38bc:	bd38      	pop	{r3, r4, r5, pc}
    38be:	bf00      	nop
    38c0:	5000d000 	.word	0x5000d000

000038c4 <nrfx_gpiote_input_configure>:
{
    38c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38c8:	b084      	sub	sp, #16
    38ca:	4604      	mov	r4, r0
    38cc:	4615      	mov	r5, r2
    38ce:	461e      	mov	r6, r3
    if (p_input_config)
    38d0:	b309      	cbz	r1, 3916 <nrfx_gpiote_input_configure+0x52>
    38d2:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    38d4:	f003 fd53 	bl	737e <pin_is_task_output>
    38d8:	2800      	cmp	r0, #0
    38da:	d13f      	bne.n	395c <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    38dc:	2300      	movs	r3, #0
    38de:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    38e2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    38e6:	9301      	str	r3, [sp, #4]
    38e8:	9300      	str	r3, [sp, #0]
    38ea:	463b      	mov	r3, r7
    38ec:	f10d 020f 	add.w	r2, sp, #15
    38f0:	f10d 010e 	add.w	r1, sp, #14
    38f4:	4620      	mov	r0, r4
    38f6:	f7ff fd77 	bl	33e8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    38fa:	4a39      	ldr	r2, [pc, #228]	; (39e0 <nrfx_gpiote_input_configure+0x11c>)
    38fc:	f104 0108 	add.w	r1, r4, #8
    3900:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3904:	f023 0302 	bic.w	r3, r3, #2
    3908:	b29b      	uxth	r3, r3
    390a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    390e:	f043 0301 	orr.w	r3, r3, #1
    3912:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3916:	b1bd      	cbz	r5, 3948 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3918:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    391a:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    391e:	4620      	mov	r0, r4
    3920:	f7ff fe14 	bl	354c <pin_is_output>
    3924:	b1e0      	cbz	r0, 3960 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    3926:	f1b8 0f00 	cmp.w	r8, #0
    392a:	d153      	bne.n	39d4 <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    392c:	4a2c      	ldr	r2, [pc, #176]	; (39e0 <nrfx_gpiote_input_configure+0x11c>)
    392e:	f104 0108 	add.w	r1, r4, #8
    3932:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3936:	f023 031c 	bic.w	r3, r3, #28
    393a:	b29b      	uxth	r3, r3
    393c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3940:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    3944:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    3948:	2e00      	cmp	r6, #0
    394a:	d047      	beq.n	39dc <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    394c:	6872      	ldr	r2, [r6, #4]
    394e:	6831      	ldr	r1, [r6, #0]
    3950:	4620      	mov	r0, r4
    3952:	f7ff ff0b 	bl	376c <pin_handler_set>
}
    3956:	b004      	add	sp, #16
    3958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    395c:	4821      	ldr	r0, [pc, #132]	; (39e4 <nrfx_gpiote_input_configure+0x120>)
    395e:	e7fa      	b.n	3956 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3960:	4a1f      	ldr	r2, [pc, #124]	; (39e0 <nrfx_gpiote_input_configure+0x11c>)
    3962:	f104 0108 	add.w	r1, r4, #8
    3966:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    396a:	f023 0320 	bic.w	r3, r3, #32
    396e:	04db      	lsls	r3, r3, #19
    3970:	0cdb      	lsrs	r3, r3, #19
    3972:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    3976:	f1b8 0f00 	cmp.w	r8, #0
    397a:	d0d7      	beq.n	392c <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    397c:	2f03      	cmp	r7, #3
    397e:	d82b      	bhi.n	39d8 <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3980:	686b      	ldr	r3, [r5, #4]
    3982:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3984:	b947      	cbnz	r7, 3998 <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
    3986:	4b18      	ldr	r3, [pc, #96]	; (39e8 <nrfx_gpiote_input_configure+0x124>)
    3988:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    398c:	2200      	movs	r2, #0
    398e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    3992:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    3996:	e7c9      	b.n	392c <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    3998:	4638      	mov	r0, r7
    399a:	f003 fd07 	bl	73ac <gpiote_trigger_to_polarity>
    399e:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    39a0:	4811      	ldr	r0, [pc, #68]	; (39e8 <nrfx_gpiote_input_configure+0x124>)
    39a2:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    39a6:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    39aa:	f022 0203 	bic.w	r2, r2, #3
    39ae:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    39b2:	4622      	mov	r2, r4
    39b4:	4629      	mov	r1, r5
    39b6:	f003 fc9a 	bl	72ee <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    39ba:	4a09      	ldr	r2, [pc, #36]	; (39e0 <nrfx_gpiote_input_configure+0x11c>)
    39bc:	f104 0108 	add.w	r1, r4, #8
    39c0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    39c4:	036d      	lsls	r5, r5, #13
    39c6:	b2ad      	uxth	r5, r5
    39c8:	432b      	orrs	r3, r5
    39ca:	f043 0320 	orr.w	r3, r3, #32
    39ce:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    39d2:	e7ab      	b.n	392c <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    39d4:	4803      	ldr	r0, [pc, #12]	; (39e4 <nrfx_gpiote_input_configure+0x120>)
    39d6:	e7be      	b.n	3956 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    39d8:	4802      	ldr	r0, [pc, #8]	; (39e4 <nrfx_gpiote_input_configure+0x120>)
    39da:	e7bc      	b.n	3956 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    39dc:	4803      	ldr	r0, [pc, #12]	; (39ec <nrfx_gpiote_input_configure+0x128>)
    39de:	e7ba      	b.n	3956 <nrfx_gpiote_input_configure+0x92>
    39e0:	2000009c 	.word	0x2000009c
    39e4:	0bad0004 	.word	0x0bad0004
    39e8:	5000d000 	.word	0x5000d000
    39ec:	0bad0000 	.word	0x0bad0000

000039f0 <nrfx_gpiote_output_configure>:
{
    39f0:	b570      	push	{r4, r5, r6, lr}
    39f2:	b084      	sub	sp, #16
    39f4:	4604      	mov	r4, r0
    39f6:	4615      	mov	r5, r2
    if (p_config)
    39f8:	b329      	cbz	r1, 3a46 <nrfx_gpiote_output_configure+0x56>
    39fa:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    39fc:	f003 fcce 	bl	739c <pin_is_input>
    3a00:	b120      	cbz	r0, 3a0c <nrfx_gpiote_output_configure+0x1c>
    3a02:	4620      	mov	r0, r4
    3a04:	f7ff fd8c 	bl	3520 <pin_in_use_by_te>
    3a08:	2800      	cmp	r0, #0
    3a0a:	d13a      	bne.n	3a82 <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3a0c:	4620      	mov	r0, r4
    3a0e:	f7ff fd91 	bl	3534 <pin_has_trigger>
    3a12:	b110      	cbz	r0, 3a1a <nrfx_gpiote_output_configure+0x2a>
    3a14:	7873      	ldrb	r3, [r6, #1]
    3a16:	2b01      	cmp	r3, #1
    3a18:	d033      	beq.n	3a82 <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3a1a:	2301      	movs	r3, #1
    3a1c:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3a20:	2300      	movs	r3, #0
    3a22:	9301      	str	r3, [sp, #4]
    3a24:	9600      	str	r6, [sp, #0]
    3a26:	1cb3      	adds	r3, r6, #2
    3a28:	1c72      	adds	r2, r6, #1
    3a2a:	f10d 010f 	add.w	r1, sp, #15
    3a2e:	4620      	mov	r0, r4
    3a30:	f7ff fcda 	bl	33e8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3a34:	4a20      	ldr	r2, [pc, #128]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a36:	f104 0108 	add.w	r1, r4, #8
    3a3a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3a3e:	f043 0303 	orr.w	r3, r3, #3
    3a42:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    3a46:	b395      	cbz	r5, 3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
        if (pin_is_input(pin))
    3a48:	4620      	mov	r0, r4
    3a4a:	f003 fca7 	bl	739c <pin_is_input>
    3a4e:	bb80      	cbnz	r0, 3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
        uint32_t ch = p_task_config->task_ch;
    3a50:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    3a52:	4b1a      	ldr	r3, [pc, #104]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a54:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    3a58:	2100      	movs	r1, #0
    3a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
    3a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3a62:	4a15      	ldr	r2, [pc, #84]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a64:	f104 0108 	add.w	r1, r4, #8
    3a68:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3a6c:	f023 0320 	bic.w	r3, r3, #32
    3a70:	04db      	lsls	r3, r3, #19
    3a72:	0cdb      	lsrs	r3, r3, #19
    3a74:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3a78:	786b      	ldrb	r3, [r5, #1]
    3a7a:	b923      	cbnz	r3, 3a86 <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
    3a7c:	4810      	ldr	r0, [pc, #64]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
}
    3a7e:	b004      	add	sp, #16
    3a80:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3a82:	4810      	ldr	r0, [pc, #64]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3a84:	e7fb      	b.n	3a7e <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
    3a86:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3a88:	9200      	str	r2, [sp, #0]
    3a8a:	4622      	mov	r2, r4
    3a8c:	4631      	mov	r1, r6
    3a8e:	480b      	ldr	r0, [pc, #44]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a90:	f003 fc46 	bl	7320 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3a94:	4a08      	ldr	r2, [pc, #32]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a96:	3408      	adds	r4, #8
    3a98:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    3a9c:	0376      	lsls	r6, r6, #13
    3a9e:	b2b6      	uxth	r6, r6
    3aa0:	4333      	orrs	r3, r6
    3aa2:	f043 0320 	orr.w	r3, r3, #32
    3aa6:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    3aaa:	4805      	ldr	r0, [pc, #20]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3aac:	e7e7      	b.n	3a7e <nrfx_gpiote_output_configure+0x8e>
    3aae:	4804      	ldr	r0, [pc, #16]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3ab0:	e7e5      	b.n	3a7e <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
    3ab2:	4804      	ldr	r0, [pc, #16]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3ab4:	e7e3      	b.n	3a7e <nrfx_gpiote_output_configure+0x8e>
    3ab6:	bf00      	nop
    3ab8:	2000009c 	.word	0x2000009c
    3abc:	5000d000 	.word	0x5000d000
    3ac0:	0bad0000 	.word	0x0bad0000
    3ac4:	0bad0004 	.word	0x0bad0004

00003ac8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3ac8:	4b01      	ldr	r3, [pc, #4]	; (3ad0 <nrfx_gpiote_global_callback_set+0x8>)
    3aca:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    3acc:	60d9      	str	r1, [r3, #12]
}
    3ace:	4770      	bx	lr
    3ad0:	2000009c 	.word	0x2000009c

00003ad4 <nrfx_gpiote_channel_get>:
{
    3ad4:	b538      	push	{r3, r4, r5, lr}
    3ad6:	4604      	mov	r4, r0
    3ad8:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    3ada:	f7ff fd21 	bl	3520 <pin_in_use_by_te>
    3ade:	b140      	cbz	r0, 3af2 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3ae0:	f104 0008 	add.w	r0, r4, #8
    3ae4:	4b04      	ldr	r3, [pc, #16]	; (3af8 <nrfx_gpiote_channel_get+0x24>)
    3ae6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    3aea:	0b5b      	lsrs	r3, r3, #13
    3aec:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    3aee:	4803      	ldr	r0, [pc, #12]	; (3afc <nrfx_gpiote_channel_get+0x28>)
}
    3af0:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3af2:	4803      	ldr	r0, [pc, #12]	; (3b00 <nrfx_gpiote_channel_get+0x2c>)
    3af4:	e7fc      	b.n	3af0 <nrfx_gpiote_channel_get+0x1c>
    3af6:	bf00      	nop
    3af8:	2000009c 	.word	0x2000009c
    3afc:	0bad0000 	.word	0x0bad0000
    3b00:	0bad0004 	.word	0x0bad0004

00003b04 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3b04:	4b0f      	ldr	r3, [pc, #60]	; (3b44 <nrfx_gpiote_init+0x40>)
    3b06:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3b0a:	b10b      	cbz	r3, 3b10 <nrfx_gpiote_init+0xc>
        return err_code;
    3b0c:	480e      	ldr	r0, [pc, #56]	; (3b48 <nrfx_gpiote_init+0x44>)
}
    3b0e:	4770      	bx	lr
{
    3b10:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3b12:	4c0e      	ldr	r4, [pc, #56]	; (3b4c <nrfx_gpiote_init+0x48>)
    3b14:	2260      	movs	r2, #96	; 0x60
    3b16:	2100      	movs	r1, #0
    3b18:	4620      	mov	r0, r4
    3b1a:	f002 fbfb 	bl	6314 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3b1e:	200d      	movs	r0, #13
    3b20:	f002 fae2 	bl	60e8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3b24:	4b0a      	ldr	r3, [pc, #40]	; (3b50 <nrfx_gpiote_init+0x4c>)
    3b26:	2200      	movs	r2, #0
    3b28:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3b2c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3b30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3b34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3b38:	2301      	movs	r3, #1
    3b3a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3b3e:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
    3b40:	4804      	ldr	r0, [pc, #16]	; (3b54 <nrfx_gpiote_init+0x50>)
}
    3b42:	bd10      	pop	{r4, pc}
    3b44:	2000009c 	.word	0x2000009c
    3b48:	0bad0005 	.word	0x0bad0005
    3b4c:	200000ac 	.word	0x200000ac
    3b50:	5000d000 	.word	0x5000d000
    3b54:	0bad0000 	.word	0x0bad0000

00003b58 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3b58:	4b03      	ldr	r3, [pc, #12]	; (3b68 <nrfx_gpiote_is_init+0x10>)
    3b5a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3b5e:	3800      	subs	r0, #0
    3b60:	bf18      	it	ne
    3b62:	2001      	movne	r0, #1
    3b64:	4770      	bx	lr
    3b66:	bf00      	nop
    3b68:	2000009c 	.word	0x2000009c

00003b6c <nrfx_gpiote_channel_free>:
{
    3b6c:	b508      	push	{r3, lr}
    3b6e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3b70:	4801      	ldr	r0, [pc, #4]	; (3b78 <nrfx_gpiote_channel_free+0xc>)
    3b72:	f7ff fb9d 	bl	32b0 <nrfx_flag32_free>
}
    3b76:	bd08      	pop	{r3, pc}
    3b78:	2000010c 	.word	0x2000010c

00003b7c <nrfx_gpiote_channel_alloc>:
{
    3b7c:	b508      	push	{r3, lr}
    3b7e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3b80:	4801      	ldr	r0, [pc, #4]	; (3b88 <nrfx_gpiote_channel_alloc+0xc>)
    3b82:	f7ff fb71 	bl	3268 <nrfx_flag32_alloc>
}
    3b86:	bd08      	pop	{r3, pc}
    3b88:	2000010c 	.word	0x2000010c

00003b8c <nrfx_gpiote_trigger_enable>:
{
    3b8c:	b538      	push	{r3, r4, r5, lr}
    3b8e:	4604      	mov	r4, r0
    3b90:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3b92:	f7ff fcc5 	bl	3520 <pin_in_use_by_te>
    3b96:	b300      	cbz	r0, 3bda <nrfx_gpiote_trigger_enable+0x4e>
    3b98:	4620      	mov	r0, r4
    3b9a:	f003 fbff 	bl	739c <pin_is_input>
    3b9e:	b1e0      	cbz	r0, 3bda <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    3ba0:	4620      	mov	r0, r4
    3ba2:	f7ff fcdd 	bl	3560 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3ba6:	0083      	lsls	r3, r0, #2
    3ba8:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    3bac:	b29b      	uxth	r3, r3
    3bae:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3bb2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bb6:	2200      	movs	r2, #0
    3bb8:	601a      	str	r2, [r3, #0]
    3bba:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3bbc:	4a0b      	ldr	r2, [pc, #44]	; (3bec <nrfx_gpiote_trigger_enable+0x60>)
    3bbe:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    3bc2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    3bc6:	f043 0301 	orr.w	r3, r3, #1
    3bca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    3bce:	b15d      	cbz	r5, 3be8 <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3bd0:	2301      	movs	r3, #1
    3bd2:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3bd4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3bd8:	e006      	b.n	3be8 <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3bda:	4620      	mov	r0, r4
    3bdc:	f7ff fcf8 	bl	35d0 <get_initial_sense>
    3be0:	4601      	mov	r1, r0
    3be2:	4620      	mov	r0, r4
    3be4:	f003 fbbb 	bl	735e <nrf_gpio_cfg_sense_set>
}
    3be8:	bd38      	pop	{r3, r4, r5, pc}
    3bea:	bf00      	nop
    3bec:	5000d000 	.word	0x5000d000

00003bf0 <nrfx_gpiote_trigger_disable>:
{
    3bf0:	b510      	push	{r4, lr}
    3bf2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3bf4:	f7ff fc94 	bl	3520 <pin_in_use_by_te>
    3bf8:	b1a0      	cbz	r0, 3c24 <nrfx_gpiote_trigger_disable+0x34>
    3bfa:	4620      	mov	r0, r4
    3bfc:	f003 fbce 	bl	739c <pin_is_input>
    3c00:	b180      	cbz	r0, 3c24 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    3c02:	4620      	mov	r0, r4
    3c04:	f7ff fcac 	bl	3560 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3c08:	2201      	movs	r2, #1
    3c0a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    3c0c:	4b08      	ldr	r3, [pc, #32]	; (3c30 <nrfx_gpiote_trigger_disable+0x40>)
    3c0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3c12:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3c16:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    3c1a:	f022 0203 	bic.w	r2, r2, #3
    3c1e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    3c22:	e003      	b.n	3c2c <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3c24:	2100      	movs	r1, #0
    3c26:	4620      	mov	r0, r4
    3c28:	f003 fb99 	bl	735e <nrf_gpio_cfg_sense_set>
}
    3c2c:	bd10      	pop	{r4, pc}
    3c2e:	bf00      	nop
    3c30:	5000d000 	.word	0x5000d000

00003c34 <nrfx_gpiote_pin_uninit>:
{
    3c34:	b510      	push	{r4, lr}
    3c36:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3c38:	f7ff fc68 	bl	350c <pin_in_use>
    3c3c:	b908      	cbnz	r0, 3c42 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    3c3e:	4806      	ldr	r0, [pc, #24]	; (3c58 <nrfx_gpiote_pin_uninit+0x24>)
}
    3c40:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    3c42:	4620      	mov	r0, r4
    3c44:	f7ff ffd4 	bl	3bf0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3c48:	4620      	mov	r0, r4
    3c4a:	f7ff fd71 	bl	3730 <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
    3c4e:	4620      	mov	r0, r4
    3c50:	f7ff fc26 	bl	34a0 <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
    3c54:	4801      	ldr	r0, [pc, #4]	; (3c5c <nrfx_gpiote_pin_uninit+0x28>)
    3c56:	e7f3      	b.n	3c40 <nrfx_gpiote_pin_uninit+0xc>
    3c58:	0bad0004 	.word	0x0bad0004
    3c5c:	0bad0000 	.word	0x0bad0000

00003c60 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3c60:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3c62:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    3c64:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3c68:	2100      	movs	r1, #0
    uint32_t status = 0;
    3c6a:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3c6c:	e003      	b.n	3c76 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    3c6e:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    3c70:	3304      	adds	r3, #4
    3c72:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3c74:	3101      	adds	r1, #1
    3c76:	2907      	cmp	r1, #7
    3c78:	d814      	bhi.n	3ca4 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3c7a:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    3c7e:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3c82:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3c84:	2a00      	cmp	r2, #0
    3c86:	d0f2      	beq.n	3c6e <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    3c88:	4a0c      	ldr	r2, [pc, #48]	; (3cbc <nrfx_gpiote_irq_handler+0x5c>)
    3c8a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3c8e:	4210      	tst	r0, r2
    3c90:	d0ed      	beq.n	3c6e <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    3c92:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    3c96:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3c9a:	2500      	movs	r5, #0
    3c9c:	6015      	str	r5, [r2, #0]
    3c9e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    3ca0:	4304      	orrs	r4, r0
    3ca2:	e7e4      	b.n	3c6e <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3ca4:	4b05      	ldr	r3, [pc, #20]	; (3cbc <nrfx_gpiote_irq_handler+0x5c>)
    3ca6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3caa:	b91b      	cbnz	r3, 3cb4 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    3cac:	4620      	mov	r0, r4
    3cae:	f7ff fde7 	bl	3880 <gpiote_evt_handle>
}
    3cb2:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    3cb4:	f7ff fd90 	bl	37d8 <port_event_handle>
    3cb8:	e7f8      	b.n	3cac <nrfx_gpiote_irq_handler+0x4c>
    3cba:	bf00      	nop
    3cbc:	5000d000 	.word	0x5000d000

00003cc0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    3cc0:	4b03      	ldr	r3, [pc, #12]	; (3cd0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    3cc2:	e000      	b.n	3cc6 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    3cc4:	3318      	adds	r3, #24
	while (dev < __device_end) {
    3cc6:	4a03      	ldr	r2, [pc, #12]	; (3cd4 <z_device_state_init+0x14>)
    3cc8:	4293      	cmp	r3, r2
    3cca:	d3fb      	bcc.n	3cc4 <z_device_state_init+0x4>
	}
}
    3ccc:	4770      	bx	lr
    3cce:	bf00      	nop
    3cd0:	00007b20 	.word	0x00007b20
    3cd4:	00007b98 	.word	0x00007b98

00003cd8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    3cd8:	b570      	push	{r4, r5, r6, lr}
    3cda:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3cdc:	4b11      	ldr	r3, [pc, #68]	; (3d24 <z_sys_init_run_level+0x4c>)
    3cde:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3ce2:	e009      	b.n	3cf8 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3ce4:	4240      	negs	r0, r0
    3ce6:	e017      	b.n	3d18 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    3ce8:	68eb      	ldr	r3, [r5, #12]
    3cea:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3cec:	68ea      	ldr	r2, [r5, #12]
    3cee:	7853      	ldrb	r3, [r2, #1]
    3cf0:	f043 0301 	orr.w	r3, r3, #1
    3cf4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3cf6:	3408      	adds	r4, #8
    3cf8:	1c73      	adds	r3, r6, #1
    3cfa:	4a0a      	ldr	r2, [pc, #40]	; (3d24 <z_sys_init_run_level+0x4c>)
    3cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d00:	42a3      	cmp	r3, r4
    3d02:	d90d      	bls.n	3d20 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3d04:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    3d06:	6823      	ldr	r3, [r4, #0]
    3d08:	4628      	mov	r0, r5
    3d0a:	4798      	blx	r3
		if (dev != NULL) {
    3d0c:	2d00      	cmp	r5, #0
    3d0e:	d0f2      	beq.n	3cf6 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3d10:	2800      	cmp	r0, #0
    3d12:	d0eb      	beq.n	3cec <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3d14:	2800      	cmp	r0, #0
    3d16:	dbe5      	blt.n	3ce4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    3d18:	28ff      	cmp	r0, #255	; 0xff
    3d1a:	dde5      	ble.n	3ce8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3d1c:	20ff      	movs	r0, #255	; 0xff
    3d1e:	e7e3      	b.n	3ce8 <z_sys_init_run_level+0x10>
		}
	}
}
    3d20:	bd70      	pop	{r4, r5, r6, pc}
    3d22:	bf00      	nop
    3d24:	000082f8 	.word	0x000082f8

00003d28 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3d28:	b510      	push	{r4, lr}
    3d2a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    3d2c:	23b0      	movs	r3, #176	; 0xb0
    3d2e:	4c11      	ldr	r4, [pc, #68]	; (3d74 <init_idle_thread+0x4c>)
    3d30:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    3d34:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3d38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3d3c:	4b0e      	ldr	r3, [pc, #56]	; (3d78 <init_idle_thread+0x50>)
    3d3e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
    3d42:	4a0e      	ldr	r2, [pc, #56]	; (3d7c <init_idle_thread+0x54>)
    3d44:	9205      	str	r2, [sp, #20]
    3d46:	2201      	movs	r2, #1
    3d48:	9204      	str	r2, [sp, #16]
    3d4a:	220f      	movs	r2, #15
    3d4c:	9203      	str	r2, [sp, #12]
    3d4e:	2200      	movs	r2, #0
    3d50:	9202      	str	r2, [sp, #8]
    3d52:	9201      	str	r2, [sp, #4]
    3d54:	9300      	str	r3, [sp, #0]
    3d56:	4b0a      	ldr	r3, [pc, #40]	; (3d80 <init_idle_thread+0x58>)
    3d58:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3d5c:	4909      	ldr	r1, [pc, #36]	; (3d84 <init_idle_thread+0x5c>)
    3d5e:	eb01 118c 	add.w	r1, r1, ip, lsl #6
    3d62:	4620      	mov	r0, r4
    3d64:	f000 f95c 	bl	4020 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3d68:	7b63      	ldrb	r3, [r4, #13]
    3d6a:	f023 0304 	bic.w	r3, r3, #4
    3d6e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3d70:	b006      	add	sp, #24
    3d72:	bd10      	pop	{r4, pc}
    3d74:	20000258 	.word	0x20000258
    3d78:	20000b98 	.word	0x20000b98
    3d7c:	000082e8 	.word	0x000082e8
    3d80:	0000417d 	.word	0x0000417d
    3d84:	200015c0 	.word	0x200015c0

00003d88 <bg_thread_main>:
{
    3d88:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3d8a:	4b0a      	ldr	r3, [pc, #40]	; (3db4 <bg_thread_main+0x2c>)
    3d8c:	2201      	movs	r2, #1
    3d8e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3d90:	2003      	movs	r0, #3
    3d92:	f7ff ffa1 	bl	3cd8 <z_sys_init_run_level>
	boot_banner();
    3d96:	f001 fa93 	bl	52c0 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    3d9a:	2004      	movs	r0, #4
    3d9c:	f7ff ff9c 	bl	3cd8 <z_sys_init_run_level>
	z_init_static_threads();
    3da0:	f000 f9a2 	bl	40e8 <z_init_static_threads>
	(void)main();
    3da4:	f001 fc52 	bl	564c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3da8:	4a03      	ldr	r2, [pc, #12]	; (3db8 <bg_thread_main+0x30>)
    3daa:	7b13      	ldrb	r3, [r2, #12]
    3dac:	f023 0301 	bic.w	r3, r3, #1
    3db0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3db2:	bd08      	pop	{r3, pc}
    3db4:	20000dbf 	.word	0x20000dbf
    3db8:	20000308 	.word	0x20000308

00003dbc <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    3dbc:	b508      	push	{r3, lr}
    3dbe:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3dc0:	4a01      	ldr	r2, [pc, #4]	; (3dc8 <switch_to_main_thread+0xc>)
    3dc2:	4802      	ldr	r0, [pc, #8]	; (3dcc <switch_to_main_thread+0x10>)
    3dc4:	f7fd fc98 	bl	16f8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3dc8:	00003d89 	.word	0x00003d89
    3dcc:	20000308 	.word	0x20000308

00003dd0 <z_bss_zero>:
{
    3dd0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3dd2:	4803      	ldr	r0, [pc, #12]	; (3de0 <z_bss_zero+0x10>)
    3dd4:	4a03      	ldr	r2, [pc, #12]	; (3de4 <z_bss_zero+0x14>)
    3dd6:	1a12      	subs	r2, r2, r0
    3dd8:	2100      	movs	r1, #0
    3dda:	f003 fb2a 	bl	7432 <z_early_memset>
}
    3dde:	bd08      	pop	{r3, pc}
    3de0:	20000208 	.word	0x20000208
    3de4:	20000dc0 	.word	0x20000dc0

00003de8 <z_init_cpu>:
{
    3de8:	b510      	push	{r4, lr}
    3dea:	4604      	mov	r4, r0
	init_idle_thread(id);
    3dec:	f7ff ff9c 	bl	3d28 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3df0:	23b0      	movs	r3, #176	; 0xb0
    3df2:	490a      	ldr	r1, [pc, #40]	; (3e1c <z_init_cpu+0x34>)
    3df4:	fb03 1104 	mla	r1, r3, r4, r1
    3df8:	4a09      	ldr	r2, [pc, #36]	; (3e20 <z_init_cpu+0x38>)
    3dfa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3dfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3e02:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    3e04:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3e06:	4b07      	ldr	r3, [pc, #28]	; (3e24 <z_init_cpu+0x3c>)
    3e08:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    3e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    3e10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3e14:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    3e18:	6053      	str	r3, [r2, #4]
}
    3e1a:	bd10      	pop	{r4, pc}
    3e1c:	20000258 	.word	0x20000258
    3e20:	20000b98 	.word	0x20000b98
    3e24:	20000dc0 	.word	0x20000dc0

00003e28 <prepare_multithreading>:
{
    3e28:	b570      	push	{r4, r5, r6, lr}
    3e2a:	b086      	sub	sp, #24
	z_sched_init();
    3e2c:	f000 ffc0 	bl	4db0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    3e30:	4d10      	ldr	r5, [pc, #64]	; (3e74 <prepare_multithreading+0x4c>)
    3e32:	4b11      	ldr	r3, [pc, #68]	; (3e78 <prepare_multithreading+0x50>)
    3e34:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3e36:	4b11      	ldr	r3, [pc, #68]	; (3e7c <prepare_multithreading+0x54>)
    3e38:	9305      	str	r3, [sp, #20]
    3e3a:	2301      	movs	r3, #1
    3e3c:	9304      	str	r3, [sp, #16]
    3e3e:	2400      	movs	r4, #0
    3e40:	9403      	str	r4, [sp, #12]
    3e42:	9402      	str	r4, [sp, #8]
    3e44:	9401      	str	r4, [sp, #4]
    3e46:	9400      	str	r4, [sp, #0]
    3e48:	4b0d      	ldr	r3, [pc, #52]	; (3e80 <prepare_multithreading+0x58>)
    3e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3e4e:	490d      	ldr	r1, [pc, #52]	; (3e84 <prepare_multithreading+0x5c>)
    3e50:	4628      	mov	r0, r5
    3e52:	f000 f8e5 	bl	4020 <z_setup_new_thread>
    3e56:	4606      	mov	r6, r0
    3e58:	7b6b      	ldrb	r3, [r5, #13]
    3e5a:	f023 0304 	bic.w	r3, r3, #4
    3e5e:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    3e60:	4628      	mov	r0, r5
    3e62:	f003 fcaf 	bl	77c4 <z_ready_thread>
	z_init_cpu(0);
    3e66:	4620      	mov	r0, r4
    3e68:	f7ff ffbe 	bl	3de8 <z_init_cpu>
}
    3e6c:	4630      	mov	r0, r6
    3e6e:	b006      	add	sp, #24
    3e70:	bd70      	pop	{r4, r5, r6, pc}
    3e72:	bf00      	nop
    3e74:	20000308 	.word	0x20000308
    3e78:	20000b98 	.word	0x20000b98
    3e7c:	000082f0 	.word	0x000082f0
    3e80:	00003d89 	.word	0x00003d89
    3e84:	20001700 	.word	0x20001700

00003e88 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3e88:	b500      	push	{lr}
    3e8a:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3e8c:	2000      	movs	r0, #0
    3e8e:	f7ff ff23 	bl	3cd8 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3e92:	4b1d      	ldr	r3, [pc, #116]	; (3f08 <z_cstart+0x80>)
	uint32_t msp =
    3e94:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3e98:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3e9c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ea0:	4c1a      	ldr	r4, [pc, #104]	; (3f0c <z_cstart+0x84>)
    3ea2:	23e0      	movs	r3, #224	; 0xe0
    3ea4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3ea8:	2500      	movs	r5, #0
    3eaa:	77e5      	strb	r5, [r4, #31]
    3eac:	7625      	strb	r5, [r4, #24]
    3eae:	7665      	strb	r5, [r4, #25]
    3eb0:	76a5      	strb	r5, [r4, #26]
    3eb2:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3eb8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3ebc:	6263      	str	r3, [r4, #36]	; 0x24
    3ebe:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3ec2:	f7fd fd79 	bl	19b8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3ec6:	f7fd fb1f 	bl	1508 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3eca:	f04f 33ff 	mov.w	r3, #4294967295
    3ece:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3ed2:	f7fd ffa7 	bl	1e24 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3ed6:	f7fd fe3d 	bl	1b54 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    3eda:	2401      	movs	r4, #1
    3edc:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3ee0:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3ee4:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    3ee6:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    3ee8:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    3eea:	4b09      	ldr	r3, [pc, #36]	; (3f10 <z_cstart+0x88>)
    3eec:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3ef0:	f7ff fee6 	bl	3cc0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    3ef4:	4620      	mov	r0, r4
    3ef6:	f7ff feef 	bl	3cd8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3efa:	2002      	movs	r0, #2
    3efc:	f7ff feec 	bl	3cd8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3f00:	f7ff ff92 	bl	3e28 <prepare_multithreading>
    3f04:	f7ff ff5a 	bl	3dbc <switch_to_main_thread>
    3f08:	20000dc0 	.word	0x20000dc0
    3f0c:	e000ed00 	.word	0xe000ed00
    3f10:	20000b98 	.word	0x20000b98

00003f14 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    3f14:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3f16:	4c06      	ldr	r4, [pc, #24]	; (3f30 <init_mem_slab_module+0x1c>)
	int rc = 0;
    3f18:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3f1a:	e000      	b.n	3f1e <init_mem_slab_module+0xa>
    3f1c:	341c      	adds	r4, #28
    3f1e:	4b05      	ldr	r3, [pc, #20]	; (3f34 <init_mem_slab_module+0x20>)
    3f20:	429c      	cmp	r4, r3
    3f22:	d204      	bcs.n	3f2e <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    3f24:	4620      	mov	r0, r4
    3f26:	f003 fa8c 	bl	7442 <create_free_list>
		if (rc < 0) {
    3f2a:	2800      	cmp	r0, #0
    3f2c:	daf6      	bge.n	3f1c <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    3f2e:	bd10      	pop	{r4, pc}
    3f30:	2000018b 	.word	0x2000018b
    3f34:	2000018b 	.word	0x2000018b

00003f38 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3f38:	b530      	push	{r4, r5, lr}
    3f3a:	b083      	sub	sp, #12
    3f3c:	460d      	mov	r5, r1
	__asm__ volatile(
    3f3e:	f04f 0120 	mov.w	r1, #32
    3f42:	f3ef 8c11 	mrs	ip, BASEPRI
    3f46:	f381 8812 	msr	BASEPRI_MAX, r1
    3f4a:	f3bf 8f6f 	isb	sy
    3f4e:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3f50:	6944      	ldr	r4, [r0, #20]
    3f52:	b164      	cbz	r4, 3f6e <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    3f54:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    3f56:	6823      	ldr	r3, [r4, #0]
    3f58:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3f5a:	6983      	ldr	r3, [r0, #24]
    3f5c:	3301      	adds	r3, #1
    3f5e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3f60:	2000      	movs	r0, #0
	__asm__ volatile(
    3f62:	f381 8811 	msr	BASEPRI, r1
    3f66:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    3f6a:	b003      	add	sp, #12
    3f6c:	bd30      	pop	{r4, r5, pc}
    3f6e:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3f72:	ea53 0402 	orrs.w	r4, r3, r2
    3f76:	d104      	bne.n	3f82 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    3f78:	2300      	movs	r3, #0
    3f7a:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3f7c:	f06f 000b 	mvn.w	r0, #11
    3f80:	e7ef      	b.n	3f62 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3f82:	9200      	str	r2, [sp, #0]
    3f84:	9301      	str	r3, [sp, #4]
    3f86:	4602      	mov	r2, r0
    3f88:	4670      	mov	r0, lr
    3f8a:	f000 fe0b 	bl	4ba4 <z_pend_curr>
		if (result == 0) {
    3f8e:	2800      	cmp	r0, #0
    3f90:	d1eb      	bne.n	3f6a <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    3f92:	4b02      	ldr	r3, [pc, #8]	; (3f9c <k_mem_slab_alloc+0x64>)
    3f94:	689b      	ldr	r3, [r3, #8]
    3f96:	695b      	ldr	r3, [r3, #20]
    3f98:	602b      	str	r3, [r5, #0]
		return result;
    3f9a:	e7e6      	b.n	3f6a <k_mem_slab_alloc+0x32>
    3f9c:	20000b98 	.word	0x20000b98

00003fa0 <z_thread_monitor_exit>:
	__asm__ volatile(
    3fa0:	f04f 0320 	mov.w	r3, #32
    3fa4:	f3ef 8111 	mrs	r1, BASEPRI
    3fa8:	f383 8812 	msr	BASEPRI_MAX, r3
    3fac:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    3fb0:	4b0a      	ldr	r3, [pc, #40]	; (3fdc <z_thread_monitor_exit+0x3c>)
    3fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fb4:	4283      	cmp	r3, r0
    3fb6:	d104      	bne.n	3fc2 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    3fb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3fba:	4b08      	ldr	r3, [pc, #32]	; (3fdc <z_thread_monitor_exit+0x3c>)
    3fbc:	629a      	str	r2, [r3, #40]	; 0x28
    3fbe:	e007      	b.n	3fd0 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    3fc0:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    3fc2:	b113      	cbz	r3, 3fca <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3fc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    3fc6:	4282      	cmp	r2, r0
    3fc8:	d1fa      	bne.n	3fc0 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    3fca:	b10b      	cbz	r3, 3fd0 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3fcc:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3fce:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    3fd0:	f381 8811 	msr	BASEPRI, r1
    3fd4:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    3fd8:	4770      	bx	lr
    3fda:	bf00      	nop
    3fdc:	20000b98 	.word	0x20000b98

00003fe0 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    3fe0:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    3fe2:	4604      	mov	r4, r0
    3fe4:	b140      	cbz	r0, 3ff8 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    3fe6:	221f      	movs	r2, #31
    3fe8:	f104 0074 	add.w	r0, r4, #116	; 0x74
    3fec:	f002 f936 	bl	625c <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    3ff0:	2000      	movs	r0, #0
    3ff2:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    3ff6:	bd10      	pop	{r4, pc}
		thread = _current;
    3ff8:	4b01      	ldr	r3, [pc, #4]	; (4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>)
    3ffa:	689c      	ldr	r4, [r3, #8]
    3ffc:	e7f3      	b.n	3fe6 <z_impl_k_thread_name_set+0x6>
    3ffe:	bf00      	nop
    4000:	20000b98 	.word	0x20000b98

00004004 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    4004:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4006:	ea53 0102 	orrs.w	r1, r3, r2
    400a:	d102      	bne.n	4012 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    400c:	f003 fa7f 	bl	750e <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    4010:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4012:	4902      	ldr	r1, [pc, #8]	; (401c <schedule_new_thread+0x18>)
    4014:	3018      	adds	r0, #24
    4016:	f001 f847 	bl	50a8 <z_add_timeout>
    401a:	e7f9      	b.n	4010 <schedule_new_thread+0xc>
    401c:	000077fd 	.word	0x000077fd

00004020 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4024:	b085      	sub	sp, #20
    4026:	4604      	mov	r4, r0
    4028:	460f      	mov	r7, r1
    402a:	4615      	mov	r5, r2
    402c:	461e      	mov	r6, r3
    402e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    4032:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    4036:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    403a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    403e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    4042:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    4044:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    4046:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4048:	2204      	movs	r2, #4
    404a:	9911      	ldr	r1, [sp, #68]	; 0x44
    404c:	f003 fa63 	bl	7516 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    4050:	462a      	mov	r2, r5
    4052:	4639      	mov	r1, r7
    4054:	4620      	mov	r0, r4
    4056:	f003 fa48 	bl	74ea <setup_thread_stack>
    405a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    405c:	f8cd 8008 	str.w	r8, [sp, #8]
    4060:	f8cd 9004 	str.w	r9, [sp, #4]
    4064:	f8cd a000 	str.w	sl, [sp]
    4068:	4633      	mov	r3, r6
    406a:	4602      	mov	r2, r0
    406c:	4639      	mov	r1, r7
    406e:	4620      	mov	r0, r4
    4070:	f7fd fb20 	bl	16b4 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    4074:	2300      	movs	r3, #0
    4076:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    4078:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    407a:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    407e:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    4082:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    4086:	f04f 0320 	mov.w	r3, #32
    408a:	f3ef 8211 	mrs	r2, BASEPRI
    408e:	f383 8812 	msr	BASEPRI_MAX, r3
    4092:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    4096:	4b13      	ldr	r3, [pc, #76]	; (40e4 <z_setup_new_thread+0xc4>)
    4098:	6a99      	ldr	r1, [r3, #40]	; 0x28
    409a:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    409c:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    409e:	f382 8811 	msr	BASEPRI, r2
    40a2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    40a6:	f1bb 0f00 	cmp.w	fp, #0
    40aa:	d013      	beq.n	40d4 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    40ac:	221f      	movs	r2, #31
    40ae:	4659      	mov	r1, fp
    40b0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    40b4:	f002 f8d2 	bl	625c <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    40b8:	2300      	movs	r3, #0
    40ba:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    40be:	4b09      	ldr	r3, [pc, #36]	; (40e4 <z_setup_new_thread+0xc4>)
    40c0:	689b      	ldr	r3, [r3, #8]
    40c2:	b15b      	cbz	r3, 40dc <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    40c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    40c8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    40cc:	4628      	mov	r0, r5
    40ce:	b005      	add	sp, #20
    40d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    40d4:	2300      	movs	r3, #0
    40d6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    40da:	e7f0      	b.n	40be <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    40dc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    40e0:	e7f4      	b.n	40cc <z_setup_new_thread+0xac>
    40e2:	bf00      	nop
    40e4:	20000b98 	.word	0x20000b98

000040e8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    40e8:	b530      	push	{r4, r5, lr}
    40ea:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    40ec:	4c21      	ldr	r4, [pc, #132]	; (4174 <z_init_static_threads+0x8c>)
    40ee:	e014      	b.n	411a <z_init_static_threads+0x32>
		z_setup_new_thread(
    40f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    40f2:	9305      	str	r3, [sp, #20]
    40f4:	6a23      	ldr	r3, [r4, #32]
    40f6:	9304      	str	r3, [sp, #16]
    40f8:	69e3      	ldr	r3, [r4, #28]
    40fa:	9303      	str	r3, [sp, #12]
    40fc:	69a3      	ldr	r3, [r4, #24]
    40fe:	9302      	str	r3, [sp, #8]
    4100:	6963      	ldr	r3, [r4, #20]
    4102:	9301      	str	r3, [sp, #4]
    4104:	6923      	ldr	r3, [r4, #16]
    4106:	9300      	str	r3, [sp, #0]
    4108:	68e3      	ldr	r3, [r4, #12]
    410a:	68a2      	ldr	r2, [r4, #8]
    410c:	6861      	ldr	r1, [r4, #4]
    410e:	6820      	ldr	r0, [r4, #0]
    4110:	f7ff ff86 	bl	4020 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    4114:	6823      	ldr	r3, [r4, #0]
    4116:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4118:	3430      	adds	r4, #48	; 0x30
    411a:	4b17      	ldr	r3, [pc, #92]	; (4178 <z_init_static_threads+0x90>)
    411c:	429c      	cmp	r4, r3
    411e:	d3e7      	bcc.n	40f0 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    4120:	f000 fbf2 	bl	4908 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4124:	4c13      	ldr	r4, [pc, #76]	; (4174 <z_init_static_threads+0x8c>)
    4126:	e000      	b.n	412a <z_init_static_threads+0x42>
    4128:	3430      	adds	r4, #48	; 0x30
    412a:	4b13      	ldr	r3, [pc, #76]	; (4178 <z_init_static_threads+0x90>)
    412c:	429c      	cmp	r4, r3
    412e:	d21c      	bcs.n	416a <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4130:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4132:	f1b0 3fff 	cmp.w	r0, #4294967295
    4136:	d0f7      	beq.n	4128 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    4138:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    413a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    413e:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    4140:	03c9      	lsls	r1, r1, #15
    4142:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4146:	03c0      	lsls	r0, r0, #15
    4148:	f240 33e7 	movw	r3, #999	; 0x3e7
    414c:	18c0      	adds	r0, r0, r3
    414e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4152:	f04f 0300 	mov.w	r3, #0
    4156:	f141 0100 	adc.w	r1, r1, #0
    415a:	f7fb fffb 	bl	154 <__aeabi_uldivmod>
    415e:	4602      	mov	r2, r0
    4160:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    4162:	4628      	mov	r0, r5
    4164:	f7ff ff4e 	bl	4004 <schedule_new_thread>
    4168:	e7de      	b.n	4128 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    416a:	f000 fdcf 	bl	4d0c <k_sched_unlock>
}
    416e:	b007      	add	sp, #28
    4170:	bd30      	pop	{r4, r5, pc}
    4172:	bf00      	nop
    4174:	00007dc0 	.word	0x00007dc0
    4178:	00007dc0 	.word	0x00007dc0

0000417c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    417c:	b508      	push	{r3, lr}
    417e:	e001      	b.n	4184 <idle+0x8>
	arch_cpu_idle();
    4180:	f7fd f9c8 	bl	1514 <arch_cpu_idle>
	__asm__ volatile(
    4184:	f04f 0220 	mov.w	r2, #32
    4188:	f3ef 8311 	mrs	r3, BASEPRI
    418c:	f382 8812 	msr	BASEPRI_MAX, r2
    4190:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4194:	f003 fc36 	bl	7a04 <z_get_next_timeout_expiry>
    4198:	4b05      	ldr	r3, [pc, #20]	; (41b0 <idle+0x34>)
    419a:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    419c:	4b05      	ldr	r3, [pc, #20]	; (41b4 <idle+0x38>)
    419e:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    41a0:	2b00      	cmp	r3, #0
    41a2:	d0ed      	beq.n	4180 <idle+0x4>
    41a4:	f7fc ffb2 	bl	110c <pm_system_suspend>
    41a8:	2800      	cmp	r0, #0
    41aa:	d1eb      	bne.n	4184 <idle+0x8>
    41ac:	e7e8      	b.n	4180 <idle+0x4>
    41ae:	bf00      	nop
    41b0:	20000b98 	.word	0x20000b98
    41b4:	20000dbf 	.word	0x20000dbf

000041b8 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
    41b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    41bc:	b083      	sub	sp, #12
    41be:	4604      	mov	r4, r0
    41c0:	460d      	mov	r5, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
    41c2:	f100 0808 	add.w	r8, r0, #8
    41c6:	f04f 0120 	mov.w	r1, #32
    41ca:	f3ef 8611 	mrs	r6, BASEPRI
    41ce:	f381 8812 	msr	BASEPRI_MAX, r1
    41d2:	f3bf 8f6f 	isb	sy
    41d6:	4637      	mov	r7, r6

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
    41d8:	6a00      	ldr	r0, [r0, #32]
    41da:	68e1      	ldr	r1, [r4, #12]
    41dc:	4288      	cmp	r0, r1
    41de:	d30b      	bcc.n	41f8 <z_impl_k_msgq_put+0x40>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    41e0:	ea53 0102 	orrs.w	r1, r3, r2
    41e4:	d132      	bne.n	424c <z_impl_k_msgq_put+0x94>
		/* don't wait for message space to become available */
		result = -ENOMSG;
    41e6:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
    41ea:	f387 8811 	msr	BASEPRI, r7
    41ee:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    41f2:	b003      	add	sp, #12
    41f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    41f8:	4620      	mov	r0, r4
    41fa:	f003 fb7a 	bl	78f2 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    41fe:	4681      	mov	r9, r0
    4200:	b180      	cbz	r0, 4224 <z_impl_k_msgq_put+0x6c>
			(void)memcpy(pending_thread->base.swap_data, data,
    4202:	68a2      	ldr	r2, [r4, #8]
    4204:	4629      	mov	r1, r5
    4206:	6940      	ldr	r0, [r0, #20]
    4208:	f002 f855 	bl	62b6 <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    420c:	2400      	movs	r4, #0
    420e:	f8c9 40ac 	str.w	r4, [r9, #172]	; 0xac
			z_ready_thread(pending_thread);
    4212:	4648      	mov	r0, r9
    4214:	f003 fad6 	bl	77c4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    4218:	4631      	mov	r1, r6
    421a:	4640      	mov	r0, r8
    421c:	f000 fb5e 	bl	48dc <z_reschedule>
			return 0;
    4220:	4620      	mov	r0, r4
    4222:	e7e6      	b.n	41f2 <z_impl_k_msgq_put+0x3a>
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
    4224:	68a2      	ldr	r2, [r4, #8]
    4226:	4629      	mov	r1, r5
    4228:	69e0      	ldr	r0, [r4, #28]
    422a:	f002 f844 	bl	62b6 <memcpy>
			msgq->write_ptr += msgq->msg_size;
    422e:	69e3      	ldr	r3, [r4, #28]
    4230:	68a2      	ldr	r2, [r4, #8]
    4232:	4413      	add	r3, r2
    4234:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    4236:	6962      	ldr	r2, [r4, #20]
    4238:	4293      	cmp	r3, r2
    423a:	d004      	beq.n	4246 <z_impl_k_msgq_put+0x8e>
			msgq->used_msgs++;
    423c:	6a23      	ldr	r3, [r4, #32]
    423e:	3301      	adds	r3, #1
    4240:	6223      	str	r3, [r4, #32]
		result = 0;
    4242:	2000      	movs	r0, #0
    4244:	e7d1      	b.n	41ea <z_impl_k_msgq_put+0x32>
				msgq->write_ptr = msgq->buffer_start;
    4246:	6923      	ldr	r3, [r4, #16]
    4248:	61e3      	str	r3, [r4, #28]
    424a:	e7f7      	b.n	423c <z_impl_k_msgq_put+0x84>
		_current->base.swap_data = (void *) data;
    424c:	4905      	ldr	r1, [pc, #20]	; (4264 <z_impl_k_msgq_put+0xac>)
    424e:	6889      	ldr	r1, [r1, #8]
    4250:	614d      	str	r5, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    4252:	9200      	str	r2, [sp, #0]
    4254:	9301      	str	r3, [sp, #4]
    4256:	4622      	mov	r2, r4
    4258:	4631      	mov	r1, r6
    425a:	4640      	mov	r0, r8
    425c:	f000 fca2 	bl	4ba4 <z_pend_curr>
		return result;
    4260:	e7c7      	b.n	41f2 <z_impl_k_msgq_put+0x3a>
    4262:	bf00      	nop
    4264:	20000b98 	.word	0x20000b98

00004268 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
    4268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    426c:	b082      	sub	sp, #8
    426e:	4604      	mov	r4, r0
    4270:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
    4272:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
    4276:	f04f 0120 	mov.w	r1, #32
    427a:	f3ef 8511 	mrs	r5, BASEPRI
    427e:	f381 8812 	msr	BASEPRI_MAX, r1
    4282:	f3bf 8f6f 	isb	sy
    4286:	462e      	mov	r6, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
    4288:	6a21      	ldr	r1, [r4, #32]
    428a:	b959      	cbnz	r1, 42a4 <z_impl_k_msgq_get+0x3c>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    428c:	ea53 0102 	orrs.w	r1, r3, r2
    4290:	d13e      	bne.n	4310 <z_impl_k_msgq_get+0xa8>
		/* don't wait for a message to become available */
		result = -ENOMSG;
    4292:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
    4296:	f386 8811 	msr	BASEPRI, r6
    429a:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    429e:	b002      	add	sp, #8
    42a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
    42a4:	68a2      	ldr	r2, [r4, #8]
    42a6:	69a1      	ldr	r1, [r4, #24]
    42a8:	f002 f805 	bl	62b6 <memcpy>
		msgq->read_ptr += msgq->msg_size;
    42ac:	69a3      	ldr	r3, [r4, #24]
    42ae:	68a2      	ldr	r2, [r4, #8]
    42b0:	4413      	add	r3, r2
    42b2:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
    42b4:	6962      	ldr	r2, [r4, #20]
    42b6:	4293      	cmp	r3, r2
    42b8:	d009      	beq.n	42ce <z_impl_k_msgq_get+0x66>
		msgq->used_msgs--;
    42ba:	6a23      	ldr	r3, [r4, #32]
    42bc:	3b01      	subs	r3, #1
    42be:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    42c0:	4620      	mov	r0, r4
    42c2:	f003 fb16 	bl	78f2 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    42c6:	4680      	mov	r8, r0
    42c8:	b920      	cbnz	r0, 42d4 <z_impl_k_msgq_get+0x6c>
		result = 0;
    42ca:	2000      	movs	r0, #0
    42cc:	e7e3      	b.n	4296 <z_impl_k_msgq_get+0x2e>
			msgq->read_ptr = msgq->buffer_start;
    42ce:	6923      	ldr	r3, [r4, #16]
    42d0:	61a3      	str	r3, [r4, #24]
    42d2:	e7f2      	b.n	42ba <z_impl_k_msgq_get+0x52>
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
    42d4:	68a2      	ldr	r2, [r4, #8]
    42d6:	6941      	ldr	r1, [r0, #20]
    42d8:	69e0      	ldr	r0, [r4, #28]
    42da:	f001 ffec 	bl	62b6 <memcpy>
			msgq->write_ptr += msgq->msg_size;
    42de:	69e3      	ldr	r3, [r4, #28]
    42e0:	68a2      	ldr	r2, [r4, #8]
    42e2:	4413      	add	r3, r2
    42e4:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    42e6:	6962      	ldr	r2, [r4, #20]
    42e8:	4293      	cmp	r3, r2
    42ea:	d00e      	beq.n	430a <z_impl_k_msgq_get+0xa2>
			msgq->used_msgs++;
    42ec:	6a23      	ldr	r3, [r4, #32]
    42ee:	3301      	adds	r3, #1
    42f0:	6223      	str	r3, [r4, #32]
    42f2:	2400      	movs	r4, #0
    42f4:	f8c8 40ac 	str.w	r4, [r8, #172]	; 0xac
			z_ready_thread(pending_thread);
    42f8:	4640      	mov	r0, r8
    42fa:	f003 fa63 	bl	77c4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    42fe:	4629      	mov	r1, r5
    4300:	4638      	mov	r0, r7
    4302:	f000 faeb 	bl	48dc <z_reschedule>
			return 0;
    4306:	4620      	mov	r0, r4
    4308:	e7c9      	b.n	429e <z_impl_k_msgq_get+0x36>
				msgq->write_ptr = msgq->buffer_start;
    430a:	6923      	ldr	r3, [r4, #16]
    430c:	61e3      	str	r3, [r4, #28]
    430e:	e7ed      	b.n	42ec <z_impl_k_msgq_get+0x84>
		_current->base.swap_data = data;
    4310:	4905      	ldr	r1, [pc, #20]	; (4328 <z_impl_k_msgq_get+0xc0>)
    4312:	6889      	ldr	r1, [r1, #8]
    4314:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    4316:	9200      	str	r2, [sp, #0]
    4318:	9301      	str	r3, [sp, #4]
    431a:	4622      	mov	r2, r4
    431c:	4629      	mov	r1, r5
    431e:	4638      	mov	r0, r7
    4320:	f000 fc40 	bl	4ba4 <z_pend_curr>
		return result;
    4324:	e7bb      	b.n	429e <z_impl_k_msgq_get+0x36>
    4326:	bf00      	nop
    4328:	20000b98 	.word	0x20000b98

0000432c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    432c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4330:	b082      	sub	sp, #8
    4332:	4604      	mov	r4, r0
    4334:	461e      	mov	r6, r3
	__asm__ volatile(
    4336:	f04f 0320 	mov.w	r3, #32
    433a:	f3ef 8511 	mrs	r5, BASEPRI
    433e:	f383 8812 	msr	BASEPRI_MAX, r3
    4342:	f3bf 8f6f 	isb	sy
    4346:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4348:	68c1      	ldr	r1, [r0, #12]
    434a:	b999      	cbnz	r1, 4374 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    434c:	2900      	cmp	r1, #0
    434e:	d151      	bne.n	43f4 <z_impl_k_mutex_lock+0xc8>
    4350:	4a36      	ldr	r2, [pc, #216]	; (442c <z_impl_k_mutex_lock+0x100>)
    4352:	6892      	ldr	r2, [r2, #8]
    4354:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4358:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    435a:	3101      	adds	r1, #1
    435c:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    435e:	4a33      	ldr	r2, [pc, #204]	; (442c <z_impl_k_mutex_lock+0x100>)
    4360:	6892      	ldr	r2, [r2, #8]
    4362:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    4364:	f383 8811 	msr	BASEPRI, r3
    4368:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    436c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    436e:	b002      	add	sp, #8
    4370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4374:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4376:	6880      	ldr	r0, [r0, #8]
    4378:	4a2c      	ldr	r2, [pc, #176]	; (442c <z_impl_k_mutex_lock+0x100>)
    437a:	6892      	ldr	r2, [r2, #8]
    437c:	4290      	cmp	r0, r2
    437e:	d0e5      	beq.n	434c <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4380:	ea56 0107 	orrs.w	r1, r6, r7
    4384:	d038      	beq.n	43f8 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
    4386:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    438a:	4641      	mov	r1, r8
    438c:	f992 000e 	ldrsb.w	r0, [r2, #14]
    4390:	f003 f8f4 	bl	757c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4394:	4580      	cmp	r8, r0
    4396:	dc36      	bgt.n	4406 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
    4398:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    439c:	9700      	str	r7, [sp, #0]
    439e:	9601      	str	r6, [sp, #4]
    43a0:	4622      	mov	r2, r4
    43a2:	4629      	mov	r1, r5
    43a4:	4822      	ldr	r0, [pc, #136]	; (4430 <z_impl_k_mutex_lock+0x104>)
    43a6:	f000 fbfd 	bl	4ba4 <z_pend_curr>
	if (got_mutex == 0) {
    43aa:	2800      	cmp	r0, #0
    43ac:	d0df      	beq.n	436e <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    43ae:	f04f 0320 	mov.w	r3, #32
    43b2:	f3ef 8511 	mrs	r5, BASEPRI
    43b6:	f383 8812 	msr	BASEPRI_MAX, r3
    43ba:	f3bf 8f6f 	isb	sy
    43be:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    43c0:	68a3      	ldr	r3, [r4, #8]
    43c2:	b343      	cbz	r3, 4416 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    43c4:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43c6:	429c      	cmp	r4, r3
    43c8:	d023      	beq.n	4412 <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    43ca:	b313      	cbz	r3, 4412 <z_impl_k_mutex_lock+0xe6>
    43cc:	6921      	ldr	r1, [r4, #16]
    43ce:	f993 000e 	ldrsb.w	r0, [r3, #14]
    43d2:	f003 f8d3 	bl	757c <new_prio_for_inheritance>
    43d6:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    43d8:	4620      	mov	r0, r4
    43da:	f003 f8da 	bl	7592 <adjust_owner_prio>
    43de:	b9e8      	cbnz	r0, 441c <z_impl_k_mutex_lock+0xf0>
    43e0:	f1b8 0f00 	cmp.w	r8, #0
    43e4:	d11a      	bne.n	441c <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
    43e6:	f386 8811 	msr	BASEPRI, r6
    43ea:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    43ee:	f06f 000a 	mvn.w	r0, #10
    43f2:	e7bc      	b.n	436e <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    43f4:	6922      	ldr	r2, [r4, #16]
    43f6:	e7af      	b.n	4358 <z_impl_k_mutex_lock+0x2c>
    43f8:	f385 8811 	msr	BASEPRI, r5
    43fc:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    4400:	f06f 000f 	mvn.w	r0, #15
    4404:	e7b3      	b.n	436e <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    4406:	4601      	mov	r1, r0
    4408:	4620      	mov	r0, r4
    440a:	f003 f8c2 	bl	7592 <adjust_owner_prio>
    440e:	4680      	mov	r8, r0
    4410:	e7c4      	b.n	439c <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4412:	6921      	ldr	r1, [r4, #16]
    4414:	e7e0      	b.n	43d8 <z_impl_k_mutex_lock+0xac>
	if (resched) {
    4416:	f1b8 0f00 	cmp.w	r8, #0
    441a:	d0e4      	beq.n	43e6 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
    441c:	4629      	mov	r1, r5
    441e:	4804      	ldr	r0, [pc, #16]	; (4430 <z_impl_k_mutex_lock+0x104>)
    4420:	f000 fa5c 	bl	48dc <z_reschedule>
	return -EAGAIN;
    4424:	f06f 000a 	mvn.w	r0, #10
    4428:	e7a1      	b.n	436e <z_impl_k_mutex_lock+0x42>
    442a:	bf00      	nop
    442c:	20000b98 	.word	0x20000b98
    4430:	20000bc4 	.word	0x20000bc4

00004434 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4434:	6883      	ldr	r3, [r0, #8]
    4436:	b38b      	cbz	r3, 449c <z_impl_k_mutex_unlock+0x68>
{
    4438:	b570      	push	{r4, r5, r6, lr}
    443a:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    443c:	4a1a      	ldr	r2, [pc, #104]	; (44a8 <z_impl_k_mutex_unlock+0x74>)
    443e:	6892      	ldr	r2, [r2, #8]
    4440:	4293      	cmp	r3, r2
    4442:	d12e      	bne.n	44a2 <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4444:	68c3      	ldr	r3, [r0, #12]
    4446:	2b01      	cmp	r3, #1
    4448:	d903      	bls.n	4452 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    444a:	3b01      	subs	r3, #1
    444c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    444e:	2000      	movs	r0, #0
}
    4450:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    4452:	f04f 0320 	mov.w	r3, #32
    4456:	f3ef 8511 	mrs	r5, BASEPRI
    445a:	f383 8812 	msr	BASEPRI_MAX, r3
    445e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4462:	6901      	ldr	r1, [r0, #16]
    4464:	f003 f895 	bl	7592 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4468:	4620      	mov	r0, r4
    446a:	f003 fa42 	bl	78f2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    446e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4470:	b168      	cbz	r0, 448e <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    4472:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4476:	6123      	str	r3, [r4, #16]
    4478:	2400      	movs	r4, #0
    447a:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    447e:	f003 f9a1 	bl	77c4 <z_ready_thread>
		z_reschedule(&lock, key);
    4482:	4629      	mov	r1, r5
    4484:	4809      	ldr	r0, [pc, #36]	; (44ac <z_impl_k_mutex_unlock+0x78>)
    4486:	f000 fa29 	bl	48dc <z_reschedule>
	return 0;
    448a:	4620      	mov	r0, r4
    448c:	e7e0      	b.n	4450 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    448e:	2000      	movs	r0, #0
    4490:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    4492:	f385 8811 	msr	BASEPRI, r5
    4496:	f3bf 8f6f 	isb	sy
    449a:	e7d9      	b.n	4450 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    449c:	f06f 0015 	mvn.w	r0, #21
}
    44a0:	4770      	bx	lr
		return -EPERM;
    44a2:	f04f 30ff 	mov.w	r0, #4294967295
    44a6:	e7d3      	b.n	4450 <z_impl_k_mutex_unlock+0x1c>
    44a8:	20000b98 	.word	0x20000b98
    44ac:	20000bc4 	.word	0x20000bc4

000044b0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    44b0:	b538      	push	{r3, r4, r5, lr}
    44b2:	4604      	mov	r4, r0
	__asm__ volatile(
    44b4:	f04f 0320 	mov.w	r3, #32
    44b8:	f3ef 8511 	mrs	r5, BASEPRI
    44bc:	f383 8812 	msr	BASEPRI_MAX, r3
    44c0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    44c4:	f003 fa15 	bl	78f2 <z_unpend_first_thread>

	if (thread != NULL) {
    44c8:	b148      	cbz	r0, 44de <z_impl_k_sem_give+0x2e>
    44ca:	2200      	movs	r2, #0
    44cc:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    44d0:	f003 f978 	bl	77c4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    44d4:	4629      	mov	r1, r5
    44d6:	4807      	ldr	r0, [pc, #28]	; (44f4 <z_impl_k_sem_give+0x44>)
    44d8:	f000 fa00 	bl	48dc <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    44dc:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    44de:	68a3      	ldr	r3, [r4, #8]
    44e0:	68e2      	ldr	r2, [r4, #12]
    44e2:	4293      	cmp	r3, r2
    44e4:	d003      	beq.n	44ee <z_impl_k_sem_give+0x3e>
    44e6:	2201      	movs	r2, #1
    44e8:	4413      	add	r3, r2
    44ea:	60a3      	str	r3, [r4, #8]
}
    44ec:	e7f2      	b.n	44d4 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    44ee:	2200      	movs	r2, #0
    44f0:	e7fa      	b.n	44e8 <z_impl_k_sem_give+0x38>
    44f2:	bf00      	nop
    44f4:	20000bc4 	.word	0x20000bc4

000044f8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    44f8:	b510      	push	{r4, lr}
    44fa:	b082      	sub	sp, #8
    44fc:	f04f 0420 	mov.w	r4, #32
    4500:	f3ef 8111 	mrs	r1, BASEPRI
    4504:	f384 8812 	msr	BASEPRI_MAX, r4
    4508:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    450c:	6884      	ldr	r4, [r0, #8]
    450e:	b144      	cbz	r4, 4522 <z_impl_k_sem_take+0x2a>
		sem->count--;
    4510:	3c01      	subs	r4, #1
    4512:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4514:	f381 8811 	msr	BASEPRI, r1
    4518:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    451c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    451e:	b002      	add	sp, #8
    4520:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4522:	ea53 0402 	orrs.w	r4, r3, r2
    4526:	d006      	beq.n	4536 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4528:	9200      	str	r2, [sp, #0]
    452a:	9301      	str	r3, [sp, #4]
    452c:	4602      	mov	r2, r0
    452e:	4805      	ldr	r0, [pc, #20]	; (4544 <z_impl_k_sem_take+0x4c>)
    4530:	f000 fb38 	bl	4ba4 <z_pend_curr>
	return ret;
    4534:	e7f3      	b.n	451e <z_impl_k_sem_take+0x26>
    4536:	f381 8811 	msr	BASEPRI, r1
    453a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    453e:	f06f 000f 	mvn.w	r0, #15
    4542:	e7ec      	b.n	451e <z_impl_k_sem_take+0x26>
    4544:	20000bc4 	.word	0x20000bc4

00004548 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
    4548:	b370      	cbz	r0, 45a8 <queue_submit_locked+0x60>
{
    454a:	b538      	push	{r3, r4, r5, lr}
    454c:	460d      	mov	r5, r1
    454e:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    4550:	4b1b      	ldr	r3, [pc, #108]	; (45c0 <queue_submit_locked+0x78>)
    4552:	689b      	ldr	r3, [r3, #8]
    4554:	4283      	cmp	r3, r0
    4556:	d01b      	beq.n	4590 <queue_submit_locked+0x48>
    4558:	2300      	movs	r3, #0
    455a:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    455c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    4560:	f3c3 0180 	ubfx	r1, r3, #2, #1
    4564:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    4568:	f013 0f01 	tst.w	r3, #1
    456c:	d01f      	beq.n	45ae <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
    456e:	b101      	cbz	r1, 4572 <queue_submit_locked+0x2a>
    4570:	b302      	cbz	r2, 45b4 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
    4572:	b100      	cbz	r0, 4576 <queue_submit_locked+0x2e>
    4574:	b309      	cbz	r1, 45ba <queue_submit_locked+0x72>
	parent->next = child;
    4576:	2300      	movs	r3, #0
    4578:	602b      	str	r3, [r5, #0]
	return list->tail;
    457a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    457e:	b173      	cbz	r3, 459e <queue_submit_locked+0x56>
	parent->next = child;
    4580:	601d      	str	r5, [r3, #0]
	list->tail = node;
    4582:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
    4586:	4620      	mov	r0, r4
    4588:	f003 f828 	bl	75dc <notify_queue_locked>
		ret = 1;
    458c:	2001      	movs	r0, #1
	}

	return ret;
}
    458e:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    4590:	f002 ffb7 	bl	7502 <k_is_in_isr>
    4594:	b908      	cbnz	r0, 459a <queue_submit_locked+0x52>
    4596:	2301      	movs	r3, #1
    4598:	e7df      	b.n	455a <queue_submit_locked+0x12>
    459a:	2300      	movs	r3, #0
    459c:	e7dd      	b.n	455a <queue_submit_locked+0x12>
    459e:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
	list->head = node;
    45a2:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
}
    45a6:	e7ee      	b.n	4586 <queue_submit_locked+0x3e>
		return -EINVAL;
    45a8:	f06f 0015 	mvn.w	r0, #21
}
    45ac:	4770      	bx	lr
		ret = -ENODEV;
    45ae:	f06f 0012 	mvn.w	r0, #18
    45b2:	e7ec      	b.n	458e <queue_submit_locked+0x46>
		ret = -EBUSY;
    45b4:	f06f 000f 	mvn.w	r0, #15
    45b8:	e7e9      	b.n	458e <queue_submit_locked+0x46>
		ret = -EBUSY;
    45ba:	f06f 000f 	mvn.w	r0, #15
    45be:	e7e6      	b.n	458e <queue_submit_locked+0x46>
    45c0:	20000b98 	.word	0x20000b98

000045c4 <finalize_cancel_locked>:
{
    45c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45c6:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
    45c8:	68c3      	ldr	r3, [r0, #12]
    45ca:	f023 0302 	bic.w	r3, r3, #2
    45ce:	60c3      	str	r3, [r0, #12]
	return list->head;
    45d0:	4b13      	ldr	r3, [pc, #76]	; (4620 <finalize_cancel_locked+0x5c>)
    45d2:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    45d4:	b185      	cbz	r5, 45f8 <finalize_cancel_locked+0x34>
	return node->next;
    45d6:	682c      	ldr	r4, [r5, #0]
    45d8:	b104      	cbz	r4, 45dc <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
    45da:	b10d      	cbz	r5, 45e0 <finalize_cancel_locked+0x1c>
    45dc:	2700      	movs	r7, #0
    45de:	e010      	b.n	4602 <finalize_cancel_locked+0x3e>
    45e0:	462c      	mov	r4, r5
    45e2:	e7fb      	b.n	45dc <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    45e4:	462a      	mov	r2, r5
    45e6:	4639      	mov	r1, r7
    45e8:	480d      	ldr	r0, [pc, #52]	; (4620 <finalize_cancel_locked+0x5c>)
    45ea:	f002 ffe4 	bl	75b6 <sys_slist_remove>
			k_sem_give(&wc->sem);
    45ee:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
    45f2:	f7ff ff5d 	bl	44b0 <z_impl_k_sem_give>
}
    45f6:	e009      	b.n	460c <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    45f8:	462c      	mov	r4, r5
    45fa:	e7ef      	b.n	45dc <finalize_cancel_locked+0x18>
    45fc:	4623      	mov	r3, r4
    45fe:	4625      	mov	r5, r4
    4600:	461c      	mov	r4, r3
    4602:	b165      	cbz	r5, 461e <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
    4604:	686b      	ldr	r3, [r5, #4]
    4606:	42b3      	cmp	r3, r6
    4608:	d0ec      	beq.n	45e4 <finalize_cancel_locked+0x20>
			prev = &wc->node;
    460a:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    460c:	2c00      	cmp	r4, #0
    460e:	d0f5      	beq.n	45fc <finalize_cancel_locked+0x38>
	return node->next;
    4610:	6823      	ldr	r3, [r4, #0]
    4612:	2b00      	cmp	r3, #0
    4614:	d0f3      	beq.n	45fe <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4616:	2c00      	cmp	r4, #0
    4618:	d1f1      	bne.n	45fe <finalize_cancel_locked+0x3a>
    461a:	4623      	mov	r3, r4
    461c:	e7ef      	b.n	45fe <finalize_cancel_locked+0x3a>
}
    461e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4620:	20000bc4 	.word	0x20000bc4

00004624 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    4624:	b570      	push	{r4, r5, r6, lr}
    4626:	b084      	sub	sp, #16
    4628:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    462a:	e016      	b.n	465a <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    462c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    4630:	f023 0204 	bic.w	r2, r3, #4
    4634:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    4638:	f013 0f04 	tst.w	r3, #4
    463c:	d15a      	bne.n	46f4 <work_queue_main+0xd0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    463e:	2300      	movs	r3, #0
    4640:	9302      	str	r3, [sp, #8]
    4642:	f04f 32ff 	mov.w	r2, #4294967295
    4646:	f04f 33ff 	mov.w	r3, #4294967295
    464a:	e9cd 2300 	strd	r2, r3, [sp]
    464e:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    4652:	4631      	mov	r1, r6
    4654:	482e      	ldr	r0, [pc, #184]	; (4710 <work_queue_main+0xec>)
    4656:	f000 fcb1 	bl	4fbc <z_sched_wait>
	__asm__ volatile(
    465a:	f04f 0320 	mov.w	r3, #32
    465e:	f3ef 8611 	mrs	r6, BASEPRI
    4662:	f383 8812 	msr	BASEPRI_MAX, r3
    4666:	f3bf 8f6f 	isb	sy
    466a:	4632      	mov	r2, r6
	return list->head;
    466c:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    4670:	2c00      	cmp	r4, #0
    4672:	d0db      	beq.n	462c <work_queue_main+0x8>
	return node->next;
    4674:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    4676:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    467a:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    467e:	428c      	cmp	r4, r1
    4680:	d035      	beq.n	46ee <work_queue_main+0xca>
	*flagp |= BIT(bit);
    4682:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    4686:	f043 0302 	orr.w	r3, r3, #2
    468a:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    468e:	68e3      	ldr	r3, [r4, #12]
    4690:	f043 0101 	orr.w	r1, r3, #1
    4694:	60e1      	str	r1, [r4, #12]
	*flagp &= ~BIT(bit);
    4696:	f023 0304 	bic.w	r3, r3, #4
    469a:	f043 0301 	orr.w	r3, r3, #1
    469e:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    46a0:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
    46a2:	f382 8811 	msr	BASEPRI, r2
    46a6:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    46aa:	4620      	mov	r0, r4
    46ac:	4798      	blx	r3
	__asm__ volatile(
    46ae:	f04f 0320 	mov.w	r3, #32
    46b2:	f3ef 8611 	mrs	r6, BASEPRI
    46b6:	f383 8812 	msr	BASEPRI_MAX, r3
    46ba:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    46be:	68e3      	ldr	r3, [r4, #12]
    46c0:	f023 0301 	bic.w	r3, r3, #1
    46c4:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    46c6:	f013 0f02 	tst.w	r3, #2
    46ca:	d11d      	bne.n	4708 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
    46cc:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    46d0:	f023 0302 	bic.w	r3, r3, #2
    46d4:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    46d8:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    46dc:	f386 8811 	msr	BASEPRI, r6
    46e0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    46e4:	2b00      	cmp	r3, #0
    46e6:	d1b8      	bne.n	465a <work_queue_main+0x36>
	z_impl_k_yield();
    46e8:	f000 fb6e 	bl	4dc8 <z_impl_k_yield>
}
    46ec:	e7b5      	b.n	465a <work_queue_main+0x36>
	list->tail = node;
    46ee:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
		if (node != NULL) {
    46f2:	e7c6      	b.n	4682 <work_queue_main+0x5e>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    46f4:	f105 04c0 	add.w	r4, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    46f8:	2200      	movs	r2, #0
    46fa:	2101      	movs	r1, #1
    46fc:	4620      	mov	r0, r4
    46fe:	f003 f91e 	bl	793e <z_sched_wake>
    4702:	2800      	cmp	r0, #0
    4704:	d1f8      	bne.n	46f8 <work_queue_main+0xd4>
    4706:	e79a      	b.n	463e <work_queue_main+0x1a>
			finalize_cancel_locked(work);
    4708:	4620      	mov	r0, r4
    470a:	f7ff ff5b 	bl	45c4 <finalize_cancel_locked>
    470e:	e7dd      	b.n	46cc <work_queue_main+0xa8>
    4710:	20000bcc 	.word	0x20000bcc

00004714 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
    4714:	b508      	push	{r3, lr}
    4716:	4684      	mov	ip, r0
    4718:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    471a:	ea53 0102 	orrs.w	r1, r3, r2
    471e:	d00c      	beq.n	473a <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
    4720:	68c1      	ldr	r1, [r0, #12]
    4722:	f041 0108 	orr.w	r1, r1, #8
    4726:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
    4728:	f8dc 1000 	ldr.w	r1, [ip]
    472c:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    472e:	4905      	ldr	r1, [pc, #20]	; (4744 <schedule_for_queue_locked+0x30>)
    4730:	3010      	adds	r0, #16
    4732:	f000 fcb9 	bl	50a8 <z_add_timeout>

	return ret;
    4736:	2001      	movs	r0, #1
}
    4738:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
    473a:	4661      	mov	r1, ip
    473c:	f002 ff58 	bl	75f0 <submit_to_queue_locked>
    4740:	e7fa      	b.n	4738 <schedule_for_queue_locked+0x24>
    4742:	bf00      	nop
    4744:	00007651 	.word	0x00007651

00004748 <k_work_queue_start>:
{
    4748:	b5f0      	push	{r4, r5, r6, r7, lr}
    474a:	b089      	sub	sp, #36	; 0x24
    474c:	4604      	mov	r4, r0
    474e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    4750:	2000      	movs	r0, #0
    4752:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    4756:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    475a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    475e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    4762:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    4766:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    476a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    476e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
	if ((cfg != NULL) && cfg->no_yield) {
    4772:	b1fd      	cbz	r5, 47b4 <k_work_queue_start+0x6c>
    4774:	7928      	ldrb	r0, [r5, #4]
    4776:	b9f8      	cbnz	r0, 47b8 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    4778:	2001      	movs	r0, #1
	*flagp = flags;
    477a:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    477e:	f04f 36ff 	mov.w	r6, #4294967295
    4782:	f04f 37ff 	mov.w	r7, #4294967295
    4786:	e9cd 6706 	strd	r6, r7, [sp, #24]
    478a:	2000      	movs	r0, #0
    478c:	9004      	str	r0, [sp, #16]
    478e:	9303      	str	r3, [sp, #12]
    4790:	9002      	str	r0, [sp, #8]
    4792:	9001      	str	r0, [sp, #4]
    4794:	9400      	str	r4, [sp, #0]
    4796:	4b0a      	ldr	r3, [pc, #40]	; (47c0 <k_work_queue_start+0x78>)
    4798:	4620      	mov	r0, r4
    479a:	f002 fec7 	bl	752c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
    479e:	b125      	cbz	r5, 47aa <k_work_queue_start+0x62>
    47a0:	6829      	ldr	r1, [r5, #0]
    47a2:	b111      	cbz	r1, 47aa <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    47a4:	4620      	mov	r0, r4
    47a6:	f7ff fc1b 	bl	3fe0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    47aa:	4620      	mov	r0, r4
    47ac:	f002 feaf 	bl	750e <z_impl_k_thread_start>
}
    47b0:	b009      	add	sp, #36	; 0x24
    47b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    47b4:	2001      	movs	r0, #1
    47b6:	e7e0      	b.n	477a <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    47b8:	f240 1001 	movw	r0, #257	; 0x101
    47bc:	e7dd      	b.n	477a <k_work_queue_start+0x32>
    47be:	bf00      	nop
    47c0:	00004625 	.word	0x00004625

000047c4 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    47c4:	b508      	push	{r3, lr}
    47c6:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    47c8:	4801      	ldr	r0, [pc, #4]	; (47d0 <k_work_schedule+0xc>)
    47ca:	f002 ff7f 	bl	76cc <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
    47ce:	bd08      	pop	{r3, pc}
    47d0:	200003c0 	.word	0x200003c0

000047d4 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
    47d4:	b508      	push	{r3, lr}
    47d6:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    47d8:	4801      	ldr	r0, [pc, #4]	; (47e0 <k_work_reschedule+0xc>)
    47da:	f002 ff91 	bl	7700 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
    47de:	bd08      	pop	{r3, pc}
    47e0:	200003c0 	.word	0x200003c0

000047e4 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    47e4:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
    47e6:	2b7f      	cmp	r3, #127	; 0x7f
    47e8:	d80e      	bhi.n	4808 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
    47ea:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    47ec:	f013 0f1f 	tst.w	r3, #31
    47f0:	d10c      	bne.n	480c <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    47f2:	f990 200e 	ldrsb.w	r2, [r0, #14]
    47f6:	4b08      	ldr	r3, [pc, #32]	; (4818 <sliceable+0x34>)
    47f8:	681b      	ldr	r3, [r3, #0]
    47fa:	429a      	cmp	r2, r3
    47fc:	db08      	blt.n	4810 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    47fe:	4b07      	ldr	r3, [pc, #28]	; (481c <sliceable+0x38>)
    4800:	4298      	cmp	r0, r3
    4802:	d007      	beq.n	4814 <sliceable+0x30>
    4804:	2001      	movs	r0, #1
    4806:	4770      	bx	lr
    4808:	2000      	movs	r0, #0
    480a:	4770      	bx	lr
    480c:	2000      	movs	r0, #0
    480e:	4770      	bx	lr
    4810:	2000      	movs	r0, #0
    4812:	4770      	bx	lr
    4814:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    4816:	4770      	bx	lr
    4818:	20000bd0 	.word	0x20000bd0
    481c:	20000258 	.word	0x20000258

00004820 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4820:	f1b3 3fff 	cmp.w	r3, #4294967295
    4824:	bf08      	it	eq
    4826:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    482a:	d100      	bne.n	482e <add_thread_timeout+0xe>
    482c:	4770      	bx	lr
{
    482e:	b508      	push	{r3, lr}
    4830:	4902      	ldr	r1, [pc, #8]	; (483c <add_thread_timeout+0x1c>)
    4832:	3018      	adds	r0, #24
    4834:	f000 fc38 	bl	50a8 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    4838:	bd08      	pop	{r3, pc}
    483a:	bf00      	nop
    483c:	000077fd 	.word	0x000077fd

00004840 <z_reset_time_slice>:
{
    4840:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    4842:	4b07      	ldr	r3, [pc, #28]	; (4860 <z_reset_time_slice+0x20>)
    4844:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    4846:	b904      	cbnz	r4, 484a <z_reset_time_slice+0xa>
}
    4848:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    484a:	f7fe f921 	bl	2a90 <sys_clock_elapsed>
    484e:	4404      	add	r4, r0
    4850:	4b04      	ldr	r3, [pc, #16]	; (4864 <z_reset_time_slice+0x24>)
    4852:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    4854:	2100      	movs	r1, #0
    4856:	4b02      	ldr	r3, [pc, #8]	; (4860 <z_reset_time_slice+0x20>)
    4858:	6818      	ldr	r0, [r3, #0]
    485a:	f003 f8ea 	bl	7a32 <z_set_timeout_expiry>
}
    485e:	e7f3      	b.n	4848 <z_reset_time_slice+0x8>
    4860:	20000bd4 	.word	0x20000bd4
    4864:	20000b98 	.word	0x20000b98

00004868 <k_sched_time_slice_set>:
{
    4868:	b570      	push	{r4, r5, r6, lr}
    486a:	4604      	mov	r4, r0
    486c:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    486e:	2300      	movs	r3, #0
	__asm__ volatile(
    4870:	f04f 0220 	mov.w	r2, #32
    4874:	f3ef 8511 	mrs	r5, BASEPRI
    4878:	f382 8812 	msr	BASEPRI_MAX, r2
    487c:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    4880:	e00e      	b.n	48a0 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    4882:	2802      	cmp	r0, #2
    4884:	bfb8      	it	lt
    4886:	2002      	movlt	r0, #2
    4888:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    488a:	4b11      	ldr	r3, [pc, #68]	; (48d0 <k_sched_time_slice_set+0x68>)
    488c:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
    488e:	4b11      	ldr	r3, [pc, #68]	; (48d4 <k_sched_time_slice_set+0x6c>)
    4890:	6898      	ldr	r0, [r3, #8]
    4892:	f7ff ffd5 	bl	4840 <z_reset_time_slice>
	__asm__ volatile(
    4896:	f385 8811 	msr	BASEPRI, r5
    489a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    489e:	2301      	movs	r3, #1
    48a0:	b9a3      	cbnz	r3, 48cc <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    48a2:	4b0c      	ldr	r3, [pc, #48]	; (48d4 <k_sched_time_slice_set+0x6c>)
    48a4:	2200      	movs	r2, #0
    48a6:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    48a8:	0c61      	lsrs	r1, r4, #17
    48aa:	03e0      	lsls	r0, r4, #15
    48ac:	f240 33e7 	movw	r3, #999	; 0x3e7
    48b0:	18c0      	adds	r0, r0, r3
    48b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    48b6:	f04f 0300 	mov.w	r3, #0
    48ba:	f141 0100 	adc.w	r1, r1, #0
    48be:	f7fb fc49 	bl	154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    48c2:	4b05      	ldr	r3, [pc, #20]	; (48d8 <k_sched_time_slice_set+0x70>)
    48c4:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    48c6:	2c00      	cmp	r4, #0
    48c8:	dcdb      	bgt.n	4882 <k_sched_time_slice_set+0x1a>
    48ca:	e7de      	b.n	488a <k_sched_time_slice_set+0x22>
}
    48cc:	bd70      	pop	{r4, r5, r6, pc}
    48ce:	bf00      	nop
    48d0:	20000bd0 	.word	0x20000bd0
    48d4:	20000b98 	.word	0x20000b98
    48d8:	20000bd4 	.word	0x20000bd4

000048dc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    48dc:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    48de:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    48e0:	b959      	cbnz	r1, 48fa <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    48e2:	f3ef 8205 	mrs	r2, IPSR
    48e6:	b942      	cbnz	r2, 48fa <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    48e8:	4a06      	ldr	r2, [pc, #24]	; (4904 <z_reschedule+0x28>)
    48ea:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
    48ec:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    48ee:	4290      	cmp	r0, r2
    48f0:	d003      	beq.n	48fa <z_reschedule+0x1e>
	ret = arch_swap(key);
    48f2:	4608      	mov	r0, r1
    48f4:	f7fc fe84 	bl	1600 <arch_swap>
		z_swap(lock, key);
    48f8:	e003      	b.n	4902 <z_reschedule+0x26>
    48fa:	f383 8811 	msr	BASEPRI, r3
    48fe:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    4902:	bd08      	pop	{r3, pc}
    4904:	20000b98 	.word	0x20000b98

00004908 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    4908:	2300      	movs	r3, #0
	__asm__ volatile(
    490a:	f04f 0220 	mov.w	r2, #32
    490e:	f3ef 8111 	mrs	r1, BASEPRI
    4912:	f382 8812 	msr	BASEPRI_MAX, r2
    4916:	f3bf 8f6f 	isb	sy
    491a:	e009      	b.n	4930 <k_sched_lock+0x28>
	--_current->base.sched_locked;
    491c:	4b06      	ldr	r3, [pc, #24]	; (4938 <k_sched_lock+0x30>)
    491e:	689a      	ldr	r2, [r3, #8]
    4920:	7bd3      	ldrb	r3, [r2, #15]
    4922:	3b01      	subs	r3, #1
    4924:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4926:	f381 8811 	msr	BASEPRI, r1
    492a:	f3bf 8f6f 	isb	sy
    492e:	2301      	movs	r3, #1
    4930:	2b00      	cmp	r3, #0
    4932:	d0f3      	beq.n	491c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4934:	4770      	bx	lr
    4936:	bf00      	nop
    4938:	20000b98 	.word	0x20000b98

0000493c <update_cache>:
{
    493c:	b538      	push	{r3, r4, r5, lr}
    493e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    4940:	4810      	ldr	r0, [pc, #64]	; (4984 <update_cache+0x48>)
    4942:	f002 ff38 	bl	77b6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4946:	4605      	mov	r5, r0
    4948:	b170      	cbz	r0, 4968 <update_cache+0x2c>
	if (preempt_ok != 0) {
    494a:	b984      	cbnz	r4, 496e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    494c:	4b0e      	ldr	r3, [pc, #56]	; (4988 <update_cache+0x4c>)
    494e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4950:	7b5a      	ldrb	r2, [r3, #13]
    4952:	f012 0f1f 	tst.w	r2, #31
    4956:	d10a      	bne.n	496e <update_cache+0x32>
	return node->next != NULL;
    4958:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    495a:	b942      	cbnz	r2, 496e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    495c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    495e:	2a7f      	cmp	r2, #127	; 0x7f
    4960:	d905      	bls.n	496e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    4962:	4a09      	ldr	r2, [pc, #36]	; (4988 <update_cache+0x4c>)
    4964:	61d3      	str	r3, [r2, #28]
    4966:	e00b      	b.n	4980 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4968:	4b07      	ldr	r3, [pc, #28]	; (4988 <update_cache+0x4c>)
    496a:	68dd      	ldr	r5, [r3, #12]
    496c:	e7ed      	b.n	494a <update_cache+0xe>
		if (thread != _current) {
    496e:	4b06      	ldr	r3, [pc, #24]	; (4988 <update_cache+0x4c>)
    4970:	689b      	ldr	r3, [r3, #8]
    4972:	42ab      	cmp	r3, r5
    4974:	d002      	beq.n	497c <update_cache+0x40>
			z_reset_time_slice(thread);
    4976:	4628      	mov	r0, r5
    4978:	f7ff ff62 	bl	4840 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    497c:	4b02      	ldr	r3, [pc, #8]	; (4988 <update_cache+0x4c>)
    497e:	61dd      	str	r5, [r3, #28]
}
    4980:	bd38      	pop	{r3, r4, r5, pc}
    4982:	bf00      	nop
    4984:	20000bb8 	.word	0x20000bb8
    4988:	20000b98 	.word	0x20000b98

0000498c <move_thread_to_end_of_prio_q>:
{
    498c:	b538      	push	{r3, r4, r5, lr}
    498e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    4990:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    4992:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4996:	2b00      	cmp	r3, #0
    4998:	db0a      	blt.n	49b0 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    499a:	7b6b      	ldrb	r3, [r5, #13]
    499c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    49a0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    49a2:	4b1b      	ldr	r3, [pc, #108]	; (4a10 <move_thread_to_end_of_prio_q+0x84>)
    49a4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    49a8:	429c      	cmp	r4, r3
    49aa:	d110      	bne.n	49ce <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    49ac:	2400      	movs	r4, #0
    49ae:	e00e      	b.n	49ce <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    49b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    49b4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    49b6:	4601      	mov	r1, r0
    49b8:	4816      	ldr	r0, [pc, #88]	; (4a14 <move_thread_to_end_of_prio_q+0x88>)
    49ba:	f002 fee6 	bl	778a <z_priq_dumb_remove>
}
    49be:	e7ec      	b.n	499a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    49c0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    49c2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    49c4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    49c6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    49c8:	6065      	str	r5, [r4, #4]
}
    49ca:	e017      	b.n	49fc <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    49cc:	2400      	movs	r4, #0
    49ce:	b16c      	cbz	r4, 49ec <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    49d0:	4621      	mov	r1, r4
    49d2:	4628      	mov	r0, r5
    49d4:	f002 feb5 	bl	7742 <z_sched_prio_cmp>
    49d8:	2800      	cmp	r0, #0
    49da:	dcf1      	bgt.n	49c0 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    49dc:	2c00      	cmp	r4, #0
    49de:	d0f6      	beq.n	49ce <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    49e0:	4b0b      	ldr	r3, [pc, #44]	; (4a10 <move_thread_to_end_of_prio_q+0x84>)
    49e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    49e4:	429c      	cmp	r4, r3
    49e6:	d0f1      	beq.n	49cc <move_thread_to_end_of_prio_q+0x40>
    49e8:	6824      	ldr	r4, [r4, #0]
    49ea:	e7f0      	b.n	49ce <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    49ec:	4b08      	ldr	r3, [pc, #32]	; (4a10 <move_thread_to_end_of_prio_q+0x84>)
    49ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    49f0:	f103 0120 	add.w	r1, r3, #32
    49f4:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    49f6:	606a      	str	r2, [r5, #4]
	tail->next = node;
    49f8:	6015      	str	r5, [r2, #0]
	list->tail = node;
    49fa:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    49fc:	4b04      	ldr	r3, [pc, #16]	; (4a10 <move_thread_to_end_of_prio_q+0x84>)
    49fe:	6898      	ldr	r0, [r3, #8]
    4a00:	42a8      	cmp	r0, r5
    4a02:	bf14      	ite	ne
    4a04:	2000      	movne	r0, #0
    4a06:	2001      	moveq	r0, #1
    4a08:	f7ff ff98 	bl	493c <update_cache>
}
    4a0c:	bd38      	pop	{r3, r4, r5, pc}
    4a0e:	bf00      	nop
    4a10:	20000b98 	.word	0x20000b98
    4a14:	20000bb8 	.word	0x20000bb8

00004a18 <slice_expired_locked>:
{
    4a18:	b538      	push	{r3, r4, r5, lr}
    4a1a:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    4a1c:	4b07      	ldr	r3, [pc, #28]	; (4a3c <slice_expired_locked+0x24>)
    4a1e:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4a20:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    4a22:	f013 0f1f 	tst.w	r3, #31
    4a26:	d004      	beq.n	4a32 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    4a28:	4628      	mov	r0, r5
    4a2a:	f7ff ff09 	bl	4840 <z_reset_time_slice>
}
    4a2e:	4620      	mov	r0, r4
    4a30:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    4a32:	4628      	mov	r0, r5
    4a34:	f7ff ffaa 	bl	498c <move_thread_to_end_of_prio_q>
    4a38:	e7f6      	b.n	4a28 <slice_expired_locked+0x10>
    4a3a:	bf00      	nop
    4a3c:	20000b98 	.word	0x20000b98

00004a40 <z_time_slice>:
{
    4a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a42:	4605      	mov	r5, r0
	__asm__ volatile(
    4a44:	f04f 0320 	mov.w	r3, #32
    4a48:	f3ef 8611 	mrs	r6, BASEPRI
    4a4c:	f383 8812 	msr	BASEPRI_MAX, r3
    4a50:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4a54:	4b15      	ldr	r3, [pc, #84]	; (4aac <z_time_slice+0x6c>)
    4a56:	6898      	ldr	r0, [r3, #8]
    4a58:	4b15      	ldr	r3, [pc, #84]	; (4ab0 <z_time_slice+0x70>)
    4a5a:	681b      	ldr	r3, [r3, #0]
    4a5c:	4298      	cmp	r0, r3
    4a5e:	d011      	beq.n	4a84 <z_time_slice+0x44>
    4a60:	4634      	mov	r4, r6
	pending_current = NULL;
    4a62:	4b13      	ldr	r3, [pc, #76]	; (4ab0 <z_time_slice+0x70>)
    4a64:	2200      	movs	r2, #0
    4a66:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
    4a68:	4b12      	ldr	r3, [pc, #72]	; (4ab4 <z_time_slice+0x74>)
    4a6a:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
    4a6c:	b1b3      	cbz	r3, 4a9c <z_time_slice+0x5c>
    4a6e:	f7ff feb9 	bl	47e4 <sliceable>
    4a72:	b198      	cbz	r0, 4a9c <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
    4a74:	4b0d      	ldr	r3, [pc, #52]	; (4aac <z_time_slice+0x6c>)
    4a76:	691b      	ldr	r3, [r3, #16]
    4a78:	42ab      	cmp	r3, r5
    4a7a:	dd0a      	ble.n	4a92 <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
    4a7c:	1b5b      	subs	r3, r3, r5
    4a7e:	4a0b      	ldr	r2, [pc, #44]	; (4aac <z_time_slice+0x6c>)
    4a80:	6113      	str	r3, [r2, #16]
    4a82:	e00e      	b.n	4aa2 <z_time_slice+0x62>
		z_reset_time_slice(_current);
    4a84:	f7ff fedc 	bl	4840 <z_reset_time_slice>
	__asm__ volatile(
    4a88:	f386 8811 	msr	BASEPRI, r6
    4a8c:	f3bf 8f6f 	isb	sy
		return;
    4a90:	e00b      	b.n	4aaa <z_time_slice+0x6a>
			key = slice_expired_locked(key);
    4a92:	4630      	mov	r0, r6
    4a94:	f7ff ffc0 	bl	4a18 <slice_expired_locked>
    4a98:	4604      	mov	r4, r0
    4a9a:	e002      	b.n	4aa2 <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
    4a9c:	4b03      	ldr	r3, [pc, #12]	; (4aac <z_time_slice+0x6c>)
    4a9e:	2200      	movs	r2, #0
    4aa0:	611a      	str	r2, [r3, #16]
    4aa2:	f384 8811 	msr	BASEPRI, r4
    4aa6:	f3bf 8f6f 	isb	sy
}
    4aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4aac:	20000b98 	.word	0x20000b98
    4ab0:	20000bcc 	.word	0x20000bcc
    4ab4:	20000bd4 	.word	0x20000bd4

00004ab8 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    4ab8:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4aba:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4abe:	2b00      	cmp	r3, #0
    4ac0:	db33      	blt.n	4b2a <ready_thread+0x72>
{
    4ac2:	b570      	push	{r4, r5, r6, lr}
    4ac4:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4ac6:	f012 0f1f 	tst.w	r2, #31
    4aca:	d101      	bne.n	4ad0 <ready_thread+0x18>
	return node->next != NULL;
    4acc:	6986      	ldr	r6, [r0, #24]
    4ace:	b106      	cbz	r6, 4ad2 <ready_thread+0x1a>
}
    4ad0:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    4ad2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4ad6:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    4ad8:	4b14      	ldr	r3, [pc, #80]	; (4b2c <ready_thread+0x74>)
    4ada:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ade:	429d      	cmp	r5, r3
    4ae0:	d108      	bne.n	4af4 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ae2:	4635      	mov	r5, r6
    4ae4:	e006      	b.n	4af4 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    4ae6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    4ae8:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4aea:	6025      	str	r5, [r4, #0]
	prev->next = node;
    4aec:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4aee:	606c      	str	r4, [r5, #4]
}
    4af0:	e017      	b.n	4b22 <ready_thread+0x6a>
    4af2:	4635      	mov	r5, r6
    4af4:	b16d      	cbz	r5, 4b12 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4af6:	4629      	mov	r1, r5
    4af8:	4620      	mov	r0, r4
    4afa:	f002 fe22 	bl	7742 <z_sched_prio_cmp>
    4afe:	2800      	cmp	r0, #0
    4b00:	dcf1      	bgt.n	4ae6 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4b02:	2d00      	cmp	r5, #0
    4b04:	d0f6      	beq.n	4af4 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    4b06:	4b09      	ldr	r3, [pc, #36]	; (4b2c <ready_thread+0x74>)
    4b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4b0a:	429d      	cmp	r5, r3
    4b0c:	d0f1      	beq.n	4af2 <ready_thread+0x3a>
    4b0e:	682d      	ldr	r5, [r5, #0]
    4b10:	e7f0      	b.n	4af4 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    4b12:	4b06      	ldr	r3, [pc, #24]	; (4b2c <ready_thread+0x74>)
    4b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4b16:	f103 0120 	add.w	r1, r3, #32
    4b1a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    4b1c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4b1e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4b20:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    4b22:	2000      	movs	r0, #0
    4b24:	f7ff ff0a 	bl	493c <update_cache>
}
    4b28:	e7d2      	b.n	4ad0 <ready_thread+0x18>
    4b2a:	4770      	bx	lr
    4b2c:	20000b98 	.word	0x20000b98

00004b30 <z_sched_start>:
{
    4b30:	b510      	push	{r4, lr}
	__asm__ volatile(
    4b32:	f04f 0320 	mov.w	r3, #32
    4b36:	f3ef 8411 	mrs	r4, BASEPRI
    4b3a:	f383 8812 	msr	BASEPRI_MAX, r3
    4b3e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4b42:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    4b44:	f013 0f04 	tst.w	r3, #4
    4b48:	d104      	bne.n	4b54 <z_sched_start+0x24>
	__asm__ volatile(
    4b4a:	f384 8811 	msr	BASEPRI, r4
    4b4e:	f3bf 8f6f 	isb	sy
}
    4b52:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4b54:	f023 0304 	bic.w	r3, r3, #4
    4b58:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    4b5a:	f7ff ffad 	bl	4ab8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4b5e:	4621      	mov	r1, r4
    4b60:	4801      	ldr	r0, [pc, #4]	; (4b68 <z_sched_start+0x38>)
    4b62:	f7ff febb 	bl	48dc <z_reschedule>
    4b66:	e7f4      	b.n	4b52 <z_sched_start+0x22>
    4b68:	20000bd8 	.word	0x20000bd8

00004b6c <unready_thread>:
{
    4b6c:	b510      	push	{r4, lr}
    4b6e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    4b70:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    4b72:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4b76:	2b00      	cmp	r3, #0
    4b78:	db08      	blt.n	4b8c <unready_thread+0x20>
	update_cache(thread == _current);
    4b7a:	4b08      	ldr	r3, [pc, #32]	; (4b9c <unready_thread+0x30>)
    4b7c:	6898      	ldr	r0, [r3, #8]
    4b7e:	42a0      	cmp	r0, r4
    4b80:	bf14      	ite	ne
    4b82:	2000      	movne	r0, #0
    4b84:	2001      	moveq	r0, #1
    4b86:	f7ff fed9 	bl	493c <update_cache>
}
    4b8a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4b90:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4b92:	4601      	mov	r1, r0
    4b94:	4802      	ldr	r0, [pc, #8]	; (4ba0 <unready_thread+0x34>)
    4b96:	f002 fdf8 	bl	778a <z_priq_dumb_remove>
}
    4b9a:	e7ee      	b.n	4b7a <unready_thread+0xe>
    4b9c:	20000b98 	.word	0x20000b98
    4ba0:	20000bb8 	.word	0x20000bb8

00004ba4 <z_pend_curr>:
{
    4ba4:	b510      	push	{r4, lr}
    4ba6:	460c      	mov	r4, r1
    4ba8:	4611      	mov	r1, r2
	pending_current = _current;
    4baa:	480a      	ldr	r0, [pc, #40]	; (4bd4 <z_pend_curr+0x30>)
    4bac:	6882      	ldr	r2, [r0, #8]
    4bae:	4b0a      	ldr	r3, [pc, #40]	; (4bd8 <z_pend_curr+0x34>)
    4bb0:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    4bb2:	f04f 0220 	mov.w	r2, #32
    4bb6:	f3ef 8311 	mrs	r3, BASEPRI
    4bba:	f382 8812 	msr	BASEPRI_MAX, r2
    4bbe:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    4bc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4bc6:	6880      	ldr	r0, [r0, #8]
    4bc8:	f002 fe87 	bl	78da <pend_locked>
    4bcc:	4620      	mov	r0, r4
    4bce:	f7fc fd17 	bl	1600 <arch_swap>
}
    4bd2:	bd10      	pop	{r4, pc}
    4bd4:	20000b98 	.word	0x20000b98
    4bd8:	20000bcc 	.word	0x20000bcc

00004bdc <z_set_prio>:
{
    4bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4be0:	4605      	mov	r5, r0
    4be2:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    4be4:	2300      	movs	r3, #0
    4be6:	f04f 0220 	mov.w	r2, #32
    4bea:	f3ef 8611 	mrs	r6, BASEPRI
    4bee:	f382 8812 	msr	BASEPRI_MAX, r2
    4bf2:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    4bf6:	4618      	mov	r0, r3
    4bf8:	e029      	b.n	4c4e <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    4bfa:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    4bfc:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4bfe:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4c00:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4c02:	6065      	str	r5, [r4, #4]
}
    4c04:	e017      	b.n	4c36 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c06:	4644      	mov	r4, r8
    4c08:	b16c      	cbz	r4, 4c26 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4c0a:	4621      	mov	r1, r4
    4c0c:	4628      	mov	r0, r5
    4c0e:	f002 fd98 	bl	7742 <z_sched_prio_cmp>
    4c12:	2800      	cmp	r0, #0
    4c14:	dcf1      	bgt.n	4bfa <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4c16:	2c00      	cmp	r4, #0
    4c18:	d0f6      	beq.n	4c08 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    4c1a:	4b1d      	ldr	r3, [pc, #116]	; (4c90 <z_set_prio+0xb4>)
    4c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4c1e:	429c      	cmp	r4, r3
    4c20:	d0f1      	beq.n	4c06 <z_set_prio+0x2a>
    4c22:	6824      	ldr	r4, [r4, #0]
    4c24:	e7f0      	b.n	4c08 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    4c26:	4b1a      	ldr	r3, [pc, #104]	; (4c90 <z_set_prio+0xb4>)
    4c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4c2a:	f103 0120 	add.w	r1, r3, #32
    4c2e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4c30:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4c32:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4c34:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
    4c36:	2001      	movs	r0, #1
    4c38:	f7ff fe80 	bl	493c <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4c3c:	2001      	movs	r0, #1
    4c3e:	e001      	b.n	4c44 <z_set_prio+0x68>
			thread->base.prio = prio;
    4c40:	73af      	strb	r7, [r5, #14]
    4c42:	2000      	movs	r0, #0
	__asm__ volatile(
    4c44:	f386 8811 	msr	BASEPRI, r6
    4c48:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4c4c:	2301      	movs	r3, #1
    4c4e:	b9e3      	cbnz	r3, 4c8a <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    4c50:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4c52:	f013 0f1f 	tst.w	r3, #31
    4c56:	d1f3      	bne.n	4c40 <z_set_prio+0x64>
	return node->next != NULL;
    4c58:	f8d5 8018 	ldr.w	r8, [r5, #24]
    4c5c:	f1b8 0f00 	cmp.w	r8, #0
    4c60:	d1ee      	bne.n	4c40 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4c66:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4c68:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4c94 <z_set_prio+0xb8>
    4c6c:	4629      	mov	r1, r5
    4c6e:	4648      	mov	r0, r9
    4c70:	f002 fd8b 	bl	778a <z_priq_dumb_remove>
				thread->base.prio = prio;
    4c74:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4c76:	7b6b      	ldrb	r3, [r5, #13]
    4c78:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4c7c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    4c7e:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c82:	454c      	cmp	r4, r9
    4c84:	d1c0      	bne.n	4c08 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c86:	4644      	mov	r4, r8
    4c88:	e7be      	b.n	4c08 <z_set_prio+0x2c>
}
    4c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4c8e:	bf00      	nop
    4c90:	20000b98 	.word	0x20000b98
    4c94:	20000bb8 	.word	0x20000bb8

00004c98 <z_impl_k_thread_suspend>:
{
    4c98:	b538      	push	{r3, r4, r5, lr}
    4c9a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4c9c:	3018      	adds	r0, #24
    4c9e:	f002 fe93 	bl	79c8 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    4ca2:	2300      	movs	r3, #0
	__asm__ volatile(
    4ca4:	f04f 0220 	mov.w	r2, #32
    4ca8:	f3ef 8511 	mrs	r5, BASEPRI
    4cac:	f382 8812 	msr	BASEPRI_MAX, r2
    4cb0:	f3bf 8f6f 	isb	sy
    4cb4:	e010      	b.n	4cd8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4cb6:	7b63      	ldrb	r3, [r4, #13]
    4cb8:	f043 0310 	orr.w	r3, r3, #16
    4cbc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4cbe:	4b11      	ldr	r3, [pc, #68]	; (4d04 <z_impl_k_thread_suspend+0x6c>)
    4cc0:	6898      	ldr	r0, [r3, #8]
    4cc2:	42a0      	cmp	r0, r4
    4cc4:	bf14      	ite	ne
    4cc6:	2000      	movne	r0, #0
    4cc8:	2001      	moveq	r0, #1
    4cca:	f7ff fe37 	bl	493c <update_cache>
	__asm__ volatile(
    4cce:	f385 8811 	msr	BASEPRI, r5
    4cd2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4cd6:	2301      	movs	r3, #1
    4cd8:	b963      	cbnz	r3, 4cf4 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    4cda:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    4cdc:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4ce0:	2b00      	cmp	r3, #0
    4ce2:	dae8      	bge.n	4cb6 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4ce4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4ce8:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4cea:	4621      	mov	r1, r4
    4cec:	4806      	ldr	r0, [pc, #24]	; (4d08 <z_impl_k_thread_suspend+0x70>)
    4cee:	f002 fd4c 	bl	778a <z_priq_dumb_remove>
}
    4cf2:	e7e0      	b.n	4cb6 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    4cf4:	4b03      	ldr	r3, [pc, #12]	; (4d04 <z_impl_k_thread_suspend+0x6c>)
    4cf6:	689b      	ldr	r3, [r3, #8]
    4cf8:	42a3      	cmp	r3, r4
    4cfa:	d000      	beq.n	4cfe <z_impl_k_thread_suspend+0x66>
}
    4cfc:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    4cfe:	f002 fd38 	bl	7772 <z_reschedule_unlocked>
}
    4d02:	e7fb      	b.n	4cfc <z_impl_k_thread_suspend+0x64>
    4d04:	20000b98 	.word	0x20000b98
    4d08:	20000bb8 	.word	0x20000bb8

00004d0c <k_sched_unlock>:

void k_sched_unlock(void)
{
    4d0c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    4d0e:	2300      	movs	r3, #0
	__asm__ volatile(
    4d10:	f04f 0220 	mov.w	r2, #32
    4d14:	f3ef 8411 	mrs	r4, BASEPRI
    4d18:	f382 8812 	msr	BASEPRI_MAX, r2
    4d1c:	f3bf 8f6f 	isb	sy
    4d20:	e00c      	b.n	4d3c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    4d22:	4b09      	ldr	r3, [pc, #36]	; (4d48 <k_sched_unlock+0x3c>)
    4d24:	689a      	ldr	r2, [r3, #8]
    4d26:	7bd3      	ldrb	r3, [r2, #15]
    4d28:	3301      	adds	r3, #1
    4d2a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4d2c:	2000      	movs	r0, #0
    4d2e:	f7ff fe05 	bl	493c <update_cache>
	__asm__ volatile(
    4d32:	f384 8811 	msr	BASEPRI, r4
    4d36:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4d3a:	2301      	movs	r3, #1
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	d0f0      	beq.n	4d22 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    4d40:	f002 fd17 	bl	7772 <z_reschedule_unlocked>
}
    4d44:	bd10      	pop	{r4, pc}
    4d46:	bf00      	nop
    4d48:	20000b98 	.word	0x20000b98

00004d4c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    4d4c:	7b43      	ldrb	r3, [r0, #13]
    4d4e:	f013 0f08 	tst.w	r3, #8
    4d52:	d12a      	bne.n	4daa <end_thread+0x5e>
{
    4d54:	b510      	push	{r4, lr}
    4d56:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    4d58:	f043 0208 	orr.w	r2, r3, #8
    4d5c:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4d5e:	f023 0220 	bic.w	r2, r3, #32
    4d62:	f042 0208 	orr.w	r2, r2, #8
    4d66:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    4d68:	f012 0f80 	tst.w	r2, #128	; 0x80
    4d6c:	d113      	bne.n	4d96 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    4d6e:	68a3      	ldr	r3, [r4, #8]
    4d70:	b113      	cbz	r3, 4d78 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    4d72:	4620      	mov	r0, r4
    4d74:	f002 fd11 	bl	779a <unpend_thread_no_timeout>
    4d78:	f104 0018 	add.w	r0, r4, #24
    4d7c:	f002 fe24 	bl	79c8 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    4d80:	f104 0058 	add.w	r0, r4, #88	; 0x58
    4d84:	f002 fd69 	bl	785a <unpend_all>
		update_cache(1);
    4d88:	2001      	movs	r0, #1
    4d8a:	f7ff fdd7 	bl	493c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    4d8e:	4620      	mov	r0, r4
    4d90:	f7ff f906 	bl	3fa0 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    4d94:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4d96:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4d9a:	f043 0308 	orr.w	r3, r3, #8
    4d9e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4da0:	4601      	mov	r1, r0
    4da2:	4802      	ldr	r0, [pc, #8]	; (4dac <end_thread+0x60>)
    4da4:	f002 fcf1 	bl	778a <z_priq_dumb_remove>
}
    4da8:	e7e1      	b.n	4d6e <end_thread+0x22>
    4daa:	4770      	bx	lr
    4dac:	20000bb8 	.word	0x20000bb8

00004db0 <z_sched_init>:
{
    4db0:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    4db2:	4804      	ldr	r0, [pc, #16]	; (4dc4 <z_sched_init+0x14>)
    4db4:	f002 fdbf 	bl	7936 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4db8:	2100      	movs	r1, #0
    4dba:	4608      	mov	r0, r1
    4dbc:	f7ff fd54 	bl	4868 <k_sched_time_slice_set>
}
    4dc0:	bd08      	pop	{r3, pc}
    4dc2:	bf00      	nop
    4dc4:	20000bb4 	.word	0x20000bb4

00004dc8 <z_impl_k_yield>:
{
    4dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4dca:	f04f 0320 	mov.w	r3, #32
    4dce:	f3ef 8611 	mrs	r6, BASEPRI
    4dd2:	f383 8812 	msr	BASEPRI_MAX, r3
    4dd6:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    4dda:	4c1d      	ldr	r4, [pc, #116]	; (4e50 <z_impl_k_yield+0x88>)
    4ddc:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4dde:	7b4b      	ldrb	r3, [r1, #13]
    4de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4de4:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4de6:	f104 0720 	add.w	r7, r4, #32
    4dea:	4638      	mov	r0, r7
    4dec:	f002 fccd 	bl	778a <z_priq_dumb_remove>
	queue_thread(_current);
    4df0:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4df2:	7b6b      	ldrb	r3, [r5, #13]
    4df4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4df8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    4dfa:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4dfc:	42bc      	cmp	r4, r7
    4dfe:	d108      	bne.n	4e12 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4e00:	2400      	movs	r4, #0
    4e02:	e006      	b.n	4e12 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    4e04:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    4e06:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4e08:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4e0a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4e0c:	6065      	str	r5, [r4, #4]
}
    4e0e:	e017      	b.n	4e40 <z_impl_k_yield+0x78>
    4e10:	2400      	movs	r4, #0
    4e12:	b16c      	cbz	r4, 4e30 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4e14:	4621      	mov	r1, r4
    4e16:	4628      	mov	r0, r5
    4e18:	f002 fc93 	bl	7742 <z_sched_prio_cmp>
    4e1c:	2800      	cmp	r0, #0
    4e1e:	dcf1      	bgt.n	4e04 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4e20:	2c00      	cmp	r4, #0
    4e22:	d0f6      	beq.n	4e12 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    4e24:	4b0a      	ldr	r3, [pc, #40]	; (4e50 <z_impl_k_yield+0x88>)
    4e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4e28:	429c      	cmp	r4, r3
    4e2a:	d0f1      	beq.n	4e10 <z_impl_k_yield+0x48>
    4e2c:	6824      	ldr	r4, [r4, #0]
    4e2e:	e7f0      	b.n	4e12 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    4e30:	4b07      	ldr	r3, [pc, #28]	; (4e50 <z_impl_k_yield+0x88>)
    4e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4e34:	f103 0120 	add.w	r1, r3, #32
    4e38:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4e3a:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4e3c:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4e3e:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    4e40:	2001      	movs	r0, #1
    4e42:	f7ff fd7b 	bl	493c <update_cache>
    4e46:	4630      	mov	r0, r6
    4e48:	f7fc fbda 	bl	1600 <arch_swap>
}
    4e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e4e:	bf00      	nop
    4e50:	20000b98 	.word	0x20000b98

00004e54 <z_tick_sleep>:
{
    4e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    4e58:	ea50 0301 	orrs.w	r3, r0, r1
    4e5c:	d038      	beq.n	4ed0 <z_tick_sleep+0x7c>
    4e5e:	4604      	mov	r4, r0
    4e60:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    4e62:	f06f 0301 	mvn.w	r3, #1
    4e66:	1a1b      	subs	r3, r3, r0
    4e68:	f04f 32ff 	mov.w	r2, #4294967295
    4e6c:	eb62 0201 	sbc.w	r2, r2, r1
    4e70:	2b01      	cmp	r3, #1
    4e72:	f172 0200 	sbcs.w	r2, r2, #0
    4e76:	db2f      	blt.n	4ed8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4e78:	f06f 0501 	mvn.w	r5, #1
    4e7c:	1a2d      	subs	r5, r5, r0
    4e7e:	f04f 0320 	mov.w	r3, #32
    4e82:	f3ef 8811 	mrs	r8, BASEPRI
    4e86:	f383 8812 	msr	BASEPRI_MAX, r3
    4e8a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4e8e:	4f14      	ldr	r7, [pc, #80]	; (4ee0 <z_tick_sleep+0x8c>)
    4e90:	68b8      	ldr	r0, [r7, #8]
    4e92:	4b14      	ldr	r3, [pc, #80]	; (4ee4 <z_tick_sleep+0x90>)
    4e94:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4e96:	f7ff fe69 	bl	4b6c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4e9a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4e9c:	4622      	mov	r2, r4
    4e9e:	4633      	mov	r3, r6
    4ea0:	4911      	ldr	r1, [pc, #68]	; (4ee8 <z_tick_sleep+0x94>)
    4ea2:	3018      	adds	r0, #24
    4ea4:	f000 f900 	bl	50a8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4ea8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4eaa:	7b53      	ldrb	r3, [r2, #13]
    4eac:	f043 0310 	orr.w	r3, r3, #16
    4eb0:	7353      	strb	r3, [r2, #13]
    4eb2:	4640      	mov	r0, r8
    4eb4:	f7fc fba4 	bl	1600 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4eb8:	f002 fde6 	bl	7a88 <sys_clock_tick_get_32>
    4ebc:	1a28      	subs	r0, r5, r0
    4ebe:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4ec2:	2801      	cmp	r0, #1
    4ec4:	f173 0300 	sbcs.w	r3, r3, #0
    4ec8:	da00      	bge.n	4ecc <z_tick_sleep+0x78>
	return 0;
    4eca:	2000      	movs	r0, #0
}
    4ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    4ed0:	f7ff ff7a 	bl	4dc8 <z_impl_k_yield>
		return 0;
    4ed4:	2000      	movs	r0, #0
    4ed6:	e7f9      	b.n	4ecc <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4ed8:	f002 fdd6 	bl	7a88 <sys_clock_tick_get_32>
    4edc:	1905      	adds	r5, r0, r4
    4ede:	e7ce      	b.n	4e7e <z_tick_sleep+0x2a>
    4ee0:	20000b98 	.word	0x20000b98
    4ee4:	20000bcc 	.word	0x20000bcc
    4ee8:	000077fd 	.word	0x000077fd

00004eec <z_impl_k_sleep>:
{
    4eec:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4eee:	f1b1 3fff 	cmp.w	r1, #4294967295
    4ef2:	bf08      	it	eq
    4ef4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    4ef8:	d018      	beq.n	4f2c <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    4efa:	f7ff ffab 	bl	4e54 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    4efe:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    4f00:	0151      	lsls	r1, r2, #5
    4f02:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    4f06:	0143      	lsls	r3, r0, #5
    4f08:	1a1b      	subs	r3, r3, r0
    4f0a:	eb61 0102 	sbc.w	r1, r1, r2
    4f0e:	0089      	lsls	r1, r1, #2
    4f10:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    4f14:	009b      	lsls	r3, r3, #2
    4f16:	181b      	adds	r3, r3, r0
    4f18:	eb42 0201 	adc.w	r2, r2, r1
    4f1c:	00d2      	lsls	r2, r2, #3
    4f1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    4f22:	f3c3 3310 	ubfx	r3, r3, #12, #17
    4f26:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    4f2a:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    4f2c:	4b03      	ldr	r3, [pc, #12]	; (4f3c <z_impl_k_sleep+0x50>)
    4f2e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4f30:	f7ff feb2 	bl	4c98 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4f34:	f04f 30ff 	mov.w	r0, #4294967295
    4f38:	e7f7      	b.n	4f2a <z_impl_k_sleep+0x3e>
    4f3a:	bf00      	nop
    4f3c:	20000b98 	.word	0x20000b98

00004f40 <z_impl_z_current_get>:
}
    4f40:	4b01      	ldr	r3, [pc, #4]	; (4f48 <z_impl_z_current_get+0x8>)
    4f42:	6898      	ldr	r0, [r3, #8]
    4f44:	4770      	bx	lr
    4f46:	bf00      	nop
    4f48:	20000b98 	.word	0x20000b98

00004f4c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    4f4c:	b570      	push	{r4, r5, r6, lr}
    4f4e:	f04f 0320 	mov.w	r3, #32
    4f52:	f3ef 8511 	mrs	r5, BASEPRI
    4f56:	f383 8812 	msr	BASEPRI_MAX, r3
    4f5a:	f3bf 8f6f 	isb	sy
    4f5e:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    4f60:	7b03      	ldrb	r3, [r0, #12]
    4f62:	f013 0f01 	tst.w	r3, #1
    4f66:	d109      	bne.n	4f7c <z_thread_abort+0x30>
    4f68:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4f6a:	7b43      	ldrb	r3, [r0, #13]
    4f6c:	f013 0f08 	tst.w	r3, #8
    4f70:	d00f      	beq.n	4f92 <z_thread_abort+0x46>
	__asm__ volatile(
    4f72:	f385 8811 	msr	BASEPRI, r5
    4f76:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    4f7a:	e009      	b.n	4f90 <z_thread_abort+0x44>
    4f7c:	f385 8811 	msr	BASEPRI, r5
    4f80:	f3bf 8f6f 	isb	sy
		k_panic();
    4f84:	4040      	eors	r0, r0
    4f86:	f380 8811 	msr	BASEPRI, r0
    4f8a:	f04f 0004 	mov.w	r0, #4
    4f8e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4f90:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    4f92:	f7ff fedb 	bl	4d4c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    4f96:	4b08      	ldr	r3, [pc, #32]	; (4fb8 <z_thread_abort+0x6c>)
    4f98:	689b      	ldr	r3, [r3, #8]
    4f9a:	42a3      	cmp	r3, r4
    4f9c:	d004      	beq.n	4fa8 <z_thread_abort+0x5c>
    4f9e:	f386 8811 	msr	BASEPRI, r6
    4fa2:	f3bf 8f6f 	isb	sy
    4fa6:	e7f3      	b.n	4f90 <z_thread_abort+0x44>
    4fa8:	f3ef 8305 	mrs	r3, IPSR
    4fac:	2b00      	cmp	r3, #0
    4fae:	d1f6      	bne.n	4f9e <z_thread_abort+0x52>
    4fb0:	4628      	mov	r0, r5
    4fb2:	f7fc fb25 	bl	1600 <arch_swap>
	return ret;
    4fb6:	e7f2      	b.n	4f9e <z_thread_abort+0x52>
    4fb8:	20000b98 	.word	0x20000b98

00004fbc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    4fbc:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
    4fc0:	b083      	sub	sp, #12
    4fc2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    4fc4:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    4fc8:	e9cd bc00 	strd	fp, ip, [sp]
    4fcc:	f7ff fdea 	bl	4ba4 <z_pend_curr>

	if (data != NULL) {
    4fd0:	b11c      	cbz	r4, 4fda <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
    4fd2:	4b03      	ldr	r3, [pc, #12]	; (4fe0 <z_sched_wait+0x24>)
    4fd4:	689b      	ldr	r3, [r3, #8]
    4fd6:	695b      	ldr	r3, [r3, #20]
    4fd8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    4fda:	b003      	add	sp, #12
    4fdc:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
    4fe0:	20000b98 	.word	0x20000b98

00004fe4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4fe4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4fe6:	4806      	ldr	r0, [pc, #24]	; (5000 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4fe8:	4a06      	ldr	r2, [pc, #24]	; (5004 <z_data_copy+0x20>)
    4fea:	1a12      	subs	r2, r2, r0
    4fec:	4906      	ldr	r1, [pc, #24]	; (5008 <z_data_copy+0x24>)
    4fee:	f002 fa24 	bl	743a <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4ff2:	4a06      	ldr	r2, [pc, #24]	; (500c <z_data_copy+0x28>)
    4ff4:	4906      	ldr	r1, [pc, #24]	; (5010 <z_data_copy+0x2c>)
    4ff6:	4807      	ldr	r0, [pc, #28]	; (5014 <z_data_copy+0x30>)
    4ff8:	f002 fa1f 	bl	743a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4ffc:	bd08      	pop	{r3, pc}
    4ffe:	bf00      	nop
    5000:	20000000 	.word	0x20000000
    5004:	20000204 	.word	0x20000204
    5008:	000083dc 	.word	0x000083dc
    500c:	00000000 	.word	0x00000000
    5010:	000083dc 	.word	0x000083dc
    5014:	20000000 	.word	0x20000000

00005018 <first>:
	return list->head == list;
    5018:	4b03      	ldr	r3, [pc, #12]	; (5028 <first+0x10>)
    501a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    501c:	4298      	cmp	r0, r3
    501e:	d000      	beq.n	5022 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    5020:	4770      	bx	lr
    5022:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    5024:	e7fc      	b.n	5020 <first+0x8>
    5026:	bf00      	nop
    5028:	20000118 	.word	0x20000118

0000502c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    502c:	b130      	cbz	r0, 503c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    502e:	4a04      	ldr	r2, [pc, #16]	; (5040 <next+0x14>)
    5030:	6852      	ldr	r2, [r2, #4]
    5032:	4290      	cmp	r0, r2
    5034:	d001      	beq.n	503a <next+0xe>
    5036:	6800      	ldr	r0, [r0, #0]
    5038:	4770      	bx	lr
    503a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    503c:	4770      	bx	lr
    503e:	bf00      	nop
    5040:	20000118 	.word	0x20000118

00005044 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    5044:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5046:	4b04      	ldr	r3, [pc, #16]	; (5058 <elapsed+0x14>)
    5048:	681b      	ldr	r3, [r3, #0]
    504a:	b10b      	cbz	r3, 5050 <elapsed+0xc>
    504c:	2000      	movs	r0, #0
}
    504e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5050:	f7fd fd1e 	bl	2a90 <sys_clock_elapsed>
    5054:	e7fb      	b.n	504e <elapsed+0xa>
    5056:	bf00      	nop
    5058:	20000bd8 	.word	0x20000bd8

0000505c <next_timeout>:

static int32_t next_timeout(void)
{
    505c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    505e:	f7ff ffdb 	bl	5018 <first>
    5062:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    5064:	f7ff ffee 	bl	5044 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    5068:	b17c      	cbz	r4, 508a <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    506a:	6923      	ldr	r3, [r4, #16]
    506c:	6962      	ldr	r2, [r4, #20]
    506e:	1a1b      	subs	r3, r3, r0
    5070:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    5074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5078:	f172 0100 	sbcs.w	r1, r2, #0
    507c:	da08      	bge.n	5090 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    507e:	2a00      	cmp	r2, #0
    5080:	db01      	blt.n	5086 <next_timeout+0x2a>
    5082:	4618      	mov	r0, r3
    5084:	e006      	b.n	5094 <next_timeout+0x38>
    5086:	2300      	movs	r3, #0
    5088:	e7fb      	b.n	5082 <next_timeout+0x26>
		ret = MAX_WAIT;
    508a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    508e:	e001      	b.n	5094 <next_timeout+0x38>
    5090:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5094:	4b03      	ldr	r3, [pc, #12]	; (50a4 <next_timeout+0x48>)
    5096:	691b      	ldr	r3, [r3, #16]
    5098:	b113      	cbz	r3, 50a0 <next_timeout+0x44>
    509a:	4283      	cmp	r3, r0
    509c:	da00      	bge.n	50a0 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    509e:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    50a0:	bd10      	pop	{r4, pc}
    50a2:	bf00      	nop
    50a4:	20000b98 	.word	0x20000b98

000050a8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    50a8:	f1b3 3fff 	cmp.w	r3, #4294967295
    50ac:	bf08      	it	eq
    50ae:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    50b2:	d07b      	beq.n	51ac <z_add_timeout+0x104>
{
    50b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50b8:	4604      	mov	r4, r0
    50ba:	4692      	mov	sl, r2
    50bc:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    50be:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    50c0:	2300      	movs	r3, #0
	__asm__ volatile(
    50c2:	f04f 0220 	mov.w	r2, #32
    50c6:	f3ef 8711 	mrs	r7, BASEPRI
    50ca:	f382 8812 	msr	BASEPRI_MAX, r2
    50ce:	f3bf 8f6f 	isb	sy
    50d2:	e026      	b.n	5122 <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    50d4:	f11a 0801 	adds.w	r8, sl, #1
    50d8:	f145 0900 	adc.w	r9, r5, #0
    50dc:	f7ff ffb2 	bl	5044 <elapsed>
    50e0:	eb18 0300 	adds.w	r3, r8, r0
    50e4:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    50e8:	6123      	str	r3, [r4, #16]
    50ea:	6160      	str	r0, [r4, #20]
    50ec:	e03b      	b.n	5166 <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    50ee:	1a52      	subs	r2, r2, r1
    50f0:	eb66 0303 	sbc.w	r3, r6, r3
    50f4:	6102      	str	r2, [r0, #16]
    50f6:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    50f8:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    50fa:	6063      	str	r3, [r4, #4]
	node->next = successor;
    50fc:	6020      	str	r0, [r4, #0]
	prev->next = node;
    50fe:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5100:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    5102:	e005      	b.n	5110 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    5104:	4b2a      	ldr	r3, [pc, #168]	; (51b0 <z_add_timeout+0x108>)
    5106:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    5108:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    510a:	6062      	str	r2, [r4, #4]
	tail->next = node;
    510c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    510e:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5110:	f7ff ff82 	bl	5018 <first>
    5114:	4284      	cmp	r4, r0
    5116:	d03a      	beq.n	518e <z_add_timeout+0xe6>
	__asm__ volatile(
    5118:	f387 8811 	msr	BASEPRI, r7
    511c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    5120:	2301      	movs	r3, #1
    5122:	2b00      	cmp	r3, #0
    5124:	d140      	bne.n	51a8 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5126:	4653      	mov	r3, sl
    5128:	f06f 0101 	mvn.w	r1, #1
    512c:	ebb1 010a 	subs.w	r1, r1, sl
    5130:	f04f 30ff 	mov.w	r0, #4294967295
    5134:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5138:	2a00      	cmp	r2, #0
    513a:	dbcb      	blt.n	50d4 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    513c:	4a1d      	ldr	r2, [pc, #116]	; (51b4 <z_add_timeout+0x10c>)
    513e:	6811      	ldr	r1, [r2, #0]
    5140:	6852      	ldr	r2, [r2, #4]
    5142:	185b      	adds	r3, r3, r1
    5144:	eb42 0205 	adc.w	r2, r2, r5
    5148:	f06f 0101 	mvn.w	r1, #1
    514c:	1ac9      	subs	r1, r1, r3
    514e:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    5152:	4608      	mov	r0, r1
    5154:	461a      	mov	r2, r3
    5156:	2901      	cmp	r1, #1
    5158:	f173 0300 	sbcs.w	r3, r3, #0
    515c:	da01      	bge.n	5162 <z_add_timeout+0xba>
    515e:	2001      	movs	r0, #1
    5160:	2200      	movs	r2, #0
    5162:	6120      	str	r0, [r4, #16]
    5164:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    5166:	f7ff ff57 	bl	5018 <first>
    516a:	2800      	cmp	r0, #0
    516c:	d0ca      	beq.n	5104 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    516e:	6902      	ldr	r2, [r0, #16]
    5170:	6946      	ldr	r6, [r0, #20]
    5172:	6921      	ldr	r1, [r4, #16]
    5174:	6963      	ldr	r3, [r4, #20]
    5176:	4291      	cmp	r1, r2
    5178:	eb73 0e06 	sbcs.w	lr, r3, r6
    517c:	dbb7      	blt.n	50ee <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    517e:	1a89      	subs	r1, r1, r2
    5180:	eb63 0306 	sbc.w	r3, r3, r6
    5184:	6121      	str	r1, [r4, #16]
    5186:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    5188:	f7ff ff50 	bl	502c <next>
    518c:	e7ed      	b.n	516a <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    518e:	f7ff ff65 	bl	505c <next_timeout>

			if (next_time == 0 ||
    5192:	4603      	mov	r3, r0
    5194:	b118      	cbz	r0, 519e <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
    5196:	4a08      	ldr	r2, [pc, #32]	; (51b8 <z_add_timeout+0x110>)
    5198:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    519a:	4282      	cmp	r2, r0
    519c:	d0bc      	beq.n	5118 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
    519e:	2100      	movs	r1, #0
    51a0:	4618      	mov	r0, r3
    51a2:	f7fd fc39 	bl	2a18 <sys_clock_set_timeout>
    51a6:	e7b7      	b.n	5118 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    51a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51ac:	4770      	bx	lr
    51ae:	bf00      	nop
    51b0:	20000118 	.word	0x20000118
    51b4:	200003b8 	.word	0x200003b8
    51b8:	20000b98 	.word	0x20000b98

000051bc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    51bc:	b570      	push	{r4, r5, r6, lr}
    51be:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    51c0:	f7ff fc3e 	bl	4a40 <z_time_slice>
	__asm__ volatile(
    51c4:	f04f 0320 	mov.w	r3, #32
    51c8:	f3ef 8611 	mrs	r6, BASEPRI
    51cc:	f383 8812 	msr	BASEPRI_MAX, r3
    51d0:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    51d4:	4b28      	ldr	r3, [pc, #160]	; (5278 <sys_clock_announce+0xbc>)
    51d6:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    51d8:	e021      	b.n	521e <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    51da:	4a28      	ldr	r2, [pc, #160]	; (527c <sys_clock_announce+0xc0>)
    51dc:	6813      	ldr	r3, [r2, #0]
    51de:	6851      	ldr	r1, [r2, #4]
    51e0:	195b      	adds	r3, r3, r5
    51e2:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    51e6:	6013      	str	r3, [r2, #0]
    51e8:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    51ea:	2200      	movs	r2, #0
    51ec:	2300      	movs	r3, #0
    51ee:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    51f2:	4620      	mov	r0, r4
    51f4:	f002 fbd1 	bl	799a <remove_timeout>
	__asm__ volatile(
    51f8:	f386 8811 	msr	BASEPRI, r6
    51fc:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    5200:	68a3      	ldr	r3, [r4, #8]
    5202:	4620      	mov	r0, r4
    5204:	4798      	blx	r3
	__asm__ volatile(
    5206:	f04f 0320 	mov.w	r3, #32
    520a:	f3ef 8611 	mrs	r6, BASEPRI
    520e:	f383 8812 	msr	BASEPRI_MAX, r3
    5212:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    5216:	4a18      	ldr	r2, [pc, #96]	; (5278 <sys_clock_announce+0xbc>)
    5218:	6813      	ldr	r3, [r2, #0]
    521a:	1b5b      	subs	r3, r3, r5
    521c:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    521e:	f7ff fefb 	bl	5018 <first>
    5222:	4604      	mov	r4, r0
    5224:	b138      	cbz	r0, 5236 <sys_clock_announce+0x7a>
    5226:	6905      	ldr	r5, [r0, #16]
    5228:	6941      	ldr	r1, [r0, #20]
    522a:	4b13      	ldr	r3, [pc, #76]	; (5278 <sys_clock_announce+0xbc>)
    522c:	681a      	ldr	r2, [r3, #0]
    522e:	17d3      	asrs	r3, r2, #31
    5230:	42aa      	cmp	r2, r5
    5232:	418b      	sbcs	r3, r1
    5234:	dad1      	bge.n	51da <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
    5236:	b144      	cbz	r4, 524a <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    5238:	6923      	ldr	r3, [r4, #16]
    523a:	6962      	ldr	r2, [r4, #20]
    523c:	490e      	ldr	r1, [pc, #56]	; (5278 <sys_clock_announce+0xbc>)
    523e:	6809      	ldr	r1, [r1, #0]
    5240:	1a5b      	subs	r3, r3, r1
    5242:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    5246:	6123      	str	r3, [r4, #16]
    5248:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    524a:	4a0c      	ldr	r2, [pc, #48]	; (527c <sys_clock_announce+0xc0>)
    524c:	4d0a      	ldr	r5, [pc, #40]	; (5278 <sys_clock_announce+0xbc>)
    524e:	6828      	ldr	r0, [r5, #0]
    5250:	6813      	ldr	r3, [r2, #0]
    5252:	6851      	ldr	r1, [r2, #4]
    5254:	181b      	adds	r3, r3, r0
    5256:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    525a:	6013      	str	r3, [r2, #0]
    525c:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    525e:	2400      	movs	r4, #0
    5260:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5262:	f7ff fefb 	bl	505c <next_timeout>
    5266:	4621      	mov	r1, r4
    5268:	f7fd fbd6 	bl	2a18 <sys_clock_set_timeout>
	__asm__ volatile(
    526c:	f386 8811 	msr	BASEPRI, r6
    5270:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5274:	bd70      	pop	{r4, r5, r6, pc}
    5276:	bf00      	nop
    5278:	20000bd8 	.word	0x20000bd8
    527c:	200003b8 	.word	0x200003b8

00005280 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5280:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    5282:	2200      	movs	r2, #0
	__asm__ volatile(
    5284:	f04f 0320 	mov.w	r3, #32
    5288:	f3ef 8411 	mrs	r4, BASEPRI
    528c:	f383 8812 	msr	BASEPRI_MAX, r3
    5290:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    5294:	4613      	mov	r3, r2
    5296:	4611      	mov	r1, r2
    5298:	e00c      	b.n	52b4 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    529a:	f7ff fed3 	bl	5044 <elapsed>
    529e:	4a07      	ldr	r2, [pc, #28]	; (52bc <sys_clock_tick_get+0x3c>)
    52a0:	6813      	ldr	r3, [r2, #0]
    52a2:	6851      	ldr	r1, [r2, #4]
    52a4:	18c3      	adds	r3, r0, r3
    52a6:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    52aa:	f384 8811 	msr	BASEPRI, r4
    52ae:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    52b2:	2201      	movs	r2, #1
    52b4:	2a00      	cmp	r2, #0
    52b6:	d0f0      	beq.n	529a <sys_clock_tick_get+0x1a>
	}
	return t;
}
    52b8:	4618      	mov	r0, r3
    52ba:	bd10      	pop	{r4, pc}
    52bc:	200003b8 	.word	0x200003b8

000052c0 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    52c0:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    52c2:	4802      	ldr	r0, [pc, #8]	; (52cc <boot_banner+0xc>)
    52c4:	f000 f9eb 	bl	569e <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    52c8:	bd08      	pop	{r3, pc}
    52ca:	bf00      	nop
    52cc:	00008314 	.word	0x00008314

000052d0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    52d0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    52d2:	4c06      	ldr	r4, [pc, #24]	; (52ec <statics_init+0x1c>)
    52d4:	e005      	b.n	52e2 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    52d6:	68a2      	ldr	r2, [r4, #8]
    52d8:	6861      	ldr	r1, [r4, #4]
    52da:	4620      	mov	r0, r4
    52dc:	f002 fbde 	bl	7a9c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    52e0:	3414      	adds	r4, #20
    52e2:	4b03      	ldr	r3, [pc, #12]	; (52f0 <statics_init+0x20>)
    52e4:	429c      	cmp	r4, r3
    52e6:	d3f6      	bcc.n	52d6 <statics_init+0x6>
		}
	}
	return 0;
}
    52e8:	2000      	movs	r0, #0
    52ea:	bd10      	pop	{r4, pc}
    52ec:	2000018b 	.word	0x2000018b
    52f0:	2000018b 	.word	0x2000018b

000052f4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    52f4:	b510      	push	{r4, lr}
    52f6:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    52f8:	4b08      	ldr	r3, [pc, #32]	; (531c <k_sys_work_q_init+0x28>)
    52fa:	9302      	str	r3, [sp, #8]
    52fc:	2400      	movs	r4, #0
    52fe:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    5302:	ab02      	add	r3, sp, #8
    5304:	9300      	str	r3, [sp, #0]
    5306:	f04f 33ff 	mov.w	r3, #4294967295
    530a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    530e:	4904      	ldr	r1, [pc, #16]	; (5320 <k_sys_work_q_init+0x2c>)
    5310:	4804      	ldr	r0, [pc, #16]	; (5324 <k_sys_work_q_init+0x30>)
    5312:	f7ff fa19 	bl	4748 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    5316:	4620      	mov	r0, r4
    5318:	b004      	add	sp, #16
    531a:	bd10      	pop	{r4, pc}
    531c:	00008344 	.word	0x00008344
    5320:	20001b00 	.word	0x20001b00
    5324:	200003c0 	.word	0x200003c0

00005328 <nrf_cc3xx_platform_init_no_rng>:
    5328:	b510      	push	{r4, lr}
    532a:	4c0a      	ldr	r4, [pc, #40]	; (5354 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    532c:	6823      	ldr	r3, [r4, #0]
    532e:	b11b      	cbz	r3, 5338 <nrf_cc3xx_platform_init_no_rng+0x10>
    5330:	2301      	movs	r3, #1
    5332:	2000      	movs	r0, #0
    5334:	6023      	str	r3, [r4, #0]
    5336:	bd10      	pop	{r4, pc}
    5338:	f000 f8f4 	bl	5524 <CC_LibInitNoRng>
    533c:	2800      	cmp	r0, #0
    533e:	d0f7      	beq.n	5330 <nrf_cc3xx_platform_init_no_rng+0x8>
    5340:	3801      	subs	r0, #1
    5342:	2807      	cmp	r0, #7
    5344:	d803      	bhi.n	534e <nrf_cc3xx_platform_init_no_rng+0x26>
    5346:	4b04      	ldr	r3, [pc, #16]	; (5358 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5348:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    534c:	bd10      	pop	{r4, pc}
    534e:	4803      	ldr	r0, [pc, #12]	; (535c <nrf_cc3xx_platform_init_no_rng+0x34>)
    5350:	bd10      	pop	{r4, pc}
    5352:	bf00      	nop
    5354:	20000bdc 	.word	0x20000bdc
    5358:	00008350 	.word	0x00008350
    535c:	ffff8ffe 	.word	0xffff8ffe

00005360 <nrf_cc3xx_platform_abort>:
    5360:	f3bf 8f4f 	dsb	sy
    5364:	4905      	ldr	r1, [pc, #20]	; (537c <nrf_cc3xx_platform_abort+0x1c>)
    5366:	4b06      	ldr	r3, [pc, #24]	; (5380 <nrf_cc3xx_platform_abort+0x20>)
    5368:	68ca      	ldr	r2, [r1, #12]
    536a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    536e:	4313      	orrs	r3, r2
    5370:	60cb      	str	r3, [r1, #12]
    5372:	f3bf 8f4f 	dsb	sy
    5376:	bf00      	nop
    5378:	e7fd      	b.n	5376 <nrf_cc3xx_platform_abort+0x16>
    537a:	bf00      	nop
    537c:	e000ed00 	.word	0xe000ed00
    5380:	05fa0004 	.word	0x05fa0004

00005384 <CC_PalAbort>:
    5384:	b430      	push	{r4, r5}
    5386:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    538a:	2500      	movs	r5, #0
    538c:	4b0b      	ldr	r3, [pc, #44]	; (53bc <CC_PalAbort+0x38>)
    538e:	4c0c      	ldr	r4, [pc, #48]	; (53c0 <CC_PalAbort+0x3c>)
    5390:	490c      	ldr	r1, [pc, #48]	; (53c4 <CC_PalAbort+0x40>)
    5392:	6849      	ldr	r1, [r1, #4]
    5394:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    5398:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    539c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    53a0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    53a4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    53a8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    53ac:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    53b0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    53b4:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    53b8:	bc30      	pop	{r4, r5}
    53ba:	4708      	bx	r1
    53bc:	50845000 	.word	0x50845000
    53c0:	50844000 	.word	0x50844000
    53c4:	20000120 	.word	0x20000120

000053c8 <nrf_cc3xx_platform_set_abort>:
    53c8:	4b02      	ldr	r3, [pc, #8]	; (53d4 <nrf_cc3xx_platform_set_abort+0xc>)
    53ca:	e9d0 1200 	ldrd	r1, r2, [r0]
    53ce:	e9c3 1200 	strd	r1, r2, [r3]
    53d2:	4770      	bx	lr
    53d4:	20000120 	.word	0x20000120

000053d8 <mutex_free>:
    53d8:	b510      	push	{r4, lr}
    53da:	4604      	mov	r4, r0
    53dc:	b150      	cbz	r0, 53f4 <mutex_free+0x1c>
    53de:	6863      	ldr	r3, [r4, #4]
    53e0:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    53e4:	d005      	beq.n	53f2 <mutex_free+0x1a>
    53e6:	4a06      	ldr	r2, [pc, #24]	; (5400 <mutex_free+0x28>)
    53e8:	4293      	cmp	r3, r2
    53ea:	d002      	beq.n	53f2 <mutex_free+0x1a>
    53ec:	2300      	movs	r3, #0
    53ee:	6062      	str	r2, [r4, #4]
    53f0:	6023      	str	r3, [r4, #0]
    53f2:	bd10      	pop	{r4, pc}
    53f4:	4b03      	ldr	r3, [pc, #12]	; (5404 <mutex_free+0x2c>)
    53f6:	4804      	ldr	r0, [pc, #16]	; (5408 <mutex_free+0x30>)
    53f8:	685b      	ldr	r3, [r3, #4]
    53fa:	4798      	blx	r3
    53fc:	e7ef      	b.n	53de <mutex_free+0x6>
    53fe:	bf00      	nop
    5400:	a95c5f2c 	.word	0xa95c5f2c
    5404:	20000120 	.word	0x20000120
    5408:	00008370 	.word	0x00008370

0000540c <mutex_lock>:
    540c:	b1c8      	cbz	r0, 5442 <mutex_lock+0x36>
    540e:	6843      	ldr	r3, [r0, #4]
    5410:	4a0d      	ldr	r2, [pc, #52]	; (5448 <mutex_lock+0x3c>)
    5412:	4293      	cmp	r3, r2
    5414:	d013      	beq.n	543e <mutex_lock+0x32>
    5416:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    541a:	d00e      	beq.n	543a <mutex_lock+0x2e>
    541c:	2301      	movs	r3, #1
    541e:	e850 2f00 	ldrex	r2, [r0]
    5422:	4619      	mov	r1, r3
    5424:	e840 1c00 	strex	ip, r1, [r0]
    5428:	f09c 0f00 	teq	ip, #0
    542c:	d1f7      	bne.n	541e <mutex_lock+0x12>
    542e:	2a01      	cmp	r2, #1
    5430:	d0f5      	beq.n	541e <mutex_lock+0x12>
    5432:	f3bf 8f5f 	dmb	sy
    5436:	2000      	movs	r0, #0
    5438:	4770      	bx	lr
    543a:	4804      	ldr	r0, [pc, #16]	; (544c <mutex_lock+0x40>)
    543c:	4770      	bx	lr
    543e:	4804      	ldr	r0, [pc, #16]	; (5450 <mutex_lock+0x44>)
    5440:	4770      	bx	lr
    5442:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5446:	4770      	bx	lr
    5448:	a95c5f2c 	.word	0xa95c5f2c
    544c:	ffff8fe9 	.word	0xffff8fe9
    5450:	ffff8fea 	.word	0xffff8fea

00005454 <mutex_unlock>:
    5454:	4603      	mov	r3, r0
    5456:	b180      	cbz	r0, 547a <mutex_unlock+0x26>
    5458:	6842      	ldr	r2, [r0, #4]
    545a:	4909      	ldr	r1, [pc, #36]	; (5480 <mutex_unlock+0x2c>)
    545c:	428a      	cmp	r2, r1
    545e:	d00a      	beq.n	5476 <mutex_unlock+0x22>
    5460:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    5464:	d005      	beq.n	5472 <mutex_unlock+0x1e>
    5466:	f3bf 8f5f 	dmb	sy
    546a:	2200      	movs	r2, #0
    546c:	4610      	mov	r0, r2
    546e:	601a      	str	r2, [r3, #0]
    5470:	4770      	bx	lr
    5472:	4804      	ldr	r0, [pc, #16]	; (5484 <mutex_unlock+0x30>)
    5474:	4770      	bx	lr
    5476:	4804      	ldr	r0, [pc, #16]	; (5488 <mutex_unlock+0x34>)
    5478:	4770      	bx	lr
    547a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    547e:	4770      	bx	lr
    5480:	a95c5f2c 	.word	0xa95c5f2c
    5484:	ffff8fe9 	.word	0xffff8fe9
    5488:	ffff8fea 	.word	0xffff8fea

0000548c <mutex_init>:
    548c:	b510      	push	{r4, lr}
    548e:	4604      	mov	r4, r0
    5490:	b120      	cbz	r0, 549c <mutex_init+0x10>
    5492:	2300      	movs	r3, #0
    5494:	4a03      	ldr	r2, [pc, #12]	; (54a4 <mutex_init+0x18>)
    5496:	6023      	str	r3, [r4, #0]
    5498:	6062      	str	r2, [r4, #4]
    549a:	bd10      	pop	{r4, pc}
    549c:	4802      	ldr	r0, [pc, #8]	; (54a8 <mutex_init+0x1c>)
    549e:	f7ff ff71 	bl	5384 <CC_PalAbort>
    54a2:	e7f6      	b.n	5492 <mutex_init+0x6>
    54a4:	3a00003a 	.word	0x3a00003a
    54a8:	00008398 	.word	0x00008398

000054ac <nrf_cc3xx_platform_set_mutexes>:
    54ac:	b570      	push	{r4, r5, r6, lr}
    54ae:	4c19      	ldr	r4, [pc, #100]	; (5514 <nrf_cc3xx_platform_set_mutexes+0x68>)
    54b0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    54b4:	6806      	ldr	r6, [r0, #0]
    54b6:	f8c4 c004 	str.w	ip, [r4, #4]
    54ba:	f8d0 c008 	ldr.w	ip, [r0, #8]
    54be:	68c0      	ldr	r0, [r0, #12]
    54c0:	f8c4 c008 	str.w	ip, [r4, #8]
    54c4:	60e0      	str	r0, [r4, #12]
    54c6:	6026      	str	r6, [r4, #0]
    54c8:	6808      	ldr	r0, [r1, #0]
    54ca:	4b13      	ldr	r3, [pc, #76]	; (5518 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    54cc:	4d13      	ldr	r5, [pc, #76]	; (551c <nrf_cc3xx_platform_set_mutexes+0x70>)
    54ce:	6018      	str	r0, [r3, #0]
    54d0:	6848      	ldr	r0, [r1, #4]
    54d2:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    54d6:	6058      	str	r0, [r3, #4]
    54d8:	6888      	ldr	r0, [r1, #8]
    54da:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    54de:	6098      	str	r0, [r3, #8]
    54e0:	68c8      	ldr	r0, [r1, #12]
    54e2:	6909      	ldr	r1, [r1, #16]
    54e4:	60d8      	str	r0, [r3, #12]
    54e6:	6119      	str	r1, [r3, #16]
    54e8:	d012      	beq.n	5510 <nrf_cc3xx_platform_set_mutexes+0x64>
    54ea:	2300      	movs	r3, #0
    54ec:	4a0c      	ldr	r2, [pc, #48]	; (5520 <nrf_cc3xx_platform_set_mutexes+0x74>)
    54ee:	f505 708a 	add.w	r0, r5, #276	; 0x114
    54f2:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    54f6:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    54fa:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    54fe:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    5502:	47b0      	blx	r6
    5504:	6823      	ldr	r3, [r4, #0]
    5506:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    550a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    550e:	4718      	bx	r3
    5510:	bd70      	pop	{r4, r5, r6, pc}
    5512:	bf00      	nop
    5514:	20000130 	.word	0x20000130
    5518:	20000140 	.word	0x20000140
    551c:	20000bf4 	.word	0x20000bf4
    5520:	a95c5f2c 	.word	0xa95c5f2c

00005524 <CC_LibInitNoRng>:
    5524:	b508      	push	{r3, lr}
    5526:	f000 f811 	bl	554c <CC_HalInit>
    552a:	b930      	cbnz	r0, 553a <CC_LibInitNoRng+0x16>
    552c:	f000 f810 	bl	5550 <CC_PalInit>
    5530:	b938      	cbnz	r0, 5542 <CC_LibInitNoRng+0x1e>
    5532:	4a05      	ldr	r2, [pc, #20]	; (5548 <CC_LibInitNoRng+0x24>)
    5534:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    5538:	bd08      	pop	{r3, pc}
    553a:	f000 f837 	bl	55ac <CC_PalTerminate>
    553e:	2003      	movs	r0, #3
    5540:	bd08      	pop	{r3, pc}
    5542:	2004      	movs	r0, #4
    5544:	bd08      	pop	{r3, pc}
    5546:	bf00      	nop
    5548:	50845000 	.word	0x50845000

0000554c <CC_HalInit>:
    554c:	2000      	movs	r0, #0
    554e:	4770      	bx	lr

00005550 <CC_PalInit>:
    5550:	b510      	push	{r4, lr}
    5552:	4811      	ldr	r0, [pc, #68]	; (5598 <CC_PalInit+0x48>)
    5554:	f000 f848 	bl	55e8 <CC_PalMutexCreate>
    5558:	b100      	cbz	r0, 555c <CC_PalInit+0xc>
    555a:	bd10      	pop	{r4, pc}
    555c:	480f      	ldr	r0, [pc, #60]	; (559c <CC_PalInit+0x4c>)
    555e:	f000 f843 	bl	55e8 <CC_PalMutexCreate>
    5562:	2800      	cmp	r0, #0
    5564:	d1f9      	bne.n	555a <CC_PalInit+0xa>
    5566:	4c0e      	ldr	r4, [pc, #56]	; (55a0 <CC_PalInit+0x50>)
    5568:	4620      	mov	r0, r4
    556a:	f000 f83d 	bl	55e8 <CC_PalMutexCreate>
    556e:	2800      	cmp	r0, #0
    5570:	d1f3      	bne.n	555a <CC_PalInit+0xa>
    5572:	4b0c      	ldr	r3, [pc, #48]	; (55a4 <CC_PalInit+0x54>)
    5574:	480c      	ldr	r0, [pc, #48]	; (55a8 <CC_PalInit+0x58>)
    5576:	601c      	str	r4, [r3, #0]
    5578:	f000 f836 	bl	55e8 <CC_PalMutexCreate>
    557c:	4601      	mov	r1, r0
    557e:	2800      	cmp	r0, #0
    5580:	d1eb      	bne.n	555a <CC_PalInit+0xa>
    5582:	f000 f82d 	bl	55e0 <CC_PalDmaInit>
    5586:	4604      	mov	r4, r0
    5588:	b108      	cbz	r0, 558e <CC_PalInit+0x3e>
    558a:	4620      	mov	r0, r4
    558c:	bd10      	pop	{r4, pc}
    558e:	f000 f83f 	bl	5610 <CC_PalPowerSaveModeInit>
    5592:	4620      	mov	r0, r4
    5594:	e7fa      	b.n	558c <CC_PalInit+0x3c>
    5596:	bf00      	nop
    5598:	20000178 	.word	0x20000178
    559c:	2000016c 	.word	0x2000016c
    55a0:	20000174 	.word	0x20000174
    55a4:	2000017c 	.word	0x2000017c
    55a8:	20000170 	.word	0x20000170

000055ac <CC_PalTerminate>:
    55ac:	b508      	push	{r3, lr}
    55ae:	4808      	ldr	r0, [pc, #32]	; (55d0 <CC_PalTerminate+0x24>)
    55b0:	f000 f824 	bl	55fc <CC_PalMutexDestroy>
    55b4:	4807      	ldr	r0, [pc, #28]	; (55d4 <CC_PalTerminate+0x28>)
    55b6:	f000 f821 	bl	55fc <CC_PalMutexDestroy>
    55ba:	4807      	ldr	r0, [pc, #28]	; (55d8 <CC_PalTerminate+0x2c>)
    55bc:	f000 f81e 	bl	55fc <CC_PalMutexDestroy>
    55c0:	4806      	ldr	r0, [pc, #24]	; (55dc <CC_PalTerminate+0x30>)
    55c2:	f000 f81b 	bl	55fc <CC_PalMutexDestroy>
    55c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    55ca:	f000 b80b 	b.w	55e4 <CC_PalDmaTerminate>
    55ce:	bf00      	nop
    55d0:	20000178 	.word	0x20000178
    55d4:	2000016c 	.word	0x2000016c
    55d8:	20000174 	.word	0x20000174
    55dc:	20000170 	.word	0x20000170

000055e0 <CC_PalDmaInit>:
    55e0:	2000      	movs	r0, #0
    55e2:	4770      	bx	lr

000055e4 <CC_PalDmaTerminate>:
    55e4:	4770      	bx	lr
    55e6:	bf00      	nop

000055e8 <CC_PalMutexCreate>:
    55e8:	b508      	push	{r3, lr}
    55ea:	4b03      	ldr	r3, [pc, #12]	; (55f8 <CC_PalMutexCreate+0x10>)
    55ec:	6802      	ldr	r2, [r0, #0]
    55ee:	681b      	ldr	r3, [r3, #0]
    55f0:	6810      	ldr	r0, [r2, #0]
    55f2:	4798      	blx	r3
    55f4:	2000      	movs	r0, #0
    55f6:	bd08      	pop	{r3, pc}
    55f8:	20000130 	.word	0x20000130

000055fc <CC_PalMutexDestroy>:
    55fc:	b508      	push	{r3, lr}
    55fe:	4b03      	ldr	r3, [pc, #12]	; (560c <CC_PalMutexDestroy+0x10>)
    5600:	6802      	ldr	r2, [r0, #0]
    5602:	685b      	ldr	r3, [r3, #4]
    5604:	6810      	ldr	r0, [r2, #0]
    5606:	4798      	blx	r3
    5608:	2000      	movs	r0, #0
    560a:	bd08      	pop	{r3, pc}
    560c:	20000130 	.word	0x20000130

00005610 <CC_PalPowerSaveModeInit>:
    5610:	b570      	push	{r4, r5, r6, lr}
    5612:	4c09      	ldr	r4, [pc, #36]	; (5638 <CC_PalPowerSaveModeInit+0x28>)
    5614:	4d09      	ldr	r5, [pc, #36]	; (563c <CC_PalPowerSaveModeInit+0x2c>)
    5616:	6920      	ldr	r0, [r4, #16]
    5618:	68ab      	ldr	r3, [r5, #8]
    561a:	4798      	blx	r3
    561c:	b118      	cbz	r0, 5626 <CC_PalPowerSaveModeInit+0x16>
    561e:	4b08      	ldr	r3, [pc, #32]	; (5640 <CC_PalPowerSaveModeInit+0x30>)
    5620:	4808      	ldr	r0, [pc, #32]	; (5644 <CC_PalPowerSaveModeInit+0x34>)
    5622:	685b      	ldr	r3, [r3, #4]
    5624:	4798      	blx	r3
    5626:	2100      	movs	r1, #0
    5628:	4a07      	ldr	r2, [pc, #28]	; (5648 <CC_PalPowerSaveModeInit+0x38>)
    562a:	68eb      	ldr	r3, [r5, #12]
    562c:	6011      	str	r1, [r2, #0]
    562e:	6920      	ldr	r0, [r4, #16]
    5630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5634:	4718      	bx	r3
    5636:	bf00      	nop
    5638:	20000140 	.word	0x20000140
    563c:	20000130 	.word	0x20000130
    5640:	20000120 	.word	0x20000120
    5644:	000083bc 	.word	0x000083bc
    5648:	20000bf0 	.word	0x20000bf0

0000564c <main>:

#include "led_key_logic.h"
#include "uart_logic.h"

void main(void)
{
    564c:	b508      	push	{r3, lr}
    led_key_gpio_init();
    564e:	f7fa ff6f 	bl	530 <led_key_gpio_init>
    uart_init();
    5652:	f7fa ffd9 	bl	608 <uart_init>

    for(;;)
    {
        uart_event_handle();
    5656:	f7fa ffff 	bl	658 <uart_event_handle>
    for(;;)
    565a:	e7fc      	b.n	5656 <main+0xa>

0000565c <uart_fifo_read>:
{
    565c:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    565e:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read == NULL) {
    5660:	699b      	ldr	r3, [r3, #24]
    5662:	b10b      	cbz	r3, 5668 <uart_fifo_read+0xc>
	return api->fifo_read(dev, rx_data, size);
    5664:	4798      	blx	r3
}
    5666:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    5668:	f06f 0057 	mvn.w	r0, #87	; 0x57
    566c:	e7fb      	b.n	5666 <uart_fifo_read+0xa>

0000566e <uart_irq_callback_user_data_set>:
 * @param user_data Data to pass to callback function.
 */
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
    566e:	b508      	push	{r3, lr}
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    5670:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    5672:	b113      	cbz	r3, 567a <uart_irq_callback_user_data_set+0xc>
    5674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5676:	b103      	cbz	r3, 567a <uart_irq_callback_user_data_set+0xc>
		api->irq_callback_set(dev, cb, user_data);
    5678:	4798      	blx	r3
#else
	ARG_UNUSED(dev);
	ARG_UNUSED(cb);
	ARG_UNUSED(user_data);
#endif
}
    567a:	bd08      	pop	{r3, pc}

0000567c <uart_irq_rx_enable>:

extern void z_impl_uart_irq_rx_enable(const struct device * dev);

__pinned_func
static inline void uart_irq_rx_enable(const struct device * dev)
{
    567c:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    567e:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_enable != NULL) {
    5680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5682:	b103      	cbz	r3, 5686 <uart_irq_rx_enable+0xa>
		api->irq_rx_enable(dev);
    5684:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
}
    5686:	bd08      	pop	{r3, pc}

00005688 <uart_irq_update>:

extern int z_impl_uart_irq_update(const struct device * dev);

__pinned_func
static inline int uart_irq_update(const struct device * dev)
{
    5688:	b508      	push	{r3, lr}
	const struct uart_driver_api *api =
    568a:	6883      	ldr	r3, [r0, #8]
	if (api->irq_update == NULL) {
    568c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    568e:	b10b      	cbz	r3, 5694 <uart_irq_update+0xc>
	return api->irq_update(dev);
    5690:	4798      	blx	r3
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_UPDATE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_irq_update(dev);
}
    5692:	bd08      	pop	{r3, pc}
		return -ENOSYS;
    5694:	f06f 0057 	mvn.w	r0, #87	; 0x57
	return z_impl_uart_irq_update(dev);
    5698:	e7fb      	b.n	5692 <uart_irq_update+0xa>

0000569a <arch_printk_char_out>:
}
    569a:	2000      	movs	r0, #0
    569c:	4770      	bx	lr

0000569e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    569e:	b40f      	push	{r0, r1, r2, r3}
    56a0:	b500      	push	{lr}
    56a2:	b083      	sub	sp, #12
    56a4:	a904      	add	r1, sp, #16
    56a6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    56aa:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    56ac:	f7fb f800 	bl	6b0 <vprintk>

	va_end(ap);
}
    56b0:	b003      	add	sp, #12
    56b2:	f85d eb04 	ldr.w	lr, [sp], #4
    56b6:	b004      	add	sp, #16
    56b8:	4770      	bx	lr

000056ba <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    56ba:	b508      	push	{r3, lr}
    56bc:	4604      	mov	r4, r0
    56be:	4608      	mov	r0, r1
    56c0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    56c2:	461a      	mov	r2, r3
    56c4:	47a0      	blx	r4
	return z_impl_z_current_get();
    56c6:	f7ff fc3b 	bl	4f40 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    56ca:	f7fc fa29 	bl	1b20 <z_impl_k_thread_abort>

000056ce <set_chunk_used>:
}

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    56ce:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    56d2:	6883      	ldr	r3, [r0, #8]

	if (big_heap(h)) {
    56d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    56d8:	d30a      	bcc.n	56f0 <set_chunk_used+0x22>
		if (used) {
    56da:	b122      	cbz	r2, 56e6 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    56dc:	684b      	ldr	r3, [r1, #4]
    56de:	f043 0301 	orr.w	r3, r3, #1
    56e2:	604b      	str	r3, [r1, #4]
    56e4:	4770      	bx	lr
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    56e6:	684b      	ldr	r3, [r1, #4]
    56e8:	f023 0301 	bic.w	r3, r3, #1
    56ec:	604b      	str	r3, [r1, #4]
    56ee:	4770      	bx	lr
		}
	} else {
		if (used) {
    56f0:	b122      	cbz	r2, 56fc <set_chunk_used+0x2e>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    56f2:	884b      	ldrh	r3, [r1, #2]
    56f4:	f043 0301 	orr.w	r3, r3, #1
    56f8:	804b      	strh	r3, [r1, #2]
    56fa:	4770      	bx	lr
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    56fc:	884b      	ldrh	r3, [r1, #2]
    56fe:	f023 0301 	bic.w	r3, r3, #1
    5702:	804b      	strh	r3, [r1, #2]
		}
	}
}
    5704:	4770      	bx	lr

00005706 <free_list_add_bidx>:

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    5706:	1d13      	adds	r3, r2, #4
    5708:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    570c:	b9db      	cbnz	r3, 5746 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
    570e:	68c3      	ldr	r3, [r0, #12]
    5710:	f04f 0c01 	mov.w	ip, #1
    5714:	fa0c fc02 	lsl.w	ip, ip, r2
    5718:	ea43 030c 	orr.w	r3, r3, ip
    571c:	60c3      	str	r3, [r0, #12]
		b->next = c;
    571e:	3204      	adds	r2, #4
    5720:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    5724:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    5728:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    572a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    572e:	d306      	bcc.n	573e <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
    5730:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
    5732:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    5734:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    5738:	d303      	bcc.n	5742 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
    573a:	60d9      	str	r1, [r3, #12]
    573c:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
    573e:	8099      	strh	r1, [r3, #4]
    5740:	e7f7      	b.n	5732 <free_list_add_bidx+0x2c>
    5742:	80d9      	strh	r1, [r3, #6]
    5744:	4770      	bx	lr
{
    5746:	b510      	push	{r4, lr}
	void *cmem = &buf[c];
    5748:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    574c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    574e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    5752:	d31c      	bcc.n	578e <free_list_add_bidx+0x88>
		return ((uint32_t *)cmem)[f];
    5754:	f8dc 2008 	ldr.w	r2, [ip, #8]
	void *cmem = &buf[c];
    5758:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
	if (big_heap(h)) {
    575c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    5760:	d318      	bcc.n	5794 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
    5762:	f8ce 2008 	str.w	r2, [lr, #8]
	return big_heap_chunks(h->end_chunk);
    5766:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    5768:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    576c:	d315      	bcc.n	579a <free_list_add_bidx+0x94>
		((uint32_t *)cmem)[f] = val;
    576e:	f8ce 300c 	str.w	r3, [lr, #12]
	void *cmem = &buf[c];
    5772:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    5776:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    5778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    577c:	d310      	bcc.n	57a0 <free_list_add_bidx+0x9a>
		((uint32_t *)cmem)[f] = val;
    577e:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
    5780:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    5782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5786:	d30d      	bcc.n	57a4 <free_list_add_bidx+0x9e>
		((uint32_t *)cmem)[f] = val;
    5788:	f8cc 1008 	str.w	r1, [ip, #8]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    578c:	bd10      	pop	{r4, pc}
		return ((uint16_t *)cmem)[f];
    578e:	f8bc 2004 	ldrh.w	r2, [ip, #4]
    5792:	e7e1      	b.n	5758 <free_list_add_bidx+0x52>
		((uint16_t *)cmem)[f] = val;
    5794:	f8ae 2004 	strh.w	r2, [lr, #4]
    5798:	e7e5      	b.n	5766 <free_list_add_bidx+0x60>
    579a:	f8ae 3006 	strh.w	r3, [lr, #6]
    579e:	e7e8      	b.n	5772 <free_list_add_bidx+0x6c>
    57a0:	80d1      	strh	r1, [r2, #6]
    57a2:	e7ed      	b.n	5780 <free_list_add_bidx+0x7a>
    57a4:	f8ac 1004 	strh.w	r1, [ip, #4]
    57a8:	e7f0      	b.n	578c <free_list_add_bidx+0x86>

000057aa <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    57aa:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    57ac:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
    57ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    57b2:	d307      	bcc.n	57c4 <free_list_add+0x1a>
	void *cmem = &buf[c];
    57b4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    57b8:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    57ba:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    57bc:	2a01      	cmp	r2, #1
    57be:	d002      	beq.n	57c6 <free_list_add+0x1c>
    57c0:	2200      	movs	r2, #0
    57c2:	e000      	b.n	57c6 <free_list_add+0x1c>
    57c4:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    57c6:	b9a2      	cbnz	r2, 57f2 <free_list_add+0x48>
	void *cmem = &buf[c];
    57c8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    57cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    57d0:	d310      	bcc.n	57f4 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
    57d2:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    57d4:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    57d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    57da:	d30d      	bcc.n	57f8 <free_list_add+0x4e>
    57dc:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    57de:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    57e0:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    57e4:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    57e6:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
    57ea:	f1c2 021f 	rsb	r2, r2, #31
    57ee:	f7ff ff8a 	bl	5706 <free_list_add_bidx>
	}
}
    57f2:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    57f4:	8852      	ldrh	r2, [r2, #2]
    57f6:	e7ed      	b.n	57d4 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
    57f8:	2304      	movs	r3, #4
    57fa:	e7f0      	b.n	57de <free_list_add+0x34>

000057fc <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    57fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_bytes(size) ? 8 : 4;
    57fe:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    5802:	d323      	bcc.n	584c <sys_heap_init+0x50>
    5804:	2308      	movs	r3, #8
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    5806:	1ad2      	subs	r2, r2, r3

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    5808:	1dcc      	adds	r4, r1, #7
    580a:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    580e:	eb01 0c02 	add.w	ip, r1, r2
    5812:	f02c 0c07 	bic.w	ip, ip, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    5816:	ebac 0c04 	sub.w	ip, ip, r4
    581a:	ea4f 01dc 	mov.w	r1, ip, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    581e:	6004      	str	r4, [r0, #0]
	h->end_chunk = heap_sz;
    5820:	60a1      	str	r1, [r4, #8]
	h->avail_buckets = 0;
    5822:	2300      	movs	r3, #0
    5824:	60e3      	str	r3, [r4, #12]
	return big_heap(h) ? 8 : 4;
    5826:	f5bc 2f80 	cmp.w	ip, #262144	; 0x40000
    582a:	d311      	bcc.n	5850 <sys_heap_init+0x54>
    582c:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    582e:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    5830:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
    5834:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    5836:	fab3 f383 	clz	r3, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    583a:	f1c3 0e20 	rsb	lr, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    583e:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
    5842:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    5844:	1dde      	adds	r6, r3, #7
    5846:	08f5      	lsrs	r5, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    5848:	2300      	movs	r3, #0
    584a:	e008      	b.n	585e <sys_heap_init+0x62>
	return big_heap_bytes(size) ? 8 : 4;
    584c:	2304      	movs	r3, #4
    584e:	e7da      	b.n	5806 <sys_heap_init+0xa>
	return big_heap(h) ? 8 : 4;
    5850:	2304      	movs	r3, #4
    5852:	e7ec      	b.n	582e <sys_heap_init+0x32>
		h->buckets[i].next = 0;
    5854:	1d1a      	adds	r2, r3, #4
    5856:	2000      	movs	r0, #0
    5858:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    585c:	3301      	adds	r3, #1
    585e:	4573      	cmp	r3, lr
    5860:	dbf8      	blt.n	5854 <sys_heap_init+0x58>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    5862:	006b      	lsls	r3, r5, #1
	if (big_heap(h)) {
    5864:	f5bc 2f80 	cmp.w	ip, #262144	; 0x40000
    5868:	d332      	bcc.n	58d0 <sys_heap_init+0xd4>
		((uint32_t *)cmem)[f] = val;
    586a:	6063      	str	r3, [r4, #4]
	if (big_heap(h)) {
    586c:	f5bc 2f80 	cmp.w	ip, #262144	; 0x40000
    5870:	d330      	bcc.n	58d4 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
    5872:	2300      	movs	r3, #0
    5874:	6023      	str	r3, [r4, #0]
	if (big_heap(h)) {
    5876:	f5bc 2f80 	cmp.w	ip, #262144	; 0x40000
    587a:	d32e      	bcc.n	58da <sys_heap_init+0xde>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    587c:	6863      	ldr	r3, [r4, #4]
    587e:	f043 0301 	orr.w	r3, r3, #1
    5882:	6063      	str	r3, [r4, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    5884:	1b4a      	subs	r2, r1, r5
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    5886:	0057      	lsls	r7, r2, #1
	void *cmem = &buf[c];
    5888:	f026 0307 	bic.w	r3, r6, #7
    588c:	18e0      	adds	r0, r4, r3
	if (big_heap(h)) {
    588e:	f5bc 2f80 	cmp.w	ip, #262144	; 0x40000
    5892:	d327      	bcc.n	58e4 <sys_heap_init+0xe8>
		((uint32_t *)cmem)[f] = val;
    5894:	6047      	str	r7, [r0, #4]
	return big_heap_chunks(h->end_chunk);
    5896:	68a0      	ldr	r0, [r4, #8]
	if (big_heap(h)) {
    5898:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    589c:	d324      	bcc.n	58e8 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
    589e:	50e5      	str	r5, [r4, r3]
	void *cmem = &buf[c];
    58a0:	f02c 0307 	bic.w	r3, ip, #7
    58a4:	44a4      	add	ip, r4
	return big_heap_chunks(h->end_chunk);
    58a6:	68a0      	ldr	r0, [r4, #8]
	if (big_heap(h)) {
    58a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    58ac:	d31e      	bcc.n	58ec <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
    58ae:	2000      	movs	r0, #0
    58b0:	f8cc 0004 	str.w	r0, [ip, #4]
	return big_heap_chunks(h->end_chunk);
    58b4:	68a0      	ldr	r0, [r4, #8]
	if (big_heap(h)) {
    58b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    58ba:	d31b      	bcc.n	58f4 <sys_heap_init+0xf8>
		((uint32_t *)cmem)[f] = val;
    58bc:	50e2      	str	r2, [r4, r3]
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    58be:	2201      	movs	r2, #1
    58c0:	4620      	mov	r0, r4
    58c2:	f7ff ff04 	bl	56ce <set_chunk_used>

	free_list_add(h, chunk0_size);
    58c6:	4629      	mov	r1, r5
    58c8:	4620      	mov	r0, r4
    58ca:	f7ff ff6e 	bl	57aa <free_list_add>
}
    58ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
    58d0:	8063      	strh	r3, [r4, #2]
    58d2:	e7cb      	b.n	586c <sys_heap_init+0x70>
    58d4:	2300      	movs	r3, #0
    58d6:	8023      	strh	r3, [r4, #0]
    58d8:	e7cd      	b.n	5876 <sys_heap_init+0x7a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    58da:	8863      	ldrh	r3, [r4, #2]
    58dc:	f043 0301 	orr.w	r3, r3, #1
    58e0:	8063      	strh	r3, [r4, #2]
    58e2:	e7cf      	b.n	5884 <sys_heap_init+0x88>
		((uint16_t *)cmem)[f] = val;
    58e4:	8047      	strh	r7, [r0, #2]
    58e6:	e7d6      	b.n	5896 <sys_heap_init+0x9a>
    58e8:	52e5      	strh	r5, [r4, r3]
    58ea:	e7d9      	b.n	58a0 <sys_heap_init+0xa4>
    58ec:	2000      	movs	r0, #0
    58ee:	f8ac 0002 	strh.w	r0, [ip, #2]
    58f2:	e7df      	b.n	58b4 <sys_heap_init+0xb8>
    58f4:	52e2      	strh	r2, [r4, r3]
    58f6:	e7e2      	b.n	58be <sys_heap_init+0xc2>

000058f8 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    58f8:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    58fc:	8b03      	ldrh	r3, [r0, #24]
    58fe:	f023 0307 	bic.w	r3, r3, #7
    5902:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    5904:	8303      	strh	r3, [r0, #24]
}
    5906:	4770      	bx	lr

00005908 <notify_monitors>:
{
    5908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    590c:	4606      	mov	r6, r0
    590e:	460f      	mov	r7, r1
    5910:	4690      	mov	r8, r2
	return list->head;
    5912:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5914:	b121      	cbz	r1, 5920 <notify_monitors+0x18>
	return node->next;
    5916:	680c      	ldr	r4, [r1, #0]
    5918:	b13c      	cbz	r4, 592a <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    591a:	b931      	cbnz	r1, 592a <notify_monitors+0x22>
    591c:	460c      	mov	r4, r1
    591e:	e004      	b.n	592a <notify_monitors+0x22>
    5920:	460c      	mov	r4, r1
    5922:	e002      	b.n	592a <notify_monitors+0x22>
    5924:	4623      	mov	r3, r4
    5926:	4621      	mov	r1, r4
    5928:	461c      	mov	r4, r3
    592a:	b169      	cbz	r1, 5948 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    592c:	684d      	ldr	r5, [r1, #4]
    592e:	4643      	mov	r3, r8
    5930:	463a      	mov	r2, r7
    5932:	4630      	mov	r0, r6
    5934:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5936:	2c00      	cmp	r4, #0
    5938:	d0f4      	beq.n	5924 <notify_monitors+0x1c>
	return node->next;
    593a:	6823      	ldr	r3, [r4, #0]
    593c:	2b00      	cmp	r3, #0
    593e:	d0f2      	beq.n	5926 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    5940:	2c00      	cmp	r4, #0
    5942:	d1f0      	bne.n	5926 <notify_monitors+0x1e>
    5944:	4623      	mov	r3, r4
    5946:	e7ee      	b.n	5926 <notify_monitors+0x1e>
}
    5948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000594c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    594c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    594e:	f013 0307 	ands.w	r3, r3, #7
    5952:	d103      	bne.n	595c <process_recheck+0x10>
	return list->head;
    5954:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    5956:	b10a      	cbz	r2, 595c <process_recheck+0x10>
		evt = EVT_START;
    5958:	2003      	movs	r0, #3
    595a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    595c:	2b02      	cmp	r3, #2
    595e:	d003      	beq.n	5968 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    5960:	2b01      	cmp	r3, #1
    5962:	d006      	beq.n	5972 <process_recheck+0x26>
	int evt = EVT_NOP;
    5964:	2000      	movs	r0, #0
    5966:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    5968:	8b42      	ldrh	r2, [r0, #26]
    596a:	2a00      	cmp	r2, #0
    596c:	d1f8      	bne.n	5960 <process_recheck+0x14>
		evt = EVT_STOP;
    596e:	2004      	movs	r0, #4
    5970:	4770      	bx	lr
    5972:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    5974:	b10b      	cbz	r3, 597a <process_recheck+0x2e>
		evt = EVT_RESET;
    5976:	2005      	movs	r0, #5
}
    5978:	4770      	bx	lr
	int evt = EVT_NOP;
    597a:	2000      	movs	r0, #0
    597c:	4770      	bx	lr

0000597e <process_complete>:
{
    597e:	b510      	push	{r4, lr}
    5980:	4604      	mov	r4, r0
    5982:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5984:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    5986:	2a00      	cmp	r2, #0
    5988:	db07      	blt.n	599a <process_complete+0x1c>
    598a:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    598e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    5990:	2a01      	cmp	r2, #1
    5992:	d90e      	bls.n	59b2 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    5994:	2b04      	cmp	r3, #4
    5996:	d036      	beq.n	5a06 <process_complete+0x88>
}
    5998:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    599a:	e9d0 0100 	ldrd	r0, r1, [r0]
    599e:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    59a2:	2300      	movs	r3, #0
    59a4:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    59a6:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    59a8:	2101      	movs	r1, #1
    59aa:	4620      	mov	r0, r4
    59ac:	f7ff ffa4 	bl	58f8 <set_state>
    59b0:	e7f2      	b.n	5998 <process_complete+0x1a>
		*clients = mgr->clients;
    59b2:	e9d0 0100 	ldrd	r0, r1, [r0]
    59b6:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    59ba:	2200      	movs	r2, #0
    59bc:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    59be:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    59c0:	2b06      	cmp	r3, #6
    59c2:	d11b      	bne.n	59fc <process_complete+0x7e>
	return list->head;
    59c4:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    59c8:	b153      	cbz	r3, 59e0 <process_complete+0x62>
				mgr->refs += 1U;
    59ca:	8b62      	ldrh	r2, [r4, #26]
    59cc:	3201      	adds	r2, #1
    59ce:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    59d0:	461a      	mov	r2, r3
	return node->next;
    59d2:	681b      	ldr	r3, [r3, #0]
    59d4:	2b00      	cmp	r3, #0
    59d6:	d0f7      	beq.n	59c8 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    59d8:	2a00      	cmp	r2, #0
    59da:	d1f5      	bne.n	59c8 <process_complete+0x4a>
    59dc:	4613      	mov	r3, r2
    59de:	e7f3      	b.n	59c8 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    59e0:	2102      	movs	r1, #2
    59e2:	4620      	mov	r0, r4
    59e4:	f7ff ff88 	bl	58f8 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    59e8:	4620      	mov	r0, r4
    59ea:	f7ff ffaf 	bl	594c <process_recheck>
    59ee:	2800      	cmp	r0, #0
    59f0:	d0d2      	beq.n	5998 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    59f2:	8b23      	ldrh	r3, [r4, #24]
    59f4:	f043 0320 	orr.w	r3, r3, #32
    59f8:	8323      	strh	r3, [r4, #24]
    59fa:	e7cd      	b.n	5998 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    59fc:	2100      	movs	r1, #0
    59fe:	4620      	mov	r0, r4
    5a00:	f7ff ff7a 	bl	58f8 <set_state>
    5a04:	e7f0      	b.n	59e8 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    5a06:	2100      	movs	r1, #0
    5a08:	f7ff ff76 	bl	58f8 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    5a0c:	4620      	mov	r0, r4
    5a0e:	f7ff ff9d 	bl	594c <process_recheck>
    5a12:	2800      	cmp	r0, #0
    5a14:	d0c0      	beq.n	5998 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5a16:	8b23      	ldrh	r3, [r4, #24]
    5a18:	f043 0320 	orr.w	r3, r3, #32
    5a1c:	8323      	strh	r3, [r4, #24]
}
    5a1e:	e7bb      	b.n	5998 <process_complete+0x1a>

00005a20 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    5a20:	b150      	cbz	r0, 5a38 <validate_args+0x18>
{
    5a22:	b510      	push	{r4, lr}
    5a24:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5a26:	b151      	cbz	r1, 5a3e <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    5a28:	1d08      	adds	r0, r1, #4
    5a2a:	f000 f8c4 	bl	5bb6 <sys_notify_validate>
	if ((rv == 0)
    5a2e:	b910      	cbnz	r0, 5a36 <validate_args+0x16>
	    && ((cli->notify.flags
    5a30:	68a3      	ldr	r3, [r4, #8]
    5a32:	2b03      	cmp	r3, #3
    5a34:	d806      	bhi.n	5a44 <validate_args+0x24>
}
    5a36:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5a38:	f06f 0015 	mvn.w	r0, #21
}
    5a3c:	4770      	bx	lr
		return -EINVAL;
    5a3e:	f06f 0015 	mvn.w	r0, #21
    5a42:	e7f8      	b.n	5a36 <validate_args+0x16>
		rv = -EINVAL;
    5a44:	f06f 0015 	mvn.w	r0, #21
    5a48:	e7f5      	b.n	5a36 <validate_args+0x16>

00005a4a <notify_one>:
{
    5a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a4e:	4607      	mov	r7, r0
    5a50:	460c      	mov	r4, r1
    5a52:	4616      	mov	r6, r2
    5a54:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5a56:	4619      	mov	r1, r3
    5a58:	1d20      	adds	r0, r4, #4
    5a5a:	f000 f8c3 	bl	5be4 <sys_notify_finalize>
	if (cb) {
    5a5e:	b128      	cbz	r0, 5a6c <notify_one+0x22>
    5a60:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    5a62:	462b      	mov	r3, r5
    5a64:	4632      	mov	r2, r6
    5a66:	4621      	mov	r1, r4
    5a68:	4638      	mov	r0, r7
    5a6a:	47c0      	blx	r8
}
    5a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005a70 <notify_all>:
{
    5a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a74:	4680      	mov	r8, r0
    5a76:	460c      	mov	r4, r1
    5a78:	4617      	mov	r7, r2
    5a7a:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    5a7c:	e004      	b.n	5a88 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    5a7e:	4633      	mov	r3, r6
    5a80:	463a      	mov	r2, r7
    5a82:	4640      	mov	r0, r8
    5a84:	f7ff ffe1 	bl	5a4a <notify_one>
	return list->head;
    5a88:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    5a8a:	b131      	cbz	r1, 5a9a <notify_all+0x2a>
	return node->next;
    5a8c:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    5a8e:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5a90:	6863      	ldr	r3, [r4, #4]
    5a92:	428b      	cmp	r3, r1
    5a94:	d1f3      	bne.n	5a7e <notify_all+0xe>
	list->tail = node;
    5a96:	6065      	str	r5, [r4, #4]
}
    5a98:	e7f1      	b.n	5a7e <notify_all+0xe>
}
    5a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005a9e <transition_complete>:
{
    5a9e:	b508      	push	{r3, lr}
	__asm__ volatile(
    5aa0:	f04f 0c20 	mov.w	ip, #32
    5aa4:	f3ef 8211 	mrs	r2, BASEPRI
    5aa8:	f38c 8812 	msr	BASEPRI_MAX, ip
    5aac:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5ab0:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    5ab2:	2101      	movs	r1, #1
    5ab4:	f7fa fe0a 	bl	6cc <process_event>
}
    5ab8:	bd08      	pop	{r3, pc}

00005aba <onoff_manager_init>:
	if ((mgr == NULL)
    5aba:	4603      	mov	r3, r0
    5abc:	b170      	cbz	r0, 5adc <onoff_manager_init+0x22>
	    || (transitions == NULL)
    5abe:	b181      	cbz	r1, 5ae2 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    5ac0:	680a      	ldr	r2, [r1, #0]
    5ac2:	b18a      	cbz	r2, 5ae8 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    5ac4:	684a      	ldr	r2, [r1, #4]
    5ac6:	b192      	cbz	r2, 5aee <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5ac8:	2000      	movs	r0, #0
    5aca:	6018      	str	r0, [r3, #0]
    5acc:	6058      	str	r0, [r3, #4]
    5ace:	6098      	str	r0, [r3, #8]
    5ad0:	60d8      	str	r0, [r3, #12]
    5ad2:	6118      	str	r0, [r3, #16]
    5ad4:	6158      	str	r0, [r3, #20]
    5ad6:	6198      	str	r0, [r3, #24]
    5ad8:	6119      	str	r1, [r3, #16]
	return 0;
    5ada:	4770      	bx	lr
		return -EINVAL;
    5adc:	f06f 0015 	mvn.w	r0, #21
    5ae0:	4770      	bx	lr
    5ae2:	f06f 0015 	mvn.w	r0, #21
    5ae6:	4770      	bx	lr
    5ae8:	f06f 0015 	mvn.w	r0, #21
    5aec:	4770      	bx	lr
    5aee:	f06f 0015 	mvn.w	r0, #21
}
    5af2:	4770      	bx	lr

00005af4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5af4:	b570      	push	{r4, r5, r6, lr}
    5af6:	4605      	mov	r5, r0
    5af8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5afa:	f7ff ff91 	bl	5a20 <validate_args>

	if (rv < 0) {
    5afe:	1e04      	subs	r4, r0, #0
    5b00:	db30      	blt.n	5b64 <onoff_request+0x70>
    5b02:	f04f 0320 	mov.w	r3, #32
    5b06:	f3ef 8211 	mrs	r2, BASEPRI
    5b0a:	f383 8812 	msr	BASEPRI_MAX, r3
    5b0e:	f3bf 8f6f 	isb	sy
    5b12:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5b14:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    5b18:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5b1c:	8b6b      	ldrh	r3, [r5, #26]
    5b1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5b22:	428b      	cmp	r3, r1
    5b24:	d02c      	beq.n	5b80 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    5b26:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    5b28:	f1bc 0f02 	cmp.w	ip, #2
    5b2c:	d008      	beq.n	5b40 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    5b2e:	f1bc 0f06 	cmp.w	ip, #6
    5b32:	d819      	bhi.n	5b68 <onoff_request+0x74>
    5b34:	e8df f00c 	tbb	[pc, ip]
    5b38:	1818181e 	.word	0x1818181e
    5b3c:	2a1e      	.short	0x2a1e
    5b3e:	1e          	.byte	0x1e
    5b3f:	00          	.byte	0x00
		mgr->refs += 1U;
    5b40:	3301      	adds	r3, #1
    5b42:	836b      	strh	r3, [r5, #26]
		notify = true;
    5b44:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    5b46:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    5b48:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    5b4a:	b128      	cbz	r0, 5b58 <onoff_request+0x64>
	parent->next = child;
    5b4c:	2000      	movs	r0, #0
    5b4e:	6030      	str	r0, [r6, #0]
	return list->tail;
    5b50:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    5b52:	b308      	cbz	r0, 5b98 <onoff_request+0xa4>
	parent->next = child;
    5b54:	6006      	str	r6, [r0, #0]
	list->tail = node;
    5b56:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    5b58:	bb09      	cbnz	r1, 5b9e <onoff_request+0xaa>
	__asm__ volatile(
    5b5a:	f38e 8811 	msr	BASEPRI, lr
    5b5e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5b62:	bb0b      	cbnz	r3, 5ba8 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    5b64:	4620      	mov	r0, r4
    5b66:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    5b68:	f06f 0404 	mvn.w	r4, #4
    5b6c:	2300      	movs	r3, #0
    5b6e:	4619      	mov	r1, r3
    5b70:	4618      	mov	r0, r3
    5b72:	e7ea      	b.n	5b4a <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    5b74:	fabc f18c 	clz	r1, ip
    5b78:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    5b7a:	2300      	movs	r3, #0
		add_client = true;
    5b7c:	2001      	movs	r0, #1
    5b7e:	e7e4      	b.n	5b4a <onoff_request+0x56>
		rv = -EAGAIN;
    5b80:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    5b84:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    5b86:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    5b88:	4618      	mov	r0, r3
    5b8a:	e7de      	b.n	5b4a <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    5b8c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5b90:	2300      	movs	r3, #0
    5b92:	4619      	mov	r1, r3
    5b94:	4618      	mov	r0, r3
    5b96:	e7d8      	b.n	5b4a <onoff_request+0x56>
    5b98:	606e      	str	r6, [r5, #4]
	list->head = node;
    5b9a:	602e      	str	r6, [r5, #0]
}
    5b9c:	e7dc      	b.n	5b58 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    5b9e:	2102      	movs	r1, #2
    5ba0:	4628      	mov	r0, r5
    5ba2:	f7fa fd93 	bl	6cc <process_event>
    5ba6:	e7dd      	b.n	5b64 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    5ba8:	2300      	movs	r3, #0
    5baa:	4662      	mov	r2, ip
    5bac:	4631      	mov	r1, r6
    5bae:	4628      	mov	r0, r5
    5bb0:	f7ff ff4b 	bl	5a4a <notify_one>
    5bb4:	e7d6      	b.n	5b64 <onoff_request+0x70>

00005bb6 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5bb6:	4602      	mov	r2, r0
    5bb8:	b158      	cbz	r0, 5bd2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5bba:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5bbc:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5bc0:	2b01      	cmp	r3, #1
    5bc2:	d003      	beq.n	5bcc <sys_notify_validate+0x16>
    5bc4:	2b03      	cmp	r3, #3
    5bc6:	d107      	bne.n	5bd8 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5bc8:	6803      	ldr	r3, [r0, #0]
    5bca:	b143      	cbz	r3, 5bde <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5bcc:	2000      	movs	r0, #0
    5bce:	6090      	str	r0, [r2, #8]
    5bd0:	4770      	bx	lr
		return -EINVAL;
    5bd2:	f06f 0015 	mvn.w	r0, #21
    5bd6:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    5bd8:	f06f 0015 	mvn.w	r0, #21
    5bdc:	4770      	bx	lr
			rv = -EINVAL;
    5bde:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5be2:	4770      	bx	lr

00005be4 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    5be4:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5be6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5be8:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5bec:	6081      	str	r1, [r0, #8]
	switch (method) {
    5bee:	2a03      	cmp	r2, #3
    5bf0:	d103      	bne.n	5bfa <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5bf2:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5bf4:	2200      	movs	r2, #0
    5bf6:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5bf8:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    5bfa:	2000      	movs	r0, #0
    5bfc:	e7fa      	b.n	5bf4 <sys_notify_finalize+0x10>

00005bfe <extract_decimal>:
{
    5bfe:	4684      	mov	ip, r0
	const char *sp = *str;
    5c00:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    5c02:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    5c04:	e006      	b.n	5c14 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    5c06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5c0a:	3201      	adds	r2, #1
    5c0c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    5c10:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    5c14:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5c16:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    5c1a:	2909      	cmp	r1, #9
    5c1c:	d9f3      	bls.n	5c06 <extract_decimal+0x8>
	*str = sp;
    5c1e:	f8cc 2000 	str.w	r2, [ip]
}
    5c22:	4770      	bx	lr

00005c24 <extract_width>:
{
    5c24:	b530      	push	{r4, r5, lr}
    5c26:	b083      	sub	sp, #12
    5c28:	4604      	mov	r4, r0
    5c2a:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    5c2c:	7803      	ldrb	r3, [r0, #0]
    5c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5c32:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    5c34:	460d      	mov	r5, r1
    5c36:	780b      	ldrb	r3, [r1, #0]
    5c38:	2b2a      	cmp	r3, #42	; 0x2a
    5c3a:	d018      	beq.n	5c6e <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    5c3c:	a801      	add	r0, sp, #4
    5c3e:	f7ff ffde 	bl	5bfe <extract_decimal>
	if (sp != wp) {
    5c42:	9b01      	ldr	r3, [sp, #4]
    5c44:	429d      	cmp	r5, r3
    5c46:	d00f      	beq.n	5c68 <extract_width+0x44>
		conv->width_present = true;
    5c48:	7823      	ldrb	r3, [r4, #0]
    5c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5c4e:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    5c50:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    5c52:	b2db      	uxtb	r3, r3
    5c54:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    5c58:	2800      	cmp	r0, #0
    5c5a:	db10      	blt.n	5c7e <extract_width+0x5a>
    5c5c:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    5c5e:	4313      	orrs	r3, r2
    5c60:	7822      	ldrb	r2, [r4, #0]
    5c62:	f363 0241 	bfi	r2, r3, #1, #1
    5c66:	7022      	strb	r2, [r4, #0]
	return sp;
    5c68:	9801      	ldr	r0, [sp, #4]
}
    5c6a:	b003      	add	sp, #12
    5c6c:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    5c6e:	7843      	ldrb	r3, [r0, #1]
    5c70:	f043 0301 	orr.w	r3, r3, #1
    5c74:	7043      	strb	r3, [r0, #1]
		return ++sp;
    5c76:	4608      	mov	r0, r1
    5c78:	3001      	adds	r0, #1
    5c7a:	9001      	str	r0, [sp, #4]
    5c7c:	e7f5      	b.n	5c6a <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    5c7e:	2201      	movs	r2, #1
    5c80:	e7ed      	b.n	5c5e <extract_width+0x3a>

00005c82 <extract_prec>:
{
    5c82:	b510      	push	{r4, lr}
    5c84:	b082      	sub	sp, #8
    5c86:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    5c88:	780b      	ldrb	r3, [r1, #0]
    5c8a:	2b2e      	cmp	r3, #46	; 0x2e
    5c8c:	bf14      	ite	ne
    5c8e:	2300      	movne	r3, #0
    5c90:	2301      	moveq	r3, #1
    5c92:	7842      	ldrb	r2, [r0, #1]
    5c94:	f363 0241 	bfi	r2, r3, #1, #1
    5c98:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    5c9a:	b1c3      	cbz	r3, 5cce <extract_prec+0x4c>
    5c9c:	4604      	mov	r4, r0
	++sp;
    5c9e:	9b01      	ldr	r3, [sp, #4]
    5ca0:	1c5a      	adds	r2, r3, #1
    5ca2:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    5ca4:	785b      	ldrb	r3, [r3, #1]
    5ca6:	2b2a      	cmp	r3, #42	; 0x2a
    5ca8:	d013      	beq.n	5cd2 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    5caa:	a801      	add	r0, sp, #4
    5cac:	f7ff ffa7 	bl	5bfe <extract_decimal>
	conv->prec_value = prec;
    5cb0:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    5cb2:	7823      	ldrb	r3, [r4, #0]
    5cb4:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    5cb8:	2800      	cmp	r0, #0
    5cba:	db12      	blt.n	5ce2 <extract_prec+0x60>
    5cbc:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    5cbe:	4313      	orrs	r3, r2
    5cc0:	7822      	ldrb	r2, [r4, #0]
    5cc2:	f363 0241 	bfi	r2, r3, #1, #1
    5cc6:	7022      	strb	r2, [r4, #0]
	return sp;
    5cc8:	9801      	ldr	r0, [sp, #4]
}
    5cca:	b002      	add	sp, #8
    5ccc:	bd10      	pop	{r4, pc}
		return sp;
    5cce:	4608      	mov	r0, r1
    5cd0:	e7fb      	b.n	5cca <extract_prec+0x48>
		conv->prec_star = true;
    5cd2:	7843      	ldrb	r3, [r0, #1]
    5cd4:	f043 0304 	orr.w	r3, r3, #4
    5cd8:	7043      	strb	r3, [r0, #1]
		return ++sp;
    5cda:	4610      	mov	r0, r2
    5cdc:	3001      	adds	r0, #1
    5cde:	9001      	str	r0, [sp, #4]
    5ce0:	e7f3      	b.n	5cca <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    5ce2:	2201      	movs	r2, #1
    5ce4:	e7eb      	b.n	5cbe <extract_prec+0x3c>

00005ce6 <extract_length>:
{
    5ce6:	4602      	mov	r2, r0
	switch (*sp) {
    5ce8:	780b      	ldrb	r3, [r1, #0]
    5cea:	3b4c      	subs	r3, #76	; 0x4c
    5cec:	2b2e      	cmp	r3, #46	; 0x2e
    5cee:	d85b      	bhi.n	5da8 <extract_length+0xc2>
    5cf0:	e8df f003 	tbb	[pc, r3]
    5cf4:	5a5a5a4f 	.word	0x5a5a5a4f
    5cf8:	5a5a5a5a 	.word	0x5a5a5a5a
    5cfc:	5a5a5a5a 	.word	0x5a5a5a5a
    5d00:	5a5a5a5a 	.word	0x5a5a5a5a
    5d04:	5a5a5a5a 	.word	0x5a5a5a5a
    5d08:	5a5a5a5a 	.word	0x5a5a5a5a
    5d0c:	5a5a5a5a 	.word	0x5a5a5a5a
    5d10:	5a3a5a18 	.word	0x5a3a5a18
    5d14:	5a5a5a29 	.word	0x5a5a5a29
    5d18:	5a5a5a5a 	.word	0x5a5a5a5a
    5d1c:	5a5a5a48 	.word	0x5a5a5a48
    5d20:	5a5a      	.short	0x5a5a
    5d22:	41          	.byte	0x41
    5d23:	00          	.byte	0x00
		if (*++sp == 'h') {
    5d24:	1c48      	adds	r0, r1, #1
    5d26:	784b      	ldrb	r3, [r1, #1]
    5d28:	2b68      	cmp	r3, #104	; 0x68
    5d2a:	d005      	beq.n	5d38 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    5d2c:	7853      	ldrb	r3, [r2, #1]
    5d2e:	2102      	movs	r1, #2
    5d30:	f361 03c6 	bfi	r3, r1, #3, #4
    5d34:	7053      	strb	r3, [r2, #1]
    5d36:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    5d38:	7853      	ldrb	r3, [r2, #1]
    5d3a:	2001      	movs	r0, #1
    5d3c:	f360 03c6 	bfi	r3, r0, #3, #4
    5d40:	7053      	strb	r3, [r2, #1]
			++sp;
    5d42:	1c88      	adds	r0, r1, #2
    5d44:	4770      	bx	lr
		if (*++sp == 'l') {
    5d46:	1c48      	adds	r0, r1, #1
    5d48:	784b      	ldrb	r3, [r1, #1]
    5d4a:	2b6c      	cmp	r3, #108	; 0x6c
    5d4c:	d005      	beq.n	5d5a <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    5d4e:	7853      	ldrb	r3, [r2, #1]
    5d50:	2103      	movs	r1, #3
    5d52:	f361 03c6 	bfi	r3, r1, #3, #4
    5d56:	7053      	strb	r3, [r2, #1]
    5d58:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    5d5a:	7853      	ldrb	r3, [r2, #1]
    5d5c:	2004      	movs	r0, #4
    5d5e:	f360 03c6 	bfi	r3, r0, #3, #4
    5d62:	7053      	strb	r3, [r2, #1]
			++sp;
    5d64:	1c88      	adds	r0, r1, #2
    5d66:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    5d68:	7853      	ldrb	r3, [r2, #1]
    5d6a:	2005      	movs	r0, #5
    5d6c:	f360 03c6 	bfi	r3, r0, #3, #4
    5d70:	7053      	strb	r3, [r2, #1]
		++sp;
    5d72:	1c48      	adds	r0, r1, #1
		break;
    5d74:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    5d76:	7853      	ldrb	r3, [r2, #1]
    5d78:	2006      	movs	r0, #6
    5d7a:	f360 03c6 	bfi	r3, r0, #3, #4
    5d7e:	7053      	strb	r3, [r2, #1]
		++sp;
    5d80:	1c48      	adds	r0, r1, #1
		break;
    5d82:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    5d84:	7853      	ldrb	r3, [r2, #1]
    5d86:	2007      	movs	r0, #7
    5d88:	f360 03c6 	bfi	r3, r0, #3, #4
    5d8c:	7053      	strb	r3, [r2, #1]
		++sp;
    5d8e:	1c48      	adds	r0, r1, #1
		break;
    5d90:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    5d92:	7853      	ldrb	r3, [r2, #1]
    5d94:	2008      	movs	r0, #8
    5d96:	f360 03c6 	bfi	r3, r0, #3, #4
    5d9a:	7053      	strb	r3, [r2, #1]
		++sp;
    5d9c:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    5d9e:	7813      	ldrb	r3, [r2, #0]
    5da0:	f043 0302 	orr.w	r3, r3, #2
    5da4:	7013      	strb	r3, [r2, #0]
		break;
    5da6:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    5da8:	7853      	ldrb	r3, [r2, #1]
    5daa:	f36f 03c6 	bfc	r3, #3, #4
    5dae:	7053      	strb	r3, [r2, #1]
		break;
    5db0:	4608      	mov	r0, r1
}
    5db2:	4770      	bx	lr

00005db4 <extract_specifier>:
{
    5db4:	b500      	push	{lr}
    5db6:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    5db8:	4608      	mov	r0, r1
    5dba:	f810 3b01 	ldrb.w	r3, [r0], #1
    5dbe:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    5dc0:	2b78      	cmp	r3, #120	; 0x78
    5dc2:	d817      	bhi.n	5df4 <extract_specifier+0x40>
    5dc4:	2b6e      	cmp	r3, #110	; 0x6e
    5dc6:	d229      	bcs.n	5e1c <extract_specifier+0x68>
    5dc8:	2b69      	cmp	r3, #105	; 0x69
    5dca:	d813      	bhi.n	5df4 <extract_specifier+0x40>
    5dcc:	2b58      	cmp	r3, #88	; 0x58
    5dce:	d317      	bcc.n	5e00 <extract_specifier+0x4c>
    5dd0:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    5dd4:	fa5f fc8c 	uxtb.w	ip, ip
    5dd8:	2101      	movs	r1, #1
    5dda:	fa01 f10c 	lsl.w	r1, r1, ip
    5dde:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    5de2:	d114      	bne.n	5e0e <extract_specifier+0x5a>
    5de4:	f640 0c01 	movw	ip, #2049	; 0x801
    5de8:	ea11 0f0c 	tst.w	r1, ip
    5dec:	d155      	bne.n	5e9a <extract_specifier+0xe6>
    5dee:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    5df2:	d13a      	bne.n	5e6a <extract_specifier+0xb6>
		conv->invalid = true;
    5df4:	7813      	ldrb	r3, [r2, #0]
    5df6:	f043 0301 	orr.w	r3, r3, #1
    5dfa:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    5dfc:	2100      	movs	r1, #0
		break;
    5dfe:	e042      	b.n	5e86 <extract_specifier+0xd2>
	switch (conv->specifier) {
    5e00:	2b41      	cmp	r3, #65	; 0x41
    5e02:	d004      	beq.n	5e0e <extract_specifier+0x5a>
    5e04:	d3f6      	bcc.n	5df4 <extract_specifier+0x40>
    5e06:	3b45      	subs	r3, #69	; 0x45
    5e08:	b2db      	uxtb	r3, r3
    5e0a:	2b02      	cmp	r3, #2
    5e0c:	d8f2      	bhi.n	5df4 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    5e0e:	7893      	ldrb	r3, [r2, #2]
    5e10:	2104      	movs	r1, #4
    5e12:	f361 0302 	bfi	r3, r1, #0, #3
    5e16:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    5e18:	2101      	movs	r1, #1
			break;
    5e1a:	e034      	b.n	5e86 <extract_specifier+0xd2>
	switch (conv->specifier) {
    5e1c:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    5e20:	b2c9      	uxtb	r1, r1
    5e22:	f04f 0c01 	mov.w	ip, #1
    5e26:	fa0c fc01 	lsl.w	ip, ip, r1
    5e2a:	f240 4182 	movw	r1, #1154	; 0x482
    5e2e:	ea1c 0f01 	tst.w	ip, r1
    5e32:	bf14      	ite	ne
    5e34:	f04f 0e01 	movne.w	lr, #1
    5e38:	f04f 0e00 	moveq.w	lr, #0
    5e3c:	d12d      	bne.n	5e9a <extract_specifier+0xe6>
    5e3e:	f01c 0f24 	tst.w	ip, #36	; 0x24
    5e42:	bf14      	ite	ne
    5e44:	2101      	movne	r1, #1
    5e46:	2100      	moveq	r1, #0
    5e48:	d139      	bne.n	5ebe <extract_specifier+0x10a>
    5e4a:	f01c 0c01 	ands.w	ip, ip, #1
    5e4e:	d0d1      	beq.n	5df4 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    5e50:	7893      	ldrb	r3, [r2, #2]
    5e52:	f04f 0e03 	mov.w	lr, #3
    5e56:	f36e 0302 	bfi	r3, lr, #0, #3
    5e5a:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    5e5c:	7853      	ldrb	r3, [r2, #1]
    5e5e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    5e62:	2b40      	cmp	r3, #64	; 0x40
    5e64:	d10f      	bne.n	5e86 <extract_specifier+0xd2>
			unsupported = true;
    5e66:	4661      	mov	r1, ip
    5e68:	e00d      	b.n	5e86 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    5e6a:	7891      	ldrb	r1, [r2, #2]
    5e6c:	f04f 0c01 	mov.w	ip, #1
    5e70:	f36c 0102 	bfi	r1, ip, #0, #3
    5e74:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    5e76:	7851      	ldrb	r1, [r2, #1]
    5e78:	f001 0178 	and.w	r1, r1, #120	; 0x78
    5e7c:	2940      	cmp	r1, #64	; 0x40
    5e7e:	d013      	beq.n	5ea8 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    5e80:	2b63      	cmp	r3, #99	; 0x63
    5e82:	d018      	beq.n	5eb6 <extract_specifier+0x102>
	bool unsupported = false;
    5e84:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    5e86:	7813      	ldrb	r3, [r2, #0]
    5e88:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    5e8c:	ea41 010c 	orr.w	r1, r1, ip
    5e90:	f361 0341 	bfi	r3, r1, #1, #1
    5e94:	7013      	strb	r3, [r2, #0]
}
    5e96:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    5e9a:	7891      	ldrb	r1, [r2, #2]
    5e9c:	f04f 0c02 	mov.w	ip, #2
    5ea0:	f36c 0102 	bfi	r1, ip, #0, #3
    5ea4:	7091      	strb	r1, [r2, #2]
    5ea6:	e7e6      	b.n	5e76 <extract_specifier+0xc2>
			conv->invalid = true;
    5ea8:	f892 c000 	ldrb.w	ip, [r2]
    5eac:	f04c 0c01 	orr.w	ip, ip, #1
    5eb0:	f882 c000 	strb.w	ip, [r2]
    5eb4:	e7e4      	b.n	5e80 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    5eb6:	3900      	subs	r1, #0
    5eb8:	bf18      	it	ne
    5eba:	2101      	movne	r1, #1
    5ebc:	e7e3      	b.n	5e86 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    5ebe:	7893      	ldrb	r3, [r2, #2]
    5ec0:	f04f 0c03 	mov.w	ip, #3
    5ec4:	f36c 0302 	bfi	r3, ip, #0, #3
    5ec8:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    5eca:	7853      	ldrb	r3, [r2, #1]
    5ecc:	f013 0f78 	tst.w	r3, #120	; 0x78
    5ed0:	d1d9      	bne.n	5e86 <extract_specifier+0xd2>
	bool unsupported = false;
    5ed2:	4671      	mov	r1, lr
    5ed4:	e7d7      	b.n	5e86 <extract_specifier+0xd2>

00005ed6 <extract_conversion>:
{
    5ed6:	b510      	push	{r4, lr}
    5ed8:	4604      	mov	r4, r0
    5eda:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    5edc:	2300      	movs	r3, #0
    5ede:	6023      	str	r3, [r4, #0]
    5ee0:	6063      	str	r3, [r4, #4]
    5ee2:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    5ee4:	784b      	ldrb	r3, [r1, #1]
    5ee6:	2b25      	cmp	r3, #37	; 0x25
    5ee8:	d014      	beq.n	5f14 <extract_conversion+0x3e>
    5eea:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    5eec:	4620      	mov	r0, r4
    5eee:	f7fa fca3 	bl	838 <extract_flags>
    5ef2:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    5ef4:	4620      	mov	r0, r4
    5ef6:	f7ff fe95 	bl	5c24 <extract_width>
    5efa:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    5efc:	4620      	mov	r0, r4
    5efe:	f7ff fec0 	bl	5c82 <extract_prec>
    5f02:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    5f04:	4620      	mov	r0, r4
    5f06:	f7ff feee 	bl	5ce6 <extract_length>
    5f0a:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    5f0c:	4620      	mov	r0, r4
    5f0e:	f7ff ff51 	bl	5db4 <extract_specifier>
}
    5f12:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    5f14:	3002      	adds	r0, #2
    5f16:	70e3      	strb	r3, [r4, #3]
		return sp;
    5f18:	e7fb      	b.n	5f12 <extract_conversion+0x3c>

00005f1a <conversion_radix>:
	switch (specifier) {
    5f1a:	286f      	cmp	r0, #111	; 0x6f
    5f1c:	d00c      	beq.n	5f38 <conversion_radix+0x1e>
    5f1e:	d905      	bls.n	5f2c <conversion_radix+0x12>
    5f20:	2870      	cmp	r0, #112	; 0x70
    5f22:	d00b      	beq.n	5f3c <conversion_radix+0x22>
    5f24:	2878      	cmp	r0, #120	; 0x78
    5f26:	d10b      	bne.n	5f40 <conversion_radix+0x26>
		return 16;
    5f28:	2010      	movs	r0, #16
    5f2a:	4770      	bx	lr
	switch (specifier) {
    5f2c:	2858      	cmp	r0, #88	; 0x58
    5f2e:	d001      	beq.n	5f34 <conversion_radix+0x1a>
    5f30:	200a      	movs	r0, #10
    5f32:	4770      	bx	lr
		return 16;
    5f34:	2010      	movs	r0, #16
    5f36:	4770      	bx	lr
		return 8;
    5f38:	2008      	movs	r0, #8
    5f3a:	4770      	bx	lr
		return 16;
    5f3c:	2010      	movs	r0, #16
    5f3e:	4770      	bx	lr
	switch (specifier) {
    5f40:	200a      	movs	r0, #10
}
    5f42:	4770      	bx	lr

00005f44 <encode_uint>:
{
    5f44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f48:	4605      	mov	r5, r0
    5f4a:	460c      	mov	r4, r1
    5f4c:	4693      	mov	fp, r2
    5f4e:	4699      	mov	r9, r3
    5f50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
    5f52:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5f54:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    5f58:	f7ff ffdf 	bl	5f1a <conversion_radix>
    5f5c:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    5f5e:	e015      	b.n	5f8c <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5f60:	f1ba 0f19 	cmp.w	sl, #25
    5f64:	d820      	bhi.n	5fa8 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5f66:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5f68:	3237      	adds	r2, #55	; 0x37
    5f6a:	b2d2      	uxtb	r2, r2
    5f6c:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    5f70:	4632      	mov	r2, r6
    5f72:	4643      	mov	r3, r8
    5f74:	4628      	mov	r0, r5
    5f76:	4621      	mov	r1, r4
    5f78:	f7fa f8ec 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    5f7c:	42b5      	cmp	r5, r6
    5f7e:	f174 0400 	sbcs.w	r4, r4, #0
    5f82:	d315      	bcc.n	5fb0 <encode_uint+0x6c>
    5f84:	454f      	cmp	r7, r9
    5f86:	d913      	bls.n	5fb0 <encode_uint+0x6c>
		value /= radix;
    5f88:	4605      	mov	r5, r0
    5f8a:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    5f8c:	f04f 0800 	mov.w	r8, #0
    5f90:	4632      	mov	r2, r6
    5f92:	4643      	mov	r3, r8
    5f94:	4628      	mov	r0, r5
    5f96:	4621      	mov	r1, r4
    5f98:	f7fa f8dc 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5f9c:	2a09      	cmp	r2, #9
    5f9e:	d8df      	bhi.n	5f60 <encode_uint+0x1c>
    5fa0:	b2d2      	uxtb	r2, r2
    5fa2:	3230      	adds	r2, #48	; 0x30
    5fa4:	b2d2      	uxtb	r2, r2
    5fa6:	e7e1      	b.n	5f6c <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5fa8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5faa:	3257      	adds	r2, #87	; 0x57
    5fac:	b2d2      	uxtb	r2, r2
    5fae:	e7dd      	b.n	5f6c <encode_uint+0x28>
	if (conv->flag_hash) {
    5fb0:	f89b 3000 	ldrb.w	r3, [fp]
    5fb4:	f013 0f20 	tst.w	r3, #32
    5fb8:	d003      	beq.n	5fc2 <encode_uint+0x7e>
		if (radix == 8) {
    5fba:	2e08      	cmp	r6, #8
    5fbc:	d004      	beq.n	5fc8 <encode_uint+0x84>
		} else if (radix == 16) {
    5fbe:	2e10      	cmp	r6, #16
    5fc0:	d009      	beq.n	5fd6 <encode_uint+0x92>
}
    5fc2:	4638      	mov	r0, r7
    5fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    5fc8:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5fcc:	f043 0308 	orr.w	r3, r3, #8
    5fd0:	f88b 3002 	strb.w	r3, [fp, #2]
    5fd4:	e7f5      	b.n	5fc2 <encode_uint+0x7e>
			conv->altform_0c = true;
    5fd6:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5fda:	f043 0310 	orr.w	r3, r3, #16
    5fde:	f88b 3002 	strb.w	r3, [fp, #2]
    5fe2:	e7ee      	b.n	5fc2 <encode_uint+0x7e>

00005fe4 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    5fe4:	7843      	ldrb	r3, [r0, #1]
    5fe6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    5fea:	2b07      	cmp	r3, #7
    5fec:	d818      	bhi.n	6020 <store_count+0x3c>
    5fee:	e8df f003 	tbb	[pc, r3]
    5ff2:	0604      	.short	0x0604
    5ff4:	100c0a08 	.word	0x100c0a08
    5ff8:	1614      	.short	0x1614
		*(int *)dp = count;
    5ffa:	600a      	str	r2, [r1, #0]
		break;
    5ffc:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    5ffe:	700a      	strb	r2, [r1, #0]
		break;
    6000:	4770      	bx	lr
		*(short *)dp = (short)count;
    6002:	800a      	strh	r2, [r1, #0]
		break;
    6004:	4770      	bx	lr
		*(long *)dp = (long)count;
    6006:	600a      	str	r2, [r1, #0]
		break;
    6008:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    600a:	17d3      	asrs	r3, r2, #31
    600c:	600a      	str	r2, [r1, #0]
    600e:	604b      	str	r3, [r1, #4]
		break;
    6010:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    6012:	17d3      	asrs	r3, r2, #31
    6014:	600a      	str	r2, [r1, #0]
    6016:	604b      	str	r3, [r1, #4]
		break;
    6018:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    601a:	600a      	str	r2, [r1, #0]
		break;
    601c:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    601e:	600a      	str	r2, [r1, #0]
}
    6020:	4770      	bx	lr

00006022 <outs>:
{
    6022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6026:	4607      	mov	r7, r0
    6028:	460e      	mov	r6, r1
    602a:	4614      	mov	r4, r2
    602c:	4698      	mov	r8, r3
	size_t count = 0;
    602e:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6030:	e006      	b.n	6040 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    6032:	4631      	mov	r1, r6
    6034:	f814 0b01 	ldrb.w	r0, [r4], #1
    6038:	47b8      	blx	r7
		if (rc < 0) {
    603a:	2800      	cmp	r0, #0
    603c:	db09      	blt.n	6052 <outs+0x30>
		++count;
    603e:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6040:	4544      	cmp	r4, r8
    6042:	d3f6      	bcc.n	6032 <outs+0x10>
    6044:	f1b8 0f00 	cmp.w	r8, #0
    6048:	d102      	bne.n	6050 <outs+0x2e>
    604a:	7823      	ldrb	r3, [r4, #0]
    604c:	2b00      	cmp	r3, #0
    604e:	d1f0      	bne.n	6032 <outs+0x10>
	return (int)count;
    6050:	4628      	mov	r0, r5
}
    6052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006056 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6056:	4770      	bx	lr

00006058 <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
    6058:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
    605a:	f7fa ff2f 	bl	ebc <nrfx_coredep_delay_us>
}
    605e:	bd08      	pop	{r3, pc}

00006060 <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    6060:	2301      	movs	r3, #1
    6062:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6066:	f3bf 8f4f 	dsb	sy
        __WFE();
    606a:	bf20      	wfe
    while (true)
    606c:	e7fd      	b.n	606a <nrf_regulators_system_off+0xa>

0000606e <pm_state_exit_post_ops>:
    606e:	2300      	movs	r3, #0
    6070:	f383 8811 	msr	BASEPRI, r3
    6074:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6078:	4770      	bx	lr

0000607a <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    607a:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    607c:	f001 021f 	and.w	r2, r1, #31
    6080:	2301      	movs	r3, #1
    6082:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6084:	0949      	lsrs	r1, r1, #5
    6086:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    608a:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    608c:	e8d0 2fef 	ldaex	r2, [r0]
    6090:	ea02 0c01 	and.w	ip, r2, r1
    6094:	e8c0 cfee 	stlex	lr, ip, [r0]
    6098:	f1be 0f00 	cmp.w	lr, #0
    609c:	d1f6      	bne.n	608c <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
    609e:	4213      	tst	r3, r2
}
    60a0:	bf14      	ite	ne
    60a2:	2001      	movne	r0, #1
    60a4:	2000      	moveq	r0, #0
    60a6:	f85d fb04 	ldr.w	pc, [sp], #4

000060aa <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    60aa:	f001 021f 	and.w	r2, r1, #31
    60ae:	2301      	movs	r3, #1
    60b0:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    60b2:	0949      	lsrs	r1, r1, #5
    60b4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    60b8:	e8d0 2fef 	ldaex	r2, [r0]
    60bc:	431a      	orrs	r2, r3
    60be:	e8c0 2fe1 	stlex	r1, r2, [r0]
    60c2:	2900      	cmp	r1, #0
    60c4:	d1f8      	bne.n	60b8 <atomic_set_bit+0xe>
}
    60c6:	4770      	bx	lr

000060c8 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    60c8:	2000      	movs	r0, #0
    60ca:	4770      	bx	lr

000060cc <abort_function>:
{
    60cc:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    60ce:	2000      	movs	r0, #0
    60d0:	f7fa fee0 	bl	e94 <sys_reboot>

000060d4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    60d4:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    60d6:	f001 f992 	bl	73fe <z_fatal_error>
}
    60da:	bd08      	pop	{r3, pc}

000060dc <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    60dc:	b508      	push	{r3, lr}
    60de:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    60e0:	6800      	ldr	r0, [r0, #0]
    60e2:	f7ff fff7 	bl	60d4 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    60e6:	bd08      	pop	{r3, pc}

000060e8 <arch_irq_enable>:
{
    60e8:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    60ea:	b240      	sxtb	r0, r0
    60ec:	f7fb fa38 	bl	1560 <__NVIC_EnableIRQ>
}
    60f0:	bd08      	pop	{r3, pc}

000060f2 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    60f2:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    60f4:	3101      	adds	r1, #1
    60f6:	b240      	sxtb	r0, r0
    60f8:	f7fb fa40 	bl	157c <__NVIC_SetPriority>
}
    60fc:	bd08      	pop	{r3, pc}

000060fe <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    60fe:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6100:	2100      	movs	r1, #0
    6102:	2001      	movs	r0, #1
    6104:	f7ff ffe6 	bl	60d4 <z_arm_fatal_error>
}
    6108:	bd08      	pop	{r3, pc}

0000610a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    610a:	b508      	push	{r3, lr}
	handler();
    610c:	f7fb fa58 	bl	15c0 <z_SysNmiOnReset>
	z_arm_int_exit();
    6110:	f7fb fb28 	bl	1764 <z_arm_exc_exit>
}
    6114:	bd08      	pop	{r3, pc}

00006116 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    6116:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    611a:	f383 880b 	msr	PSPLIM, r3
}
    611e:	4770      	bx	lr

00006120 <memory_fault_recoverable>:
}
    6120:	2000      	movs	r0, #0
    6122:	4770      	bx	lr

00006124 <debug_monitor>:
	*recoverable = false;
    6124:	2300      	movs	r3, #0
    6126:	700b      	strb	r3, [r1, #0]
}
    6128:	4770      	bx	lr

0000612a <fault_handle>:
{
    612a:	b508      	push	{r3, lr}
	*recoverable = false;
    612c:	2300      	movs	r3, #0
    612e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    6130:	1ecb      	subs	r3, r1, #3
    6132:	2b09      	cmp	r3, #9
    6134:	d81a      	bhi.n	616c <fault_handle+0x42>
    6136:	e8df f003 	tbb	[pc, r3]
    613a:	0905      	.short	0x0905
    613c:	1919110d 	.word	0x1919110d
    6140:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    6144:	4611      	mov	r1, r2
    6146:	f7fb fbb1 	bl	18ac <hard_fault>
		break;
    614a:	e010      	b.n	616e <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    614c:	2100      	movs	r1, #0
    614e:	f7fb fb17 	bl	1780 <mem_manage_fault>
		break;
    6152:	e00c      	b.n	616e <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    6154:	2100      	movs	r1, #0
    6156:	f7fb fb49 	bl	17ec <bus_fault>
		break;
    615a:	e008      	b.n	616e <fault_handle+0x44>
		reason = usage_fault(esf);
    615c:	f7fb fb70 	bl	1840 <usage_fault>
		break;
    6160:	e005      	b.n	616e <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    6162:	4611      	mov	r1, r2
    6164:	f7ff ffde 	bl	6124 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6168:	2000      	movs	r0, #0
		break;
    616a:	e000      	b.n	616e <fault_handle+0x44>
	switch (fault) {
    616c:	2000      	movs	r0, #0
}
    616e:	bd08      	pop	{r3, pc}

00006170 <sys_arch_reboot>:
{
    6170:	b508      	push	{r3, lr}
	NVIC_SystemReset();
    6172:	f7fb fc85 	bl	1a80 <__NVIC_SystemReset>

00006176 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    6176:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    617a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    617e:	d001      	beq.n	6184 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    6180:	b2c0      	uxtb	r0, r0
    6182:	4770      	bx	lr
	}

	return -EINVAL;
    6184:	f06f 0015 	mvn.w	r0, #21
}
    6188:	4770      	bx	lr

0000618a <region_init>:
{
    618a:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
    618c:	680b      	ldr	r3, [r1, #0]
    618e:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
    6192:	7a0b      	ldrb	r3, [r1, #8]
    6194:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    6198:	68ca      	ldr	r2, [r1, #12]
    619a:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    619e:	095b      	lsrs	r3, r3, #5
    61a0:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
    61a4:	f042 0201 	orr.w	r2, r2, #1
    61a8:	ea4c 010e 	orr.w	r1, ip, lr
    61ac:	f7fb fcfc 	bl	1ba8 <mpu_set_region>
}
    61b0:	bd08      	pop	{r3, pc}

000061b2 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    61b2:	6843      	ldr	r3, [r0, #4]
		&&
    61b4:	2b1f      	cmp	r3, #31
    61b6:	d908      	bls.n	61ca <mpu_partition_is_valid+0x18>
		&&
    61b8:	f013 0f1f 	tst.w	r3, #31
    61bc:	d107      	bne.n	61ce <mpu_partition_is_valid+0x1c>
		((part->start &
    61be:	6803      	ldr	r3, [r0, #0]
		&&
    61c0:	f013 0f1f 	tst.w	r3, #31
    61c4:	d005      	beq.n	61d2 <mpu_partition_is_valid+0x20>
    61c6:	2000      	movs	r0, #0
    61c8:	4770      	bx	lr
    61ca:	2000      	movs	r0, #0
    61cc:	4770      	bx	lr
    61ce:	2000      	movs	r0, #0
    61d0:	4770      	bx	lr
    61d2:	2001      	movs	r0, #1
}
    61d4:	4770      	bx	lr

000061d6 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    61d6:	2807      	cmp	r0, #7
    61d8:	d805      	bhi.n	61e6 <region_allocate_and_init+0x10>
{
    61da:	b510      	push	{r4, lr}
    61dc:	4604      	mov	r4, r0
	region_init(index, region_conf);
    61de:	f7ff ffd4 	bl	618a <region_init>
	return index;
    61e2:	4620      	mov	r0, r4
}
    61e4:	bd10      	pop	{r4, pc}
		return -EINVAL;
    61e6:	f06f 0015 	mvn.w	r0, #21
}
    61ea:	4770      	bx	lr

000061ec <mpu_configure_region>:
{
    61ec:	b510      	push	{r4, lr}
    61ee:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
    61f0:	680b      	ldr	r3, [r1, #0]
    61f2:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
    61f4:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    61f6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    61fa:	f89d 2008 	ldrb.w	r2, [sp, #8]
    61fe:	f36c 0204 	bfi	r2, ip, #0, #5
    6202:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
    6206:	8949      	ldrh	r1, [r1, #10]
    6208:	b2d2      	uxtb	r2, r2
    620a:	f361 1247 	bfi	r2, r1, #5, #3
    620e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    6212:	f023 031f 	bic.w	r3, r3, #31
    6216:	4423      	add	r3, r4
    6218:	3b01      	subs	r3, #1
    621a:	f023 031f 	bic.w	r3, r3, #31
    621e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    6220:	4669      	mov	r1, sp
    6222:	f7ff ffd8 	bl	61d6 <region_allocate_and_init>
}
    6226:	b004      	add	sp, #16
    6228:	bd10      	pop	{r4, pc}

0000622a <get_region_index>:
{
    622a:	b570      	push	{r4, r5, r6, lr}
    622c:	4604      	mov	r4, r0
    622e:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    6230:	f7ff ffa1 	bl	6176 <arm_cmse_mpu_region_get>
    6234:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    6236:	4434      	add	r4, r6
    6238:	1e60      	subs	r0, r4, #1
    623a:	f7ff ff9c 	bl	6176 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    623e:	4285      	cmp	r5, r0
    6240:	d101      	bne.n	6246 <get_region_index+0x1c>
}
    6242:	4628      	mov	r0, r5
    6244:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
    6246:	f06f 0515 	mvn.w	r5, #21
    624a:	e7fa      	b.n	6242 <get_region_index+0x18>

0000624c <arm_core_mpu_configure_static_mpu_regions>:
{
    624c:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    624e:	f7fb fd99 	bl	1d84 <mpu_configure_static_mpu_regions>
}
    6252:	bd08      	pop	{r3, pc}

00006254 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    6254:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    6256:	f7fb fd9f 	bl	1d98 <mpu_mark_areas_for_dynamic_regions>
}
    625a:	bd08      	pop	{r3, pc}

0000625c <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    625c:	4603      	mov	r3, r0
    625e:	b1a2      	cbz	r2, 628a <strncpy+0x2e>
{
    6260:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    6262:	780c      	ldrb	r4, [r1, #0]
    6264:	b12c      	cbz	r4, 6272 <strncpy+0x16>
		*d = *s;
    6266:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    626a:	3101      	adds	r1, #1
		d++;
		n--;
    626c:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    626e:	2a00      	cmp	r2, #0
    6270:	d1f7      	bne.n	6262 <strncpy+0x6>
	}

	while (n > 0) {
    6272:	b122      	cbz	r2, 627e <strncpy+0x22>
		*d = '\0';
    6274:	2100      	movs	r1, #0
    6276:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    627a:	3a01      	subs	r2, #1
    627c:	e7f9      	b.n	6272 <strncpy+0x16>
	}

	return dest;
}
    627e:	bc10      	pop	{r4}
    6280:	4770      	bx	lr
		*d = '\0';
    6282:	2100      	movs	r1, #0
    6284:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6288:	3a01      	subs	r2, #1
	while (n > 0) {
    628a:	2a00      	cmp	r2, #0
    628c:	d1f9      	bne.n	6282 <strncpy+0x26>
    628e:	4770      	bx	lr

00006290 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6290:	4603      	mov	r3, r0
	size_t n = 0;
    6292:	2000      	movs	r0, #0

	while (*s != '\0') {
    6294:	e001      	b.n	629a <strlen+0xa>
		s++;
    6296:	3301      	adds	r3, #1
		n++;
    6298:	3001      	adds	r0, #1
	while (*s != '\0') {
    629a:	781a      	ldrb	r2, [r3, #0]
    629c:	2a00      	cmp	r2, #0
    629e:	d1fa      	bne.n	6296 <strlen+0x6>
	}

	return n;
}
    62a0:	4770      	bx	lr

000062a2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    62a2:	4603      	mov	r3, r0
	size_t n = 0;
    62a4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    62a6:	e001      	b.n	62ac <strnlen+0xa>
		s++;
    62a8:	3301      	adds	r3, #1
		n++;
    62aa:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    62ac:	781a      	ldrb	r2, [r3, #0]
    62ae:	b10a      	cbz	r2, 62b4 <strnlen+0x12>
    62b0:	4288      	cmp	r0, r1
    62b2:	d3f9      	bcc.n	62a8 <strnlen+0x6>
	}

	return n;
}
    62b4:	4770      	bx	lr

000062b6 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    62b6:	ea80 0301 	eor.w	r3, r0, r1
    62ba:	f013 0f03 	tst.w	r3, #3
    62be:	d001      	beq.n	62c4 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    62c0:	4603      	mov	r3, r0
    62c2:	e023      	b.n	630c <memcpy+0x56>
    62c4:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    62c6:	f013 0f03 	tst.w	r3, #3
    62ca:	d00f      	beq.n	62ec <memcpy+0x36>
			if (n == 0) {
    62cc:	b30a      	cbz	r2, 6312 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    62ce:	f811 cb01 	ldrb.w	ip, [r1], #1
    62d2:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    62d6:	3a01      	subs	r2, #1
    62d8:	e7f5      	b.n	62c6 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    62da:	f811 cb01 	ldrb.w	ip, [r1], #1
    62de:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    62e2:	3a01      	subs	r2, #1
	while (n > 0) {
    62e4:	2a00      	cmp	r2, #0
    62e6:	d1f8      	bne.n	62da <memcpy+0x24>
	}

	return d;
}
    62e8:	bc10      	pop	{r4}
    62ea:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    62ec:	2a03      	cmp	r2, #3
    62ee:	d90d      	bls.n	630c <memcpy+0x56>
{
    62f0:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    62f2:	f851 4b04 	ldr.w	r4, [r1], #4
    62f6:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    62fa:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    62fc:	2a03      	cmp	r2, #3
    62fe:	d8f8      	bhi.n	62f2 <memcpy+0x3c>
    6300:	e7f0      	b.n	62e4 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    6302:	f811 cb01 	ldrb.w	ip, [r1], #1
    6306:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    630a:	3a01      	subs	r2, #1
	while (n > 0) {
    630c:	2a00      	cmp	r2, #0
    630e:	d1f8      	bne.n	6302 <memcpy+0x4c>
    6310:	4770      	bx	lr
}
    6312:	4770      	bx	lr

00006314 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6314:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    6318:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    631a:	e002      	b.n	6322 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    631c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    6320:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    6322:	f013 0f03 	tst.w	r3, #3
    6326:	d002      	beq.n	632e <memset+0x1a>
		if (n == 0) {
    6328:	2a00      	cmp	r2, #0
    632a:	d1f7      	bne.n	631c <memset+0x8>
    632c:	e00f      	b.n	634e <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    632e:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    6330:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    6334:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    6338:	2a03      	cmp	r2, #3
    633a:	d906      	bls.n	634a <memset+0x36>
		*(d_word++) = c_word;
    633c:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    6340:	3a04      	subs	r2, #4
    6342:	e7f9      	b.n	6338 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    6344:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    6348:	3a01      	subs	r2, #1
	while (n > 0) {
    634a:	2a00      	cmp	r2, #0
    634c:	d1fa      	bne.n	6344 <memset+0x30>
	}

	return buf;
}
    634e:	4770      	bx	lr

00006350 <_stdout_hook_default>:
}
    6350:	f04f 30ff 	mov.w	r0, #4294967295
    6354:	4770      	bx	lr

00006356 <nrf_clock_is_running>:
    switch (domain)
    6356:	2903      	cmp	r1, #3
    6358:	d82f      	bhi.n	63ba <nrf_clock_is_running+0x64>
    635a:	e8df f001 	tbb	[pc, r1]
    635e:	0f02      	.short	0x0f02
    6360:	291c      	.short	0x291c
            if (p_clk_src != NULL)
    6362:	b122      	cbz	r2, 636e <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6364:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    6368:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    636c:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    636e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    6372:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6376:	d122      	bne.n	63be <nrf_clock_is_running+0x68>
    return false;
    6378:	2000      	movs	r0, #0
    637a:	4770      	bx	lr
            if (p_clk_src != NULL)
    637c:	b122      	cbz	r2, 6388 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    637e:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6382:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6386:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6388:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    638c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6390:	d117      	bne.n	63c2 <nrf_clock_is_running+0x6c>
    return false;
    6392:	2000      	movs	r0, #0
    6394:	4770      	bx	lr
            if (p_clk_src != NULL)
    6396:	b122      	cbz	r2, 63a2 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    6398:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    639c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    63a0:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    63a2:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    63a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    63aa:	d10c      	bne.n	63c6 <nrf_clock_is_running+0x70>
    return false;
    63ac:	2000      	movs	r0, #0
    63ae:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    63b0:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    63b4:	f3c0 4000 	ubfx	r0, r0, #16, #1
    63b8:	4770      	bx	lr
    switch (domain)
    63ba:	2000      	movs	r0, #0
    63bc:	4770      	bx	lr
                return true;
    63be:	2001      	movs	r0, #1
    63c0:	4770      	bx	lr
                return true;
    63c2:	2001      	movs	r0, #1
    63c4:	4770      	bx	lr
                return true;
    63c6:	2001      	movs	r0, #1
}
    63c8:	4770      	bx	lr

000063ca <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    63ca:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    63cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    63d0:	0089      	lsls	r1, r1, #2
    63d2:	3170      	adds	r1, #112	; 0x70
}
    63d4:	4408      	add	r0, r1
    63d6:	4770      	bx	lr

000063d8 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    63d8:	6840      	ldr	r0, [r0, #4]
}
    63da:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    63de:	4770      	bx	lr

000063e0 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    63e0:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    63e2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    63e6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    63ea:	4770      	bx	lr

000063ec <get_status>:
{
    63ec:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    63ee:	b2c9      	uxtb	r1, r1
    63f0:	f7ff ffeb 	bl	63ca <get_sub_data>
    63f4:	6880      	ldr	r0, [r0, #8]
}
    63f6:	f000 0007 	and.w	r0, r0, #7
    63fa:	bd08      	pop	{r3, pc}

000063fc <set_off_state>:
	__asm__ volatile(
    63fc:	f04f 0320 	mov.w	r3, #32
    6400:	f3ef 8211 	mrs	r2, BASEPRI
    6404:	f383 8812 	msr	BASEPRI_MAX, r3
    6408:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    640c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    640e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    6412:	d001      	beq.n	6418 <set_off_state+0x1c>
    6414:	428b      	cmp	r3, r1
    6416:	d107      	bne.n	6428 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6418:	2301      	movs	r3, #1
    641a:	6003      	str	r3, [r0, #0]
	int err = 0;
    641c:	2000      	movs	r0, #0
	__asm__ volatile(
    641e:	f382 8811 	msr	BASEPRI, r2
    6422:	f3bf 8f6f 	isb	sy
}
    6426:	4770      	bx	lr
		err = -EPERM;
    6428:	f04f 30ff 	mov.w	r0, #4294967295
    642c:	e7f7      	b.n	641e <set_off_state+0x22>

0000642e <set_starting_state>:
	__asm__ volatile(
    642e:	f04f 0320 	mov.w	r3, #32
    6432:	f3ef 8211 	mrs	r2, BASEPRI
    6436:	f383 8812 	msr	BASEPRI_MAX, r3
    643a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    643e:	6803      	ldr	r3, [r0, #0]
    6440:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6444:	f003 0307 	and.w	r3, r3, #7
    6448:	2b01      	cmp	r3, #1
    644a:	d008      	beq.n	645e <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    644c:	458c      	cmp	ip, r1
    644e:	d009      	beq.n	6464 <set_starting_state+0x36>
		err = -EPERM;
    6450:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    6454:	f382 8811 	msr	BASEPRI, r2
    6458:	f3bf 8f6f 	isb	sy
}
    645c:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    645e:	6001      	str	r1, [r0, #0]
	int err = 0;
    6460:	2000      	movs	r0, #0
    6462:	e7f7      	b.n	6454 <set_starting_state+0x26>
		err = -EALREADY;
    6464:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6468:	e7f4      	b.n	6454 <set_starting_state+0x26>

0000646a <set_on_state>:
	__asm__ volatile(
    646a:	f04f 0320 	mov.w	r3, #32
    646e:	f3ef 8211 	mrs	r2, BASEPRI
    6472:	f383 8812 	msr	BASEPRI_MAX, r3
    6476:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    647a:	6803      	ldr	r3, [r0, #0]
    647c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6480:	f043 0302 	orr.w	r3, r3, #2
    6484:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6486:	f382 8811 	msr	BASEPRI, r2
    648a:	f3bf 8f6f 	isb	sy
}
    648e:	4770      	bx	lr

00006490 <clkstarted_handle>:
{
    6490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6492:	4606      	mov	r6, r0
    6494:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    6496:	f7ff ff98 	bl	63ca <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    649a:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    649c:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    649e:	2300      	movs	r3, #0
    64a0:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    64a4:	f7ff ffe1 	bl	646a <set_on_state>
	if (callback) {
    64a8:	b11d      	cbz	r5, 64b2 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    64aa:	463a      	mov	r2, r7
    64ac:	4621      	mov	r1, r4
    64ae:	4630      	mov	r0, r6
    64b0:	47a8      	blx	r5
}
    64b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000064b4 <stop>:
{
    64b4:	b570      	push	{r4, r5, r6, lr}
    64b6:	4606      	mov	r6, r0
    64b8:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    64ba:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    64bc:	4621      	mov	r1, r4
    64be:	f7ff ff84 	bl	63ca <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    64c2:	4629      	mov	r1, r5
    64c4:	3008      	adds	r0, #8
    64c6:	f7ff ff99 	bl	63fc <set_off_state>
	if (err < 0) {
    64ca:	2800      	cmp	r0, #0
    64cc:	db06      	blt.n	64dc <stop+0x28>
	get_sub_config(dev, type)->stop();
    64ce:	4621      	mov	r1, r4
    64d0:	4630      	mov	r0, r6
    64d2:	f7ff ff81 	bl	63d8 <get_sub_config>
    64d6:	6843      	ldr	r3, [r0, #4]
    64d8:	4798      	blx	r3
	return 0;
    64da:	2000      	movs	r0, #0
}
    64dc:	bd70      	pop	{r4, r5, r6, pc}

000064de <api_stop>:
{
    64de:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    64e0:	2280      	movs	r2, #128	; 0x80
    64e2:	f7ff ffe7 	bl	64b4 <stop>
}
    64e6:	bd08      	pop	{r3, pc}

000064e8 <async_start>:
{
    64e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64ec:	4606      	mov	r6, r0
    64ee:	4690      	mov	r8, r2
    64f0:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    64f2:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    64f4:	4629      	mov	r1, r5
    64f6:	f7ff ff68 	bl	63ca <get_sub_data>
    64fa:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    64fc:	9906      	ldr	r1, [sp, #24]
    64fe:	3008      	adds	r0, #8
    6500:	f7ff ff95 	bl	642e <set_starting_state>
	if (err < 0) {
    6504:	2800      	cmp	r0, #0
    6506:	db09      	blt.n	651c <async_start+0x34>
	subdata->cb = cb;
    6508:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    650c:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    650e:	4629      	mov	r1, r5
    6510:	4630      	mov	r0, r6
    6512:	f7ff ff61 	bl	63d8 <get_sub_config>
    6516:	6803      	ldr	r3, [r0, #0]
    6518:	4798      	blx	r3
	return 0;
    651a:	2000      	movs	r0, #0
}
    651c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006520 <api_start>:
{
    6520:	b510      	push	{r4, lr}
    6522:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6524:	2480      	movs	r4, #128	; 0x80
    6526:	9400      	str	r4, [sp, #0]
    6528:	f7ff ffde 	bl	64e8 <async_start>
}
    652c:	b002      	add	sp, #8
    652e:	bd10      	pop	{r4, pc}

00006530 <onoff_started_callback>:
{
    6530:	b510      	push	{r4, lr}
    6532:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    6534:	b2c9      	uxtb	r1, r1
    6536:	f7ff ff53 	bl	63e0 <get_onoff_manager>
	notify(mgr, 0);
    653a:	2100      	movs	r1, #0
    653c:	47a0      	blx	r4
}
    653e:	bd10      	pop	{r4, pc}

00006540 <hfclk_start>:
{
    6540:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6542:	2001      	movs	r0, #1
    6544:	f000 fe5a 	bl	71fc <nrfx_clock_start>
}
    6548:	bd08      	pop	{r3, pc}

0000654a <hfclkaudio_start>:
{
    654a:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    654c:	2003      	movs	r0, #3
    654e:	f000 fe55 	bl	71fc <nrfx_clock_start>
}
    6552:	bd08      	pop	{r3, pc}

00006554 <hfclk192m_start>:
{
    6554:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    6556:	2002      	movs	r0, #2
    6558:	f000 fe50 	bl	71fc <nrfx_clock_start>
}
    655c:	bd08      	pop	{r3, pc}

0000655e <lfclk_start>:
{
    655e:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6560:	2000      	movs	r0, #0
    6562:	f000 fe4b 	bl	71fc <nrfx_clock_start>
}
    6566:	bd08      	pop	{r3, pc}

00006568 <hfclk_stop>:
{
    6568:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    656a:	2001      	movs	r0, #1
    656c:	f000 febb 	bl	72e6 <nrfx_clock_stop>
}
    6570:	bd08      	pop	{r3, pc}

00006572 <hfclkaudio_stop>:
{
    6572:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    6574:	2003      	movs	r0, #3
    6576:	f000 feb6 	bl	72e6 <nrfx_clock_stop>
}
    657a:	bd08      	pop	{r3, pc}

0000657c <hfclk192m_stop>:
{
    657c:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    657e:	2002      	movs	r0, #2
    6580:	f000 feb1 	bl	72e6 <nrfx_clock_stop>
}
    6584:	bd08      	pop	{r3, pc}

00006586 <lfclk_stop>:
{
    6586:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6588:	2000      	movs	r0, #0
    658a:	f000 feac 	bl	72e6 <nrfx_clock_stop>
}
    658e:	bd08      	pop	{r3, pc}

00006590 <k_msleep>:
{
    6590:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    6592:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6596:	17c1      	asrs	r1, r0, #31
    6598:	03c9      	lsls	r1, r1, #15
    659a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    659e:	03c0      	lsls	r0, r0, #15
    65a0:	f240 33e7 	movw	r3, #999	; 0x3e7
    65a4:	18c0      	adds	r0, r0, r3
    65a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    65aa:	f04f 0300 	mov.w	r3, #0
    65ae:	f141 0100 	adc.w	r1, r1, #0
    65b2:	f7f9 fdcf 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    65b6:	f7fe fc99 	bl	4eec <z_impl_k_sleep>
}
    65ba:	bd08      	pop	{r3, pc}

000065bc <blocking_start_callback>:
{
    65bc:	b508      	push	{r3, lr}
    65be:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    65c0:	f7fd ff76 	bl	44b0 <z_impl_k_sem_give>
}
    65c4:	bd08      	pop	{r3, pc}

000065c6 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    65c6:	460b      	mov	r3, r1
    65c8:	b139      	cbz	r1, 65da <sys_slist_remove+0x14>
	return node->next;
    65ca:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    65cc:	6019      	str	r1, [r3, #0]
	return list->tail;
    65ce:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    65d0:	428a      	cmp	r2, r1
    65d2:	d009      	beq.n	65e8 <sys_slist_remove+0x22>
	parent->next = child;
    65d4:	2300      	movs	r3, #0
    65d6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    65d8:	4770      	bx	lr
	return node->next;
    65da:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    65dc:	6003      	str	r3, [r0, #0]
	return list->tail;
    65de:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    65e0:	428a      	cmp	r2, r1
    65e2:	d1f7      	bne.n	65d4 <sys_slist_remove+0xe>
	list->tail = node;
    65e4:	6043      	str	r3, [r0, #4]
}
    65e6:	e7f5      	b.n	65d4 <sys_slist_remove+0xe>
	list->tail = node;
    65e8:	6043      	str	r3, [r0, #4]
}
    65ea:	e7f3      	b.n	65d4 <sys_slist_remove+0xe>

000065ec <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    65ec:	b508      	push	{r3, lr}
    65ee:	460a      	mov	r2, r1
	return list->head;
    65f0:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    65f2:	2100      	movs	r1, #0
    65f4:	e001      	b.n	65fa <sys_slist_find_and_remove+0xe>
    65f6:	4619      	mov	r1, r3
    65f8:	681b      	ldr	r3, [r3, #0]
    65fa:	b12b      	cbz	r3, 6608 <sys_slist_find_and_remove+0x1c>
    65fc:	4293      	cmp	r3, r2
    65fe:	d1fa      	bne.n	65f6 <sys_slist_find_and_remove+0xa>
    6600:	f7ff ffe1 	bl	65c6 <sys_slist_remove>
    6604:	2001      	movs	r0, #1
    6606:	e000      	b.n	660a <sys_slist_find_and_remove+0x1e>
    6608:	2000      	movs	r0, #0
    660a:	bd08      	pop	{r3, pc}

0000660c <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    660c:	b570      	push	{r4, r5, r6, lr}
    660e:	4604      	mov	r4, r0
    6610:	460d      	mov	r5, r1
    6612:	4616      	mov	r6, r2
	return list->head;
    6614:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    6616:	b133      	cbz	r3, 6626 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    6618:	f7ff ffe8 	bl	65ec <sys_slist_find_and_remove>
    661c:	b970      	cbnz	r0, 663c <gpio_manage_callback+0x30>
			if (!set) {
    661e:	b91e      	cbnz	r6, 6628 <gpio_manage_callback+0x1c>
				return -EINVAL;
    6620:	f06f 0015 	mvn.w	r0, #21
    6624:	e006      	b.n	6634 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    6626:	b132      	cbz	r2, 6636 <gpio_manage_callback+0x2a>
    6628:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    662a:	602b      	str	r3, [r5, #0]
	list->head = node;
    662c:	6025      	str	r5, [r4, #0]
	return list->tail;
    662e:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    6630:	b143      	cbz	r3, 6644 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    6632:	2000      	movs	r0, #0
}
    6634:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    6636:	f06f 0015 	mvn.w	r0, #21
    663a:	e7fb      	b.n	6634 <gpio_manage_callback+0x28>
	if (set) {
    663c:	2e00      	cmp	r6, #0
    663e:	d1f3      	bne.n	6628 <gpio_manage_callback+0x1c>
	return 0;
    6640:	2000      	movs	r0, #0
    6642:	e7f7      	b.n	6634 <gpio_manage_callback+0x28>
	list->tail = node;
    6644:	6065      	str	r5, [r4, #4]
    6646:	2000      	movs	r0, #0
}
    6648:	e7f4      	b.n	6634 <gpio_manage_callback+0x28>

0000664a <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    664a:	b570      	push	{r4, r5, r6, lr}
    664c:	460e      	mov	r6, r1
    664e:	4615      	mov	r5, r2
	return list->head;
    6650:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6652:	b121      	cbz	r1, 665e <gpio_fire_callbacks+0x14>
	return node->next;
    6654:	680c      	ldr	r4, [r1, #0]
    6656:	b13c      	cbz	r4, 6668 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6658:	b931      	cbnz	r1, 6668 <gpio_fire_callbacks+0x1e>
    665a:	460c      	mov	r4, r1
    665c:	e004      	b.n	6668 <gpio_fire_callbacks+0x1e>
    665e:	460c      	mov	r4, r1
    6660:	e002      	b.n	6668 <gpio_fire_callbacks+0x1e>
    6662:	4623      	mov	r3, r4
    6664:	4621      	mov	r1, r4
    6666:	461c      	mov	r4, r3
    6668:	b171      	cbz	r1, 6688 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    666a:	688a      	ldr	r2, [r1, #8]
    666c:	402a      	ands	r2, r5
    666e:	d002      	beq.n	6676 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    6670:	684b      	ldr	r3, [r1, #4]
    6672:	4630      	mov	r0, r6
    6674:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6676:	2c00      	cmp	r4, #0
    6678:	d0f3      	beq.n	6662 <gpio_fire_callbacks+0x18>
	return node->next;
    667a:	6823      	ldr	r3, [r4, #0]
    667c:	2b00      	cmp	r3, #0
    667e:	d0f1      	beq.n	6664 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6680:	2c00      	cmp	r4, #0
    6682:	d1ef      	bne.n	6664 <gpio_fire_callbacks+0x1a>
    6684:	4623      	mov	r3, r4
    6686:	e7ed      	b.n	6664 <gpio_fire_callbacks+0x1a>
		}
	}
}
    6688:	bd70      	pop	{r4, r5, r6, pc}

0000668a <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    668a:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    668e:	0580      	lsls	r0, r0, #22
    6690:	0d80      	lsrs	r0, r0, #22
    6692:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    6696:	d033      	beq.n	6700 <get_drive+0x76>
    6698:	d816      	bhi.n	66c8 <get_drive+0x3e>
    669a:	2806      	cmp	r0, #6
    669c:	d02c      	beq.n	66f8 <get_drive+0x6e>
    669e:	d906      	bls.n	66ae <get_drive+0x24>
    66a0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    66a4:	d10d      	bne.n	66c2 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    66a6:	2301      	movs	r3, #1
    66a8:	700b      	strb	r3, [r1, #0]
	return 0;
    66aa:	2000      	movs	r0, #0
		break;
    66ac:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    66ae:	b300      	cbz	r0, 66f2 <get_drive+0x68>
    66b0:	2802      	cmp	r0, #2
    66b2:	d103      	bne.n	66bc <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    66b4:	2304      	movs	r3, #4
    66b6:	700b      	strb	r3, [r1, #0]
	return 0;
    66b8:	2000      	movs	r0, #0
		break;
    66ba:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    66bc:	f06f 0015 	mvn.w	r0, #21
    66c0:	4770      	bx	lr
    66c2:	f06f 0015 	mvn.w	r0, #21
    66c6:	4770      	bx	lr
    66c8:	f240 2302 	movw	r3, #514	; 0x202
    66cc:	4298      	cmp	r0, r3
    66ce:	d01b      	beq.n	6708 <get_drive+0x7e>
    66d0:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    66d4:	d103      	bne.n	66de <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    66d6:	2303      	movs	r3, #3
    66d8:	700b      	strb	r3, [r1, #0]
	return 0;
    66da:	2000      	movs	r0, #0
		break;
    66dc:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    66de:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    66e2:	d103      	bne.n	66ec <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    66e4:	2302      	movs	r3, #2
    66e6:	700b      	strb	r3, [r1, #0]
	return 0;
    66e8:	2000      	movs	r0, #0
		break;
    66ea:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    66ec:	f06f 0015 	mvn.w	r0, #21
    66f0:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    66f2:	2000      	movs	r0, #0
    66f4:	7008      	strb	r0, [r1, #0]
		break;
    66f6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    66f8:	2306      	movs	r3, #6
    66fa:	700b      	strb	r3, [r1, #0]
	return 0;
    66fc:	2000      	movs	r0, #0
		break;
    66fe:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    6700:	2307      	movs	r3, #7
    6702:	700b      	strb	r3, [r1, #0]
	return 0;
    6704:	2000      	movs	r0, #0
		break;
    6706:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    6708:	2305      	movs	r3, #5
    670a:	700b      	strb	r3, [r1, #0]
	return 0;
    670c:	2000      	movs	r0, #0
}
    670e:	4770      	bx	lr

00006710 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    6710:	f010 0f10 	tst.w	r0, #16
    6714:	d104      	bne.n	6720 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    6716:	f010 0f20 	tst.w	r0, #32
    671a:	d103      	bne.n	6724 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    671c:	2000      	movs	r0, #0
    671e:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    6720:	2003      	movs	r0, #3
    6722:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    6724:	2001      	movs	r0, #1
}
    6726:	4770      	bx	lr

00006728 <gpio_nrfx_port_get_raw>:
	return port->config;
    6728:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    672a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    672c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    672e:	600b      	str	r3, [r1, #0]
}
    6730:	2000      	movs	r0, #0
    6732:	4770      	bx	lr

00006734 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    6734:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6736:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    6738:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    673c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    6740:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
    6742:	60d9      	str	r1, [r3, #12]
}
    6744:	2000      	movs	r0, #0
    6746:	4770      	bx	lr

00006748 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    6748:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    674a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    674c:	6099      	str	r1, [r3, #8]
}
    674e:	2000      	movs	r0, #0
    6750:	4770      	bx	lr

00006752 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    6752:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6754:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    6756:	60d9      	str	r1, [r3, #12]
}
    6758:	2000      	movs	r0, #0
    675a:	4770      	bx	lr

0000675c <gpio_nrfx_port_toggle_bits>:
	return port->config;
    675c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    675e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6760:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    6762:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    6766:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    6768:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
    676a:	60d3      	str	r3, [r2, #12]
}
    676c:	2000      	movs	r0, #0
    676e:	4770      	bx	lr

00006770 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    6770:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    6774:	d007      	beq.n	6786 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6776:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    677a:	d00d      	beq.n	6798 <get_trigger+0x28>
    677c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    6780:	d008      	beq.n	6794 <get_trigger+0x24>
    6782:	2001      	movs	r0, #1
}
    6784:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    6786:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    678a:	d001      	beq.n	6790 <get_trigger+0x20>
    678c:	2005      	movs	r0, #5
    678e:	4770      	bx	lr
    6790:	2004      	movs	r0, #4
    6792:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6794:	2002      	movs	r0, #2
    6796:	4770      	bx	lr
    6798:	2003      	movs	r0, #3
    679a:	4770      	bx	lr

0000679c <gpio_nrfx_manage_callback>:
{
    679c:	b508      	push	{r3, lr}
	return port->data;
    679e:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    67a0:	3004      	adds	r0, #4
    67a2:	f7ff ff33 	bl	660c <gpio_manage_callback>
}
    67a6:	bd08      	pop	{r3, pc}

000067a8 <nrfx_gpio_handler>:
{
    67a8:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    67aa:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    67ae:	0940      	lsrs	r0, r0, #5
    67b0:	f7fb fd20 	bl	21f4 <get_dev>
	if (port == NULL) {
    67b4:	b130      	cbz	r0, 67c4 <nrfx_gpio_handler+0x1c>
    67b6:	4601      	mov	r1, r0
	return port->data;
    67b8:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    67ba:	2201      	movs	r2, #1
    67bc:	40a2      	lsls	r2, r4
    67be:	3004      	adds	r0, #4
    67c0:	f7ff ff43 	bl	664a <gpio_fire_callbacks>
}
    67c4:	bd10      	pop	{r4, pc}

000067c6 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    67c6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    67c8:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    67ca:	f04f 0120 	mov.w	r1, #32
    67ce:	f3ef 8311 	mrs	r3, BASEPRI
    67d2:	f381 8812 	msr	BASEPRI_MAX, r1
    67d6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    67da:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    67de:	b131      	cbz	r1, 67ee <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    67e0:	2100      	movs	r1, #0
    67e2:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    67e6:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    67ea:	2101      	movs	r1, #1
    67ec:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    67ee:	f383 8811 	msr	BASEPRI, r3
    67f2:	f3bf 8f6f 	isb	sy
}
    67f6:	4770      	bx	lr

000067f8 <uarte_nrfx_isr_int>:
{
    67f8:	b570      	push	{r4, r5, r6, lr}
    67fa:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    67fc:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    67fe:	6835      	ldr	r5, [r6, #0]
    return p_reg->INTENSET & mask;
    6800:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6804:	f413 7f80 	tst.w	r3, #256	; 0x100
    6808:	d003      	beq.n	6812 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    680a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    680e:	2b00      	cmp	r3, #0
    6810:	d138      	bne.n	6884 <uarte_nrfx_isr_int+0x8c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6812:	6873      	ldr	r3, [r6, #4]
    6814:	f013 0f10 	tst.w	r3, #16
    6818:	d01a      	beq.n	6850 <uarte_nrfx_isr_int+0x58>
	__asm__ volatile(
    681a:	f04f 0220 	mov.w	r2, #32
    681e:	f3ef 8311 	mrs	r3, BASEPRI
    6822:	f382 8812 	msr	BASEPRI_MAX, r2
    6826:	f3bf 8f6f 	isb	sy
    682a:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    682e:	b112      	cbz	r2, 6836 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6830:	2200      	movs	r2, #0
    6832:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
		struct uarte_nrfx_data *data = dev->data;
    6836:	6922      	ldr	r2, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    6838:	68d2      	ldr	r2, [r2, #12]
    683a:	b10a      	cbz	r2, 6840 <uarte_nrfx_isr_int+0x48>
    683c:	6912      	ldr	r2, [r2, #16]
    683e:	b91a      	cbnz	r2, 6848 <uarte_nrfx_isr_int+0x50>
    p_reg->INTENCLR = mask;
    6840:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6844:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
    6848:	f383 8811 	msr	BASEPRI, r3
    684c:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
    6850:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
    6852:	68da      	ldr	r2, [r3, #12]
    6854:	b1aa      	cbz	r2, 6882 <uarte_nrfx_isr_int+0x8a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6856:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    685a:	b121      	cbz	r1, 6866 <uarte_nrfx_isr_int+0x6e>
		data->int_driven->fifo_fill_lock = 0;
    685c:	2100      	movs	r1, #0
    685e:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    6860:	68da      	ldr	r2, [r3, #12]
    6862:	7b92      	ldrb	r2, [r2, #14]
    6864:	b98a      	cbnz	r2, 688a <uarte_nrfx_isr_int+0x92>
    6866:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    686a:	b122      	cbz	r2, 6876 <uarte_nrfx_isr_int+0x7e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    686c:	2200      	movs	r2, #0
    686e:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
    6872:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
    6876:	68da      	ldr	r2, [r3, #12]
    6878:	6813      	ldr	r3, [r2, #0]
    687a:	b113      	cbz	r3, 6882 <uarte_nrfx_isr_int+0x8a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    687c:	6851      	ldr	r1, [r2, #4]
    687e:	4620      	mov	r0, r4
    6880:	4798      	blx	r3
}
    6882:	bd70      	pop	{r4, r5, r6, pc}
		endtx_isr(dev);
    6884:	f7ff ff9f 	bl	67c6 <endtx_isr>
    6888:	e7c3      	b.n	6812 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
    688a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    688e:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    6892:	68db      	ldr	r3, [r3, #12]
    6894:	7399      	strb	r1, [r3, #14]
			return;
    6896:	e7f4      	b.n	6882 <uarte_nrfx_isr_int+0x8a>

00006898 <uarte_nrfx_configure>:
{
    6898:	b570      	push	{r4, r5, r6, lr}
    689a:	b082      	sub	sp, #8
    689c:	4605      	mov	r5, r0
    689e:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    68a0:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    68a2:	794b      	ldrb	r3, [r1, #5]
    68a4:	2b01      	cmp	r3, #1
    68a6:	d006      	beq.n	68b6 <uarte_nrfx_configure+0x1e>
    68a8:	2b03      	cmp	r3, #3
    68aa:	d011      	beq.n	68d0 <uarte_nrfx_configure+0x38>
    68ac:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    68b0:	4610      	mov	r0, r2
    68b2:	b002      	add	sp, #8
    68b4:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    68b6:	2300      	movs	r3, #0
    68b8:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    68bc:	79a3      	ldrb	r3, [r4, #6]
    68be:	2b03      	cmp	r3, #3
    68c0:	d146      	bne.n	6950 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    68c2:	79e3      	ldrb	r3, [r4, #7]
    68c4:	b143      	cbz	r3, 68d8 <uarte_nrfx_configure+0x40>
    68c6:	2b01      	cmp	r3, #1
    68c8:	d015      	beq.n	68f6 <uarte_nrfx_configure+0x5e>
    68ca:	f06f 0285 	mvn.w	r2, #133	; 0x85
    68ce:	e7ef      	b.n	68b0 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    68d0:	2310      	movs	r3, #16
    68d2:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    68d6:	e7f1      	b.n	68bc <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    68d8:	2300      	movs	r3, #0
    68da:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    68de:	2300      	movs	r3, #0
    68e0:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    68e4:	7923      	ldrb	r3, [r4, #4]
    68e6:	2b01      	cmp	r3, #1
    68e8:	d02a      	beq.n	6940 <uarte_nrfx_configure+0xa8>
    68ea:	2b02      	cmp	r3, #2
    68ec:	d024      	beq.n	6938 <uarte_nrfx_configure+0xa0>
    68ee:	b133      	cbz	r3, 68fe <uarte_nrfx_configure+0x66>
    68f0:	f06f 0285 	mvn.w	r2, #133	; 0x85
    68f4:	e7dc      	b.n	68b0 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    68f6:	2301      	movs	r3, #1
    68f8:	f88d 3000 	strb.w	r3, [sp]
		break;
    68fc:	e7ef      	b.n	68de <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    68fe:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    6902:	6821      	ldr	r1, [r4, #0]
    6904:	4628      	mov	r0, r5
    6906:	f7fb fd8b 	bl	2420 <baudrate_set>
    690a:	4602      	mov	r2, r0
    690c:	bb18      	cbnz	r0, 6956 <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    690e:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    6910:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    6912:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    6916:	f89d 0002 	ldrb.w	r0, [sp, #2]
    691a:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    691c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    6920:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    6922:	f89d 0000 	ldrb.w	r0, [sp]
    6926:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    6928:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    692c:	3604      	adds	r6, #4
    692e:	e894 0003 	ldmia.w	r4, {r0, r1}
    6932:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    6936:	e7bb      	b.n	68b0 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    6938:	230e      	movs	r3, #14
    693a:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    693e:	e7e0      	b.n	6902 <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    6940:	230e      	movs	r3, #14
    6942:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    6946:	f44f 7380 	mov.w	r3, #256	; 0x100
    694a:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    694e:	e7d8      	b.n	6902 <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    6950:	f06f 0285 	mvn.w	r2, #133	; 0x85
    6954:	e7ac      	b.n	68b0 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    6956:	f06f 0285 	mvn.w	r2, #133	; 0x85
    695a:	e7a9      	b.n	68b0 <uarte_nrfx_configure+0x18>

0000695c <uarte_nrfx_config_get>:
{
    695c:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    695e:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    6960:	3304      	adds	r3, #4
    6962:	e893 0003 	ldmia.w	r3, {r0, r1}
    6966:	e882 0003 	stmia.w	r2, {r0, r1}
}
    696a:	2000      	movs	r0, #0
    696c:	4770      	bx	lr

0000696e <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    696e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6970:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6972:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6976:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    697a:	4770      	bx	lr

0000697c <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    697c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    697e:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6980:	685b      	ldr	r3, [r3, #4]
    6982:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6986:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    698a:	b929      	cbnz	r1, 6998 <is_tx_ready+0x1c>
    698c:	b933      	cbnz	r3, 699c <is_tx_ready+0x20>
    698e:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    6992:	b92b      	cbnz	r3, 69a0 <is_tx_ready+0x24>
    6994:	2000      	movs	r0, #0
    6996:	4770      	bx	lr
    6998:	2001      	movs	r0, #1
    699a:	4770      	bx	lr
    699c:	2000      	movs	r0, #0
    699e:	4770      	bx	lr
    69a0:	2001      	movs	r0, #1
}
    69a2:	4770      	bx	lr

000069a4 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    69a4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    69a6:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    69a8:	2208      	movs	r2, #8
    69aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    69ae:	4770      	bx	lr

000069b0 <tx_start>:
{
    69b0:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    69b2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    69b4:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    69b6:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    69ba:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    69be:	2200      	movs	r2, #0
    69c0:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    69c4:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    69c8:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    69cc:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    69d0:	685b      	ldr	r3, [r3, #4]
    69d2:	f013 0f10 	tst.w	r3, #16
    69d6:	d102      	bne.n	69de <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    69d8:	2301      	movs	r3, #1
    69da:	60a3      	str	r3, [r4, #8]
}
    69dc:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    69de:	2101      	movs	r1, #1
    69e0:	f7ff ffe0 	bl	69a4 <uarte_enable>
    p_reg->INTENSET = mask;
    69e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    69e8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    69ec:	e7f4      	b.n	69d8 <tx_start+0x28>

000069ee <uarte_nrfx_poll_in>:
{
    69ee:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    69f0:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    69f2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    69f4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69f6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    69fa:	b15a      	cbz	r2, 6a14 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    69fc:	69a2      	ldr	r2, [r4, #24]
    69fe:	7812      	ldrb	r2, [r2, #0]
    6a00:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a02:	2000      	movs	r0, #0
    6a04:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6a08:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a0c:	2201      	movs	r2, #1
    6a0e:	601a      	str	r2, [r3, #0]
}
    6a10:	bc10      	pop	{r4}
    6a12:	4770      	bx	lr
		return -1;
    6a14:	f04f 30ff 	mov.w	r0, #4294967295
    6a18:	e7fa      	b.n	6a10 <uarte_nrfx_poll_in+0x22>

00006a1a <uarte_nrfx_fifo_read>:
	const struct uarte_nrfx_config *config = dev->config;
    6a1a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6a1c:	681b      	ldr	r3, [r3, #0]
	const struct uarte_nrfx_data *data = dev->data;
    6a1e:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6a20:	2a00      	cmp	r2, #0
    6a22:	dd0d      	ble.n	6a40 <uarte_nrfx_fifo_read+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a24:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    6a28:	b162      	cbz	r2, 6a44 <uarte_nrfx_fifo_read+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a2a:	2200      	movs	r2, #0
    6a2c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    6a30:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = *data->rx_data;
    6a34:	6982      	ldr	r2, [r0, #24]
    6a36:	7812      	ldrb	r2, [r2, #0]
    6a38:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a3a:	2001      	movs	r0, #1
    6a3c:	6018      	str	r0, [r3, #0]
}
    6a3e:	4770      	bx	lr
	int num_rx = 0;
    6a40:	2000      	movs	r0, #0
    6a42:	4770      	bx	lr
    6a44:	2000      	movs	r0, #0
}
    6a46:	4770      	bx	lr

00006a48 <uarte_nrfx_irq_tx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    6a48:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6a4a:	681a      	ldr	r2, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    6a4c:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
    6a4e:	f04f 0020 	mov.w	r0, #32
    6a52:	f3ef 8311 	mrs	r3, BASEPRI
    6a56:	f380 8812 	msr	BASEPRI_MAX, r0
    6a5a:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    6a5e:	68c9      	ldr	r1, [r1, #12]
    6a60:	2000      	movs	r0, #0
    6a62:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    6a64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    6a68:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    6a6c:	f383 8811 	msr	BASEPRI, r3
    6a70:	f3bf 8f6f 	isb	sy
}
    6a74:	4770      	bx	lr

00006a76 <uarte_nrfx_irq_tx_disable>:
	struct uarte_nrfx_data *data = dev->data;
    6a76:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
    6a78:	68db      	ldr	r3, [r3, #12]
    6a7a:	2201      	movs	r2, #1
    6a7c:	739a      	strb	r2, [r3, #14]
}
    6a7e:	4770      	bx	lr

00006a80 <uarte_nrfx_irq_tx_ready_complete>:
	const struct uarte_nrfx_config *config = dev->config;
    6a80:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6a82:	6819      	ldr	r1, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    6a84:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
    6a86:	68db      	ldr	r3, [r3, #12]
    6a88:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6a8a:	b95a      	cbnz	r2, 6aa4 <uarte_nrfx_irq_tx_ready_complete+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a8c:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    6a90:	b152      	cbz	r2, 6aa8 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    6a92:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6a96:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    6a9a:	d007      	beq.n	6aac <uarte_nrfx_irq_tx_ready_complete+0x2c>
		data->int_driven->fifo_fill_lock = 0;
    6a9c:	2200      	movs	r2, #0
    6a9e:	611a      	str	r2, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6aa0:	2001      	movs	r0, #1
    6aa2:	4770      	bx	lr
    6aa4:	2000      	movs	r0, #0
    6aa6:	4770      	bx	lr
    6aa8:	2000      	movs	r0, #0
    6aaa:	4770      	bx	lr
    6aac:	2000      	movs	r0, #0
}
    6aae:	4770      	bx	lr

00006ab0 <uarte_nrfx_irq_rx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    6ab0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6ab2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ab4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    6ab8:	3800      	subs	r0, #0
    6aba:	bf18      	it	ne
    6abc:	2001      	movne	r0, #1
    6abe:	4770      	bx	lr

00006ac0 <uarte_nrfx_irq_rx_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    6ac0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6ac2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6ac4:	2210      	movs	r2, #16
    6ac6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6aca:	4770      	bx	lr

00006acc <uarte_nrfx_irq_rx_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    6acc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6ace:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    6ad0:	2210      	movs	r2, #16
    6ad2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6ad6:	4770      	bx	lr

00006ad8 <uarte_nrfx_irq_err_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    6ad8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6ada:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6adc:	f44f 7200 	mov.w	r2, #512	; 0x200
    6ae0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6ae4:	4770      	bx	lr

00006ae6 <uarte_nrfx_irq_err_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    6ae6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6ae8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    6aea:	f44f 7200 	mov.w	r2, #512	; 0x200
    6aee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6af2:	4770      	bx	lr

00006af4 <uarte_nrfx_irq_is_pending>:
{
    6af4:	b538      	push	{r3, r4, r5, lr}
    6af6:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    6af8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6afa:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    6afc:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    6b00:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    6b04:	d106      	bne.n	6b14 <uarte_nrfx_irq_is_pending+0x20>
    6b06:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    6b0a:	f013 0f10 	tst.w	r3, #16
    6b0e:	d107      	bne.n	6b20 <uarte_nrfx_irq_is_pending+0x2c>
    6b10:	2000      	movs	r0, #0
}
    6b12:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    6b14:	f7ff ffb4 	bl	6a80 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    6b18:	2800      	cmp	r0, #0
    6b1a:	d0f4      	beq.n	6b06 <uarte_nrfx_irq_is_pending+0x12>
		||
    6b1c:	2001      	movs	r0, #1
    6b1e:	e7f8      	b.n	6b12 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
    6b20:	4620      	mov	r0, r4
    6b22:	f7ff ffc5 	bl	6ab0 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    6b26:	2800      	cmp	r0, #0
    6b28:	d0f3      	beq.n	6b12 <uarte_nrfx_irq_is_pending+0x1e>
		||
    6b2a:	2001      	movs	r0, #1
    6b2c:	e7f1      	b.n	6b12 <uarte_nrfx_irq_is_pending+0x1e>

00006b2e <uarte_nrfx_irq_update>:
}
    6b2e:	2001      	movs	r0, #1
    6b30:	4770      	bx	lr

00006b32 <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    6b32:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    6b34:	68d8      	ldr	r0, [r3, #12]
    6b36:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    6b38:	68db      	ldr	r3, [r3, #12]
    6b3a:	605a      	str	r2, [r3, #4]
}
    6b3c:	4770      	bx	lr

00006b3e <uarte_nrfx_fifo_fill>:
{
    6b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b40:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
    6b42:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    6b44:	68fb      	ldr	r3, [r7, #12]
    6b46:	899c      	ldrh	r4, [r3, #12]
    6b48:	4294      	cmp	r4, r2
    6b4a:	bfa8      	it	ge
    6b4c:	4614      	movge	r4, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    6b4e:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6b50:	2201      	movs	r2, #1
    6b52:	e8d3 0fef 	ldaex	r0, [r3]
    6b56:	2800      	cmp	r0, #0
    6b58:	d103      	bne.n	6b62 <uarte_nrfx_fifo_fill+0x24>
    6b5a:	e8c3 2fe5 	stlex	r5, r2, [r3]
    6b5e:	2d00      	cmp	r5, #0
    6b60:	d1f7      	bne.n	6b52 <uarte_nrfx_fifo_fill+0x14>
    6b62:	d120      	bne.n	6ba6 <uarte_nrfx_fifo_fill+0x68>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
    6b64:	68fb      	ldr	r3, [r7, #12]
    6b66:	4622      	mov	r2, r4
    6b68:	6898      	ldr	r0, [r3, #8]
    6b6a:	f7ff fba4 	bl	62b6 <memcpy>
	__asm__ volatile(
    6b6e:	f04f 0320 	mov.w	r3, #32
    6b72:	f3ef 8511 	mrs	r5, BASEPRI
    6b76:	f383 8812 	msr	BASEPRI_MAX, r3
    6b7a:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    6b7e:	4630      	mov	r0, r6
    6b80:	f7ff fefc 	bl	697c <is_tx_ready>
    6b84:	b940      	cbnz	r0, 6b98 <uarte_nrfx_fifo_fill+0x5a>
		data->int_driven->fifo_fill_lock = 0;
    6b86:	68fb      	ldr	r3, [r7, #12]
    6b88:	2400      	movs	r4, #0
    6b8a:	611c      	str	r4, [r3, #16]
	__asm__ volatile(
    6b8c:	f385 8811 	msr	BASEPRI, r5
    6b90:	f3bf 8f6f 	isb	sy
}
    6b94:	4620      	mov	r0, r4
    6b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    6b98:	68fb      	ldr	r3, [r7, #12]
    6b9a:	4622      	mov	r2, r4
    6b9c:	6899      	ldr	r1, [r3, #8]
    6b9e:	4630      	mov	r0, r6
    6ba0:	f7ff ff06 	bl	69b0 <tx_start>
    6ba4:	e7f2      	b.n	6b8c <uarte_nrfx_fifo_fill+0x4e>
		return 0;
    6ba6:	2400      	movs	r4, #0
    6ba8:	e7f4      	b.n	6b94 <uarte_nrfx_fifo_fill+0x56>

00006baa <k_msleep>:
{
    6baa:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    6bac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6bb0:	17c1      	asrs	r1, r0, #31
    6bb2:	03c9      	lsls	r1, r1, #15
    6bb4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    6bb8:	03c0      	lsls	r0, r0, #15
    6bba:	f240 33e7 	movw	r3, #999	; 0x3e7
    6bbe:	18c0      	adds	r0, r0, r3
    6bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6bc4:	f04f 0300 	mov.w	r3, #0
    6bc8:	f141 0100 	adc.w	r1, r1, #0
    6bcc:	f7f9 fac2 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    6bd0:	f7fe f98c 	bl	4eec <z_impl_k_sleep>
}
    6bd4:	bd08      	pop	{r3, pc}

00006bd6 <wait_tx_ready>:
{
    6bd6:	b570      	push	{r4, r5, r6, lr}
    6bd8:	4606      	mov	r6, r0
    6bda:	e013      	b.n	6c04 <wait_tx_ready+0x2e>
		if (res) {
    6bdc:	b17d      	cbz	r5, 6bfe <wait_tx_ready+0x28>
	__asm__ volatile(
    6bde:	f04f 0320 	mov.w	r3, #32
    6be2:	f3ef 8411 	mrs	r4, BASEPRI
    6be6:	f383 8812 	msr	BASEPRI_MAX, r3
    6bea:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    6bee:	4630      	mov	r0, r6
    6bf0:	f7ff fec4 	bl	697c <is_tx_ready>
    6bf4:	b998      	cbnz	r0, 6c1e <wait_tx_ready+0x48>
	__asm__ volatile(
    6bf6:	f384 8811 	msr	BASEPRI, r4
    6bfa:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    6bfe:	2001      	movs	r0, #1
    6c00:	f7ff ffd3 	bl	6baa <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    6c04:	2464      	movs	r4, #100	; 0x64
    6c06:	4630      	mov	r0, r6
    6c08:	f7ff feb8 	bl	697c <is_tx_ready>
    6c0c:	4605      	mov	r5, r0
    6c0e:	2800      	cmp	r0, #0
    6c10:	d1e4      	bne.n	6bdc <wait_tx_ready+0x6>
    6c12:	2001      	movs	r0, #1
    6c14:	f000 fa27 	bl	7066 <nrfx_busy_wait>
    6c18:	3c01      	subs	r4, #1
    6c1a:	d1f4      	bne.n	6c06 <wait_tx_ready+0x30>
    6c1c:	e7de      	b.n	6bdc <wait_tx_ready+0x6>
}
    6c1e:	4620      	mov	r0, r4
    6c20:	bd70      	pop	{r4, r5, r6, pc}

00006c22 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    6c22:	b510      	push	{r4, lr}
    6c24:	b082      	sub	sp, #8
    6c26:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    6c28:	aa01      	add	r2, sp, #4
    6c2a:	f000 f8c6 	bl	6dba <pinctrl_lookup_state>
	if (ret < 0) {
    6c2e:	2800      	cmp	r0, #0
    6c30:	db05      	blt.n	6c3e <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    6c32:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    6c34:	6822      	ldr	r2, [r4, #0]
    6c36:	7919      	ldrb	r1, [r3, #4]
    6c38:	6818      	ldr	r0, [r3, #0]
    6c3a:	f7fb ff77 	bl	2b2c <pinctrl_configure_pins>
}
    6c3e:	b002      	add	sp, #8
    6c40:	bd10      	pop	{r4, pc}

00006c42 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    6c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c46:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    6c48:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    6c4a:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    6c4c:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6c50:	2100      	movs	r1, #0
    6c52:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    6c56:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    6c5a:	68f8      	ldr	r0, [r7, #12]
    6c5c:	f7ff ffe1 	bl	6c22 <pinctrl_apply_state>
	if (err < 0) {
    6c60:	1e05      	subs	r5, r0, #0
    6c62:	db35      	blt.n	6cd0 <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    6c64:	f108 0104 	add.w	r1, r8, #4
    6c68:	4620      	mov	r0, r4
    6c6a:	f7ff fe15 	bl	6898 <uarte_nrfx_configure>
	if (err) {
    6c6e:	4605      	mov	r5, r0
    6c70:	bb70      	cbnz	r0, 6cd0 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    6c72:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    6c74:	f013 0f02 	tst.w	r3, #2
    6c78:	d12d      	bne.n	6cd6 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6c7a:	2308      	movs	r3, #8
    6c7c:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    6c80:	7a3b      	ldrb	r3, [r7, #8]
    6c82:	b95b      	cbnz	r3, 6c9c <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6c84:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    6c88:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    6c8c:	f8d8 3018 	ldr.w	r3, [r8, #24]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6c90:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6c94:	2301      	movs	r3, #1
    6c96:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6c9a:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    6c9c:	687b      	ldr	r3, [r7, #4]
    6c9e:	f013 0f02 	tst.w	r3, #2
    6ca2:	d103      	bne.n	6cac <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    6ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
    6ca8:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6cac:	687b      	ldr	r3, [r7, #4]
    6cae:	f013 0f10 	tst.w	r3, #16
    6cb2:	d003      	beq.n	6cbc <uarte_instance_init+0x7a>
    6cb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    6cb8:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    6cbc:	f8d8 3014 	ldr.w	r3, [r8, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6cc0:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6cc4:	2300      	movs	r3, #0
    6cc6:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6cca:	2301      	movs	r3, #1
    6ccc:	60b3      	str	r3, [r6, #8]
    6cce:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    6cd0:	4628      	mov	r0, r5
    6cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    6cd6:	4641      	mov	r1, r8
    6cd8:	4630      	mov	r0, r6
    6cda:	f7fb fc77 	bl	25cc <endtx_stoptx_ppi_init>
		if (err < 0) {
    6cde:	2800      	cmp	r0, #0
    6ce0:	dacb      	bge.n	6c7a <uarte_instance_init+0x38>
			return err;
    6ce2:	4605      	mov	r5, r0
    6ce4:	e7f4      	b.n	6cd0 <uarte_instance_init+0x8e>

00006ce6 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    6ce6:	b510      	push	{r4, lr}
    6ce8:	4604      	mov	r4, r0
    6cea:	2200      	movs	r2, #0
    6cec:	2101      	movs	r1, #1
    6cee:	2008      	movs	r0, #8
    6cf0:	f7ff f9ff 	bl	60f2 <z_arm_irq_priority_set>
    6cf4:	2008      	movs	r0, #8
    6cf6:	f7ff f9f7 	bl	60e8 <arch_irq_enable>
    6cfa:	2101      	movs	r1, #1
    6cfc:	4620      	mov	r0, r4
    6cfe:	f7ff ffa0 	bl	6c42 <uarte_instance_init>
    6d02:	bd10      	pop	{r4, pc}

00006d04 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6d04:	b510      	push	{r4, lr}
    6d06:	4604      	mov	r4, r0
    6d08:	2200      	movs	r2, #0
    6d0a:	2101      	movs	r1, #1
    6d0c:	2009      	movs	r0, #9
    6d0e:	f7ff f9f0 	bl	60f2 <z_arm_irq_priority_set>
    6d12:	2009      	movs	r0, #9
    6d14:	f7ff f9e8 	bl	60e8 <arch_irq_enable>
    6d18:	2101      	movs	r1, #1
    6d1a:	4620      	mov	r0, r4
    6d1c:	f7ff ff91 	bl	6c42 <uarte_instance_init>
    6d20:	bd10      	pop	{r4, pc}

00006d22 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6d22:	4770      	bx	lr

00006d24 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    6d24:	1a40      	subs	r0, r0, r1
}
    6d26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6d2a:	4770      	bx	lr

00006d2c <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6d2c:	f100 0350 	add.w	r3, r0, #80	; 0x50
    6d30:	009b      	lsls	r3, r3, #2
    6d32:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6d34:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    6d38:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    6d3c:	6818      	ldr	r0, [r3, #0]
}
    6d3e:	3800      	subs	r0, #0
    6d40:	bf18      	it	ne
    6d42:	2001      	movne	r0, #1
    6d44:	4770      	bx	lr

00006d46 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6d46:	f100 0350 	add.w	r3, r0, #80	; 0x50
    6d4a:	009b      	lsls	r3, r3, #2
    6d4c:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6d4e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    6d52:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    6d56:	2200      	movs	r2, #0
    6d58:	601a      	str	r2, [r3, #0]
    6d5a:	681b      	ldr	r3, [r3, #0]
}
    6d5c:	4770      	bx	lr

00006d5e <absolute_time_to_cc>:
}
    6d5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6d62:	4770      	bx	lr

00006d64 <full_int_lock>:
	__asm__ volatile(
    6d64:	f04f 0320 	mov.w	r3, #32
    6d68:	f3ef 8011 	mrs	r0, BASEPRI
    6d6c:	f383 8812 	msr	BASEPRI_MAX, r3
    6d70:	f3bf 8f6f 	isb	sy
}
    6d74:	4770      	bx	lr

00006d76 <full_int_unlock>:
	__asm__ volatile(
    6d76:	f380 8811 	msr	BASEPRI, r0
    6d7a:	f3bf 8f6f 	isb	sy
}
    6d7e:	4770      	bx	lr

00006d80 <compare_set>:
{
    6d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d82:	b083      	sub	sp, #12
    6d84:	4604      	mov	r4, r0
    6d86:	4617      	mov	r7, r2
    6d88:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    6d8a:	f7fb fc99 	bl	26c0 <compare_int_lock>
    6d8e:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    6d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6d92:	9301      	str	r3, [sp, #4]
    6d94:	9b08      	ldr	r3, [sp, #32]
    6d96:	9300      	str	r3, [sp, #0]
    6d98:	463a      	mov	r2, r7
    6d9a:	462b      	mov	r3, r5
    6d9c:	4620      	mov	r0, r4
    6d9e:	f7fb fd4d 	bl	283c <compare_set_nolocks>
    6da2:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    6da4:	4631      	mov	r1, r6
    6da6:	4620      	mov	r0, r4
    6da8:	f7fb fcd8 	bl	275c <compare_int_unlock>
}
    6dac:	4628      	mov	r0, r5
    6dae:	b003      	add	sp, #12
    6db0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006db2 <sys_clock_cycle_get_32>:
{
    6db2:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    6db4:	f7fb fd22 	bl	27fc <z_nrf_rtc_timer_read>
}
    6db8:	bd08      	pop	{r3, pc}

00006dba <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6dba:	b500      	push	{lr}
	*state = &config->states[0];
    6dbc:	6843      	ldr	r3, [r0, #4]
    6dbe:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    6dc0:	e001      	b.n	6dc6 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    6dc2:	3308      	adds	r3, #8
    6dc4:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    6dc6:	6813      	ldr	r3, [r2, #0]
    6dc8:	f890 c008 	ldrb.w	ip, [r0, #8]
    6dcc:	f8d0 e004 	ldr.w	lr, [r0, #4]
    6dd0:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
    6dd4:	4563      	cmp	r3, ip
    6dd6:	d205      	bcs.n	6de4 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
    6dd8:	f893 c005 	ldrb.w	ip, [r3, #5]
    6ddc:	458c      	cmp	ip, r1
    6dde:	d1f0      	bne.n	6dc2 <pinctrl_lookup_state+0x8>
			return 0;
    6de0:	2000      	movs	r0, #0
    6de2:	e001      	b.n	6de8 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
    6de4:	f06f 0001 	mvn.w	r0, #1
}
    6de8:	f85d fb04 	ldr.w	pc, [sp], #4

00006dec <z_impl_gpio_pin_interrupt_configure>:
{
    6dec:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
    6dee:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
    6df0:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6df2:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    6df6:	d006      	beq.n	6e06 <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    6df8:	6825      	ldr	r5, [r4, #0]
    6dfa:	2401      	movs	r4, #1
    6dfc:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6dfe:	4225      	tst	r5, r4
    6e00:	d001      	beq.n	6e06 <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    6e02:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    6e06:	699c      	ldr	r4, [r3, #24]
    6e08:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    6e0c:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
    6e10:	47a0      	blx	r4
}
    6e12:	bd38      	pop	{r3, r4, r5, pc}

00006e14 <z_impl_gpio_pin_configure>:
{
    6e14:	b538      	push	{r3, r4, r5, lr}
    6e16:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    6e18:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    6e1a:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    6e1c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    6e20:	d007      	beq.n	6e32 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    6e22:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    6e26:	d004      	beq.n	6e32 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    6e28:	f012 0f01 	tst.w	r2, #1
    6e2c:	d001      	beq.n	6e32 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    6e2e:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    6e32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    6e36:	f013 0f01 	tst.w	r3, #1
    6e3a:	d00a      	beq.n	6e52 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6e3c:	6823      	ldr	r3, [r4, #0]
    6e3e:	f04f 0c01 	mov.w	ip, #1
    6e42:	fa0c fc01 	lsl.w	ip, ip, r1
    6e46:	ea43 030c 	orr.w	r3, r3, ip
    6e4a:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    6e4c:	682b      	ldr	r3, [r5, #0]
    6e4e:	4798      	blx	r3
}
    6e50:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6e52:	6823      	ldr	r3, [r4, #0]
    6e54:	f04f 0c01 	mov.w	ip, #1
    6e58:	fa0c fc01 	lsl.w	ip, ip, r1
    6e5c:	ea23 030c 	bic.w	r3, r3, ip
    6e60:	6023      	str	r3, [r4, #0]
    6e62:	e7f3      	b.n	6e4c <z_impl_gpio_pin_configure+0x38>

00006e64 <gpio_pin_configure_dt>:
{
    6e64:	b508      	push	{r3, lr}
    6e66:	4603      	mov	r3, r0
    6e68:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    6e6a:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    6e6c:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    6e6e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    6e70:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    6e74:	f7ff ffce 	bl	6e14 <z_impl_gpio_pin_configure>
}
    6e78:	bd08      	pop	{r3, pc}

00006e7a <gpio_port_get>:
{
    6e7a:	b538      	push	{r3, r4, r5, lr}
    6e7c:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
    6e7e:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
    6e80:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
    6e82:	685b      	ldr	r3, [r3, #4]
    6e84:	4798      	blx	r3
	if (ret == 0) {
    6e86:	b918      	cbnz	r0, 6e90 <gpio_port_get+0x16>
		*value ^= data->invert;
    6e88:	6823      	ldr	r3, [r4, #0]
    6e8a:	682a      	ldr	r2, [r5, #0]
    6e8c:	4053      	eors	r3, r2
    6e8e:	6023      	str	r3, [r4, #0]
}
    6e90:	bd38      	pop	{r3, r4, r5, pc}

00006e92 <gpio_pin_get>:
{
    6e92:	b510      	push	{r4, lr}
    6e94:	b082      	sub	sp, #8
    6e96:	460c      	mov	r4, r1
	ret = gpio_port_get(port, &value);
    6e98:	a901      	add	r1, sp, #4
    6e9a:	f7ff ffee 	bl	6e7a <gpio_port_get>
	if (ret == 0) {
    6e9e:	b930      	cbnz	r0, 6eae <gpio_pin_get+0x1c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    6ea0:	2301      	movs	r3, #1
    6ea2:	40a3      	lsls	r3, r4
    6ea4:	9a01      	ldr	r2, [sp, #4]
    6ea6:	4213      	tst	r3, r2
    6ea8:	bf14      	ite	ne
    6eaa:	2001      	movne	r0, #1
    6eac:	2000      	moveq	r0, #0
}
    6eae:	b002      	add	sp, #8
    6eb0:	bd10      	pop	{r4, pc}

00006eb2 <gpio_pin_set_raw>:
{
    6eb2:	b508      	push	{r3, lr}
	if (value != 0)	{
    6eb4:	b132      	cbz	r2, 6ec4 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    6eb6:	2301      	movs	r3, #1
    6eb8:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    6ebc:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    6ebe:	68db      	ldr	r3, [r3, #12]
    6ec0:	4798      	blx	r3
}
    6ec2:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    6ec4:	2301      	movs	r3, #1
    6ec6:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    6eca:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    6ecc:	691b      	ldr	r3, [r3, #16]
    6ece:	4798      	blx	r3
	return ret;
    6ed0:	e7f7      	b.n	6ec2 <gpio_pin_set_raw+0x10>

00006ed2 <gpio_pin_set>:
{
    6ed2:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
    6ed4:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    6ed6:	681c      	ldr	r4, [r3, #0]
    6ed8:	2301      	movs	r3, #1
    6eda:	408b      	lsls	r3, r1
    6edc:	421c      	tst	r4, r3
    6ede:	d002      	beq.n	6ee6 <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
    6ee0:	fab2 f282 	clz	r2, r2
    6ee4:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
    6ee6:	f7ff ffe4 	bl	6eb2 <gpio_pin_set_raw>
}
    6eea:	bd10      	pop	{r4, pc}

00006eec <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
    6eec:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
    6eee:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    6ef0:	69db      	ldr	r3, [r3, #28]
    6ef2:	b113      	cbz	r3, 6efa <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    6ef4:	2201      	movs	r2, #1
    6ef6:	4798      	blx	r3
}
    6ef8:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
    6efa:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6efe:	e7fb      	b.n	6ef8 <gpio_add_callback+0xc>

00006f00 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
    6f00:	b508      	push	{r3, lr}
	return dk_set_led(led_idx, 1);
    6f02:	2101      	movs	r1, #1
    6f04:	f7fc f8de 	bl	30c4 <dk_set_led>
}
    6f08:	bd08      	pop	{r3, pc}

00006f0a <dk_set_led_off>:

int dk_set_led_off(uint8_t led_idx)
{
    6f0a:	b508      	push	{r3, lr}
	return dk_set_led(led_idx, 0);
    6f0c:	2100      	movs	r1, #0
    6f0e:	f7fc f8d9 	bl	30c4 <dk_set_led>
}
    6f12:	bd08      	pop	{r3, pc}

00006f14 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6f14:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    6f16:	2000      	movs	r0, #0
    6f18:	f7ff f92a 	bl	6170 <sys_arch_reboot>

00006f1c <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    6f1c:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6f1e:	f7fe fa03 	bl	5328 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    6f22:	bd08      	pop	{r3, pc}

00006f24 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    6f24:	b510      	push	{r4, lr}
    6f26:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6f28:	f7fa f9c6 	bl	12b8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6f2c:	f7fa fad8 	bl	14e0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    6f30:	4620      	mov	r0, r4
    6f32:	f7ff fff3 	bl	6f1c <hw_cc3xx_init_internal>
	return res;
}
    6f36:	bd10      	pop	{r4, pc}

00006f38 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6f38:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6f3c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6f40:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6f44:	2a07      	cmp	r2, #7
    6f46:	d001      	beq.n	6f4c <nrf53_errata_42+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6f48:	2000      	movs	r0, #0
    6f4a:	4770      	bx	lr
                    switch(var2)
    6f4c:	3b02      	subs	r3, #2
    6f4e:	2b00      	cmp	r3, #0
    6f50:	d804      	bhi.n	6f5c <nrf53_errata_42+0x24>
    6f52:	e8df f003 	tbb	[pc, r3]
    6f56:	01          	.byte	0x01
    6f57:	00          	.byte	0x00
    6f58:	2001      	movs	r0, #1
    6f5a:	4770      	bx	lr
                            return false;
    6f5c:	2000      	movs	r0, #0
    #endif
}
    6f5e:	4770      	bx	lr

00006f60 <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6f60:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6f64:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6f68:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6f6c:	2a07      	cmp	r2, #7
    6f6e:	d001      	beq.n	6f74 <nrf53_errata_46+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6f70:	2000      	movs	r0, #0
    6f72:	4770      	bx	lr
                    switch(var2)
    6f74:	2b04      	cmp	r3, #4
    6f76:	d007      	beq.n	6f88 <nrf53_errata_46+0x28>
    6f78:	d808      	bhi.n	6f8c <nrf53_errata_46+0x2c>
    6f7a:	3b02      	subs	r3, #2
    6f7c:	2b01      	cmp	r3, #1
    6f7e:	d801      	bhi.n	6f84 <nrf53_errata_46+0x24>
    6f80:	2001      	movs	r0, #1
    #endif
}
    6f82:	4770      	bx	lr
                            return false;
    6f84:	2000      	movs	r0, #0
    6f86:	4770      	bx	lr
                            return false;
    6f88:	2000      	movs	r0, #0
    6f8a:	4770      	bx	lr
                            return false;
    6f8c:	2000      	movs	r0, #0
    6f8e:	4770      	bx	lr

00006f90 <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6f90:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6f94:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6f98:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6f9c:	2a07      	cmp	r2, #7
    6f9e:	d001      	beq.n	6fa4 <nrf53_errata_49+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6fa0:	2000      	movs	r0, #0
    6fa2:	4770      	bx	lr
                    switch(var2)
    6fa4:	3b02      	subs	r3, #2
    6fa6:	2b00      	cmp	r3, #0
    6fa8:	d804      	bhi.n	6fb4 <nrf53_errata_49+0x24>
    6faa:	e8df f003 	tbb	[pc, r3]
    6fae:	01          	.byte	0x01
    6faf:	00          	.byte	0x00
    6fb0:	2001      	movs	r0, #1
    6fb2:	4770      	bx	lr
                            return false;
    6fb4:	2000      	movs	r0, #0
    #endif
}
    6fb6:	4770      	bx	lr

00006fb8 <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6fb8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6fbc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6fc0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6fc4:	2a07      	cmp	r2, #7
    6fc6:	d001      	beq.n	6fcc <nrf53_errata_55+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    6fc8:	2000      	movs	r0, #0
    6fca:	4770      	bx	lr
                            return true;
    6fcc:	2001      	movs	r0, #1
    #endif
}
    6fce:	4770      	bx	lr

00006fd0 <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6fd0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6fd4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6fd8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6fdc:	2a07      	cmp	r2, #7
    6fde:	d001      	beq.n	6fe4 <nrf53_errata_64+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6fe0:	2000      	movs	r0, #0
    6fe2:	4770      	bx	lr
                    switch(var2)
    6fe4:	3b02      	subs	r3, #2
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d804      	bhi.n	6ff4 <nrf53_errata_64+0x24>
    6fea:	e8df f003 	tbb	[pc, r3]
    6fee:	01          	.byte	0x01
    6fef:	00          	.byte	0x00
    6ff0:	2001      	movs	r0, #1
    6ff2:	4770      	bx	lr
                            return false;
    6ff4:	2000      	movs	r0, #0
    #endif
}
    6ff6:	4770      	bx	lr

00006ff8 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6ff8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6ffc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    7000:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    7004:	2a07      	cmp	r2, #7
    7006:	d001      	beq.n	700c <nrf53_errata_69+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    7008:	2000      	movs	r0, #0
    700a:	4770      	bx	lr
                    switch(var2)
    700c:	3b02      	subs	r3, #2
    700e:	2b00      	cmp	r3, #0
    7010:	d804      	bhi.n	701c <nrf53_errata_69+0x24>
    7012:	e8df f003 	tbb	[pc, r3]
    7016:	01          	.byte	0x01
    7017:	00          	.byte	0x00
    7018:	2001      	movs	r0, #1
    701a:	4770      	bx	lr
                            return false;
    701c:	2000      	movs	r0, #0
    #endif
}
    701e:	4770      	bx	lr

00007020 <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    7020:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7024:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    7028:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    702c:	2a07      	cmp	r2, #7
    702e:	d001      	beq.n	7034 <nrf53_errata_97+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    7030:	2000      	movs	r0, #0
    7032:	4770      	bx	lr
                    switch(var2)
    7034:	3b02      	subs	r3, #2
    7036:	2b00      	cmp	r3, #0
    7038:	d804      	bhi.n	7044 <nrf53_errata_97+0x24>
    703a:	e8df f003 	tbb	[pc, r3]
    703e:	01          	.byte	0x01
    703f:	00          	.byte	0x00
    7040:	2001      	movs	r0, #1
    7042:	4770      	bx	lr
                            return false;
    7044:	2000      	movs	r0, #0
    #endif
}
    7046:	4770      	bx	lr

00007048 <nrf53_errata_140>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    7048:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    704c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    7050:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    7054:	2a07      	cmp	r2, #7
    7056:	d001      	beq.n	705c <nrf53_errata_140+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    7058:	2000      	movs	r0, #0
    705a:	4770      	bx	lr
                            return true;
    705c:	2001      	movs	r0, #1
    #endif
}
    705e:	4770      	bx	lr

00007060 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    7060:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    7062:	4780      	blx	r0
}
    7064:	bd08      	pop	{r3, pc}

00007066 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    7066:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    7068:	f000 fd12 	bl	7a90 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    706c:	bd08      	pop	{r3, pc}

0000706e <nrf_clock_is_running>:
    switch (domain)
    706e:	2903      	cmp	r1, #3
    7070:	d82f      	bhi.n	70d2 <nrf_clock_is_running+0x64>
    7072:	e8df f001 	tbb	[pc, r1]
    7076:	0f02      	.short	0x0f02
    7078:	291c      	.short	0x291c
            if (p_clk_src != NULL)
    707a:	b122      	cbz	r2, 7086 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    707c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    7080:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    7084:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7086:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    708a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    708e:	d122      	bne.n	70d6 <nrf_clock_is_running+0x68>
    return false;
    7090:	2000      	movs	r0, #0
    7092:	4770      	bx	lr
            if (p_clk_src != NULL)
    7094:	b122      	cbz	r2, 70a0 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7096:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    709a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    709e:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    70a0:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    70a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    70a8:	d117      	bne.n	70da <nrf_clock_is_running+0x6c>
    return false;
    70aa:	2000      	movs	r0, #0
    70ac:	4770      	bx	lr
            if (p_clk_src != NULL)
    70ae:	b122      	cbz	r2, 70ba <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    70b0:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    70b4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    70b8:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    70ba:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    70be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    70c2:	d10c      	bne.n	70de <nrf_clock_is_running+0x70>
    return false;
    70c4:	2000      	movs	r0, #0
    70c6:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    70c8:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    70cc:	f3c0 4000 	ubfx	r0, r0, #16, #1
    70d0:	4770      	bx	lr
    switch (domain)
    70d2:	2000      	movs	r0, #0
    70d4:	4770      	bx	lr
                return true;
    70d6:	2001      	movs	r0, #1
    70d8:	4770      	bx	lr
                return true;
    70da:	2001      	movs	r0, #1
    70dc:	4770      	bx	lr
                return true;
    70de:	2001      	movs	r0, #1
}
    70e0:	4770      	bx	lr

000070e2 <clock_initial_lfclksrc_get>:
}
    70e2:	2001      	movs	r0, #1
    70e4:	4770      	bx	lr

000070e6 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    70e6:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    70e8:	2005      	movs	r0, #5
    70ea:	f7fa fa5b 	bl	15a4 <arch_irq_is_enabled>
    70ee:	b100      	cbz	r0, 70f2 <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    70f0:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    70f2:	2005      	movs	r0, #5
    70f4:	f7fe fff8 	bl	60e8 <arch_irq_enable>
}
    70f8:	e7fa      	b.n	70f0 <nrfx_power_clock_irq_init+0xa>

000070fa <clock_stop>:
{
    70fa:	b570      	push	{r4, r5, r6, lr}
    70fc:	b082      	sub	sp, #8
    70fe:	4606      	mov	r6, r0
    switch (domain)
    7100:	2803      	cmp	r0, #3
    7102:	d855      	bhi.n	71b0 <clock_stop+0xb6>
    7104:	e8df f000 	tbb	[pc, r0]
    7108:	31231702 	.word	0x31231702
    p_reg->INTENCLR = mask;
    710c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7110:	2202      	movs	r2, #2
    7112:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7116:	2200      	movs	r2, #0
    7118:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    711c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7120:	2201      	movs	r2, #1
    7122:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    7124:	2301      	movs	r3, #1
    7126:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    712a:	429e      	cmp	r6, r3
    712c:	d02b      	beq.n	7186 <clock_stop+0x8c>
    712e:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    7130:	f242 7410 	movw	r4, #10000	; 0x2710
    7134:	e02f      	b.n	7196 <clock_stop+0x9c>
    p_reg->INTENCLR = mask;
    7136:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    713a:	2201      	movs	r2, #1
    713c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7140:	2100      	movs	r1, #0
    7142:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    7146:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    714a:	605a      	str	r2, [r3, #4]
}
    714c:	e7ea      	b.n	7124 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    714e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7152:	f44f 7200 	mov.w	r2, #512	; 0x200
    7156:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    715a:	2200      	movs	r2, #0
    715c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    7160:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7164:	2201      	movs	r2, #1
    7166:	625a      	str	r2, [r3, #36]	; 0x24
}
    7168:	e7dc      	b.n	7124 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    716a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    716e:	f44f 7280 	mov.w	r2, #256	; 0x100
    7172:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7176:	2200      	movs	r2, #0
    7178:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    717c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7180:	2201      	movs	r2, #1
    7182:	61da      	str	r2, [r3, #28]
}
    7184:	e7ce      	b.n	7124 <clock_stop+0x2a>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    7186:	f10d 0507 	add.w	r5, sp, #7
    718a:	e7d1      	b.n	7130 <clock_stop+0x36>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    718c:	2001      	movs	r0, #1
    718e:	f7ff ff6a 	bl	7066 <nrfx_busy_wait>
    7192:	3c01      	subs	r4, #1
    7194:	d00c      	beq.n	71b0 <clock_stop+0xb6>
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    7196:	462a      	mov	r2, r5
    7198:	4631      	mov	r1, r6
    719a:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    719e:	f7ff ff66 	bl	706e <nrf_clock_is_running>
    71a2:	b128      	cbz	r0, 71b0 <clock_stop+0xb6>
    71a4:	2d00      	cmp	r5, #0
    71a6:	d0f1      	beq.n	718c <clock_stop+0x92>
    71a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71ac:	2b01      	cmp	r3, #1
    71ae:	d0ed      	beq.n	718c <clock_stop+0x92>
}
    71b0:	b002      	add	sp, #8
    71b2:	bd70      	pop	{r4, r5, r6, pc}

000071b4 <clock_lfclksrc_tweak>:
{
    71b4:	b538      	push	{r3, r4, r5, lr}
    71b6:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    71b8:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    71ba:	2b02      	cmp	r3, #2
    71bc:	d006      	beq.n	71cc <clock_lfclksrc_tweak+0x18>
    71be:	2b01      	cmp	r3, #1
    71c0:	d000      	beq.n	71c4 <clock_lfclksrc_tweak+0x10>
    71c2:	2300      	movs	r3, #0
    if (!is_correct_clk)
    71c4:	461d      	mov	r5, r3
    71c6:	b11b      	cbz	r3, 71d0 <clock_lfclksrc_tweak+0x1c>
}
    71c8:	4628      	mov	r0, r5
    71ca:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    71cc:	2301      	movs	r3, #1
    71ce:	e7f9      	b.n	71c4 <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    71d0:	2000      	movs	r0, #0
    71d2:	f7ff ff92 	bl	70fa <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    71d6:	f7ff ff84 	bl	70e2 <clock_initial_lfclksrc_get>
    71da:	7020      	strb	r0, [r4, #0]
    71dc:	e7f4      	b.n	71c8 <clock_lfclksrc_tweak+0x14>

000071de <nrfx_clock_enable>:
{
    71de:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    71e0:	f7ff ff81 	bl	70e6 <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    71e4:	f7ff ff7d 	bl	70e2 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    71e8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    71ec:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    71f0:	2201      	movs	r2, #1
    71f2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    71f6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    71fa:	bd08      	pop	{r3, pc}

000071fc <nrfx_clock_start>:
    switch (domain)
    71fc:	2803      	cmp	r0, #3
    71fe:	d871      	bhi.n	72e4 <nrfx_clock_start+0xe8>
    7200:	e8df f000 	tbb	[pc, r0]
    7204:	62544802 	.word	0x62544802
{
    7208:	b500      	push	{lr}
    720a:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    720c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    7210:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    7214:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    7218:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    721c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    7220:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7224:	d11d      	bne.n	7262 <nrfx_clock_start+0x66>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    7226:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    722a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    722e:	f013 0f01 	tst.w	r3, #1
    7232:	d11b      	bne.n	726c <nrfx_clock_start+0x70>
                    lfclksrc = clock_initial_lfclksrc_get();
    7234:	f7ff ff55 	bl	70e2 <clock_initial_lfclksrc_get>
    7238:	f88d 0007 	strb.w	r0, [sp, #7]
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
    723c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
    7240:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7244:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7248:	2200      	movs	r2, #0
    724a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    724e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    7252:	2202      	movs	r2, #2
    7254:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7258:	2201      	movs	r2, #1
    725a:	609a      	str	r2, [r3, #8]
}
    725c:	b003      	add	sp, #12
    725e:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    7262:	f10d 0007 	add.w	r0, sp, #7
    7266:	f7ff ffa5 	bl	71b4 <clock_lfclksrc_tweak>
    726a:	e7e7      	b.n	723c <nrfx_clock_start+0x40>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    726c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7270:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    7274:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    7278:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    727c:	f10d 0007 	add.w	r0, sp, #7
    7280:	f7ff ff98 	bl	71b4 <clock_lfclksrc_tweak>
    7284:	2800      	cmp	r0, #0
    7286:	d0d9      	beq.n	723c <nrfx_clock_start+0x40>
    p_reg->INTENSET = mask;
    7288:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    728c:	2202      	movs	r2, #2
    728e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    7292:	e7e3      	b.n	725c <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7294:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    7298:	2200      	movs	r2, #0
    729a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    729e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    72a2:	2201      	movs	r2, #1
    72a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    72a8:	601a      	str	r2, [r3, #0]
}
    72aa:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    72ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    72b0:	2200      	movs	r2, #0
    72b2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    72b6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    72ba:	f44f 7200 	mov.w	r2, #512	; 0x200
    72be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    72c2:	2201      	movs	r2, #1
    72c4:	621a      	str	r2, [r3, #32]
}
    72c6:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    72c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    72cc:	2200      	movs	r2, #0
    72ce:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    72d2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    72d6:	f44f 7280 	mov.w	r2, #256	; 0x100
    72da:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    72de:	2201      	movs	r2, #1
    72e0:	619a      	str	r2, [r3, #24]
}
    72e2:	4770      	bx	lr
    72e4:	4770      	bx	lr

000072e6 <nrfx_clock_stop>:
{
    72e6:	b508      	push	{r3, lr}
    clock_stop(domain);
    72e8:	f7ff ff07 	bl	70fa <clock_stop>
}
    72ec:	bd08      	pop	{r3, pc}

000072ee <nrf_gpiote_event_configure>:
{
    72ee:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    72f0:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    72f4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    72f8:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    72fc:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    7300:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7304:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    7308:	0212      	lsls	r2, r2, #8
    730a:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    730e:	041b      	lsls	r3, r3, #16
    7310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7314:	431a      	orrs	r2, r3
    7316:	4314      	orrs	r4, r2
    7318:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    731c:	bc10      	pop	{r4}
    731e:	4770      	bx	lr

00007320 <nrf_gpiote_task_configure>:
{
    7320:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    7322:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    7326:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    732a:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    732e:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    7332:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7336:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    733a:	0212      	lsls	r2, r2, #8
    733c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7340:	041b      	lsls	r3, r3, #16
    7342:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7346:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    7348:	f89d 3004 	ldrb.w	r3, [sp, #4]
    734c:	051b      	lsls	r3, r3, #20
    734e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7352:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7354:	4314      	orrs	r4, r2
    7356:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    735a:	bc10      	pop	{r4}
    735c:	4770      	bx	lr

0000735e <nrf_gpio_cfg_sense_set>:
{
    735e:	b500      	push	{lr}
    7360:	b085      	sub	sp, #20
    7362:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7366:	f10d 030f 	add.w	r3, sp, #15
    736a:	9301      	str	r3, [sp, #4]
    736c:	2100      	movs	r1, #0
    736e:	9100      	str	r1, [sp, #0]
    7370:	460b      	mov	r3, r1
    7372:	460a      	mov	r2, r1
    7374:	f7fc f838 	bl	33e8 <nrf_gpio_reconfigure>
}
    7378:	b005      	add	sp, #20
    737a:	f85d fb04 	ldr.w	pc, [sp], #4

0000737e <pin_is_task_output>:
{
    737e:	b510      	push	{r4, lr}
    7380:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    7382:	f7fc f8e3 	bl	354c <pin_is_output>
    7386:	b128      	cbz	r0, 7394 <pin_is_task_output+0x16>
    7388:	4620      	mov	r0, r4
    738a:	f7fc f8c9 	bl	3520 <pin_in_use_by_te>
    738e:	b118      	cbz	r0, 7398 <pin_is_task_output+0x1a>
    7390:	2001      	movs	r0, #1
    7392:	e000      	b.n	7396 <pin_is_task_output+0x18>
    7394:	2000      	movs	r0, #0
}
    7396:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    7398:	2000      	movs	r0, #0
    739a:	e7fc      	b.n	7396 <pin_is_task_output+0x18>

0000739c <pin_is_input>:
{
    739c:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    739e:	f7fc f8d5 	bl	354c <pin_is_output>
    73a2:	f080 0001 	eor.w	r0, r0, #1
}
    73a6:	b2c0      	uxtb	r0, r0
    73a8:	bd08      	pop	{r3, pc}

000073aa <gpiote_polarity_to_trigger>:
}
    73aa:	4770      	bx	lr

000073ac <gpiote_trigger_to_polarity>:
}
    73ac:	4770      	bx	lr

000073ae <is_level>:
}
    73ae:	2803      	cmp	r0, #3
    73b0:	bf94      	ite	ls
    73b2:	2000      	movls	r0, #0
    73b4:	2001      	movhi	r0, #1
    73b6:	4770      	bx	lr

000073b8 <latch_pending_read_and_check>:
{
    73b8:	b510      	push	{r4, lr}
    73ba:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    73bc:	4602      	mov	r2, r0
    73be:	2102      	movs	r1, #2
    73c0:	2000      	movs	r0, #0
    73c2:	f7fc f883 	bl	34cc <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    73c6:	2300      	movs	r3, #0
    73c8:	2b01      	cmp	r3, #1
    73ca:	d804      	bhi.n	73d6 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    73cc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    73d0:	b91a      	cbnz	r2, 73da <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    73d2:	3301      	adds	r3, #1
    73d4:	e7f8      	b.n	73c8 <latch_pending_read_and_check+0x10>
    return false;
    73d6:	2000      	movs	r0, #0
}
    73d8:	bd10      	pop	{r4, pc}
            return true;
    73da:	2001      	movs	r0, #1
    73dc:	e7fc      	b.n	73d8 <latch_pending_read_and_check+0x20>

000073de <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    73de:	b160      	cbz	r0, 73fa <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    73e0:	68c3      	ldr	r3, [r0, #12]
    73e2:	785a      	ldrb	r2, [r3, #1]
    73e4:	f012 0f01 	tst.w	r2, #1
    73e8:	d003      	beq.n	73f2 <z_device_is_ready+0x14>
    73ea:	781b      	ldrb	r3, [r3, #0]
    73ec:	b11b      	cbz	r3, 73f6 <z_device_is_ready+0x18>
    73ee:	2000      	movs	r0, #0
    73f0:	4770      	bx	lr
    73f2:	2000      	movs	r0, #0
    73f4:	4770      	bx	lr
    73f6:	2001      	movs	r0, #1
    73f8:	4770      	bx	lr
		return false;
    73fa:	2000      	movs	r0, #0
}
    73fc:	4770      	bx	lr

000073fe <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    73fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7400:	4605      	mov	r5, r0
    7402:	460e      	mov	r6, r1
	__asm__ volatile(
    7404:	f04f 0320 	mov.w	r3, #32
    7408:	f3ef 8711 	mrs	r7, BASEPRI
    740c:	f383 8812 	msr	BASEPRI_MAX, r3
    7410:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7414:	f7fd fd94 	bl	4f40 <z_impl_z_current_get>
    7418:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    741a:	4631      	mov	r1, r6
    741c:	4628      	mov	r0, r5
    741e:	f7ff fd79 	bl	6f14 <k_sys_fatal_error_handler>
	__asm__ volatile(
    7422:	f387 8811 	msr	BASEPRI, r7
    7426:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    742a:	4620      	mov	r0, r4
    742c:	f7fa fb78 	bl	1b20 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007432 <z_early_memset>:
{
    7432:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    7434:	f7fe ff6e 	bl	6314 <memset>
}
    7438:	bd08      	pop	{r3, pc}

0000743a <z_early_memcpy>:
{
    743a:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    743c:	f7fe ff3b 	bl	62b6 <memcpy>
}
    7440:	bd08      	pop	{r3, pc}

00007442 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7442:	68c2      	ldr	r2, [r0, #12]
    7444:	6903      	ldr	r3, [r0, #16]
    7446:	431a      	orrs	r2, r3
    7448:	f012 0203 	ands.w	r2, r2, #3
    744c:	d10d      	bne.n	746a <create_free_list+0x28>
	slab->free_list = NULL;
    744e:	2100      	movs	r1, #0
    7450:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7452:	e005      	b.n	7460 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    7454:	6941      	ldr	r1, [r0, #20]
    7456:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    7458:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    745a:	68c1      	ldr	r1, [r0, #12]
    745c:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    745e:	3201      	adds	r2, #1
    7460:	6881      	ldr	r1, [r0, #8]
    7462:	4291      	cmp	r1, r2
    7464:	d8f6      	bhi.n	7454 <create_free_list+0x12>
	return 0;
    7466:	2000      	movs	r0, #0
    7468:	4770      	bx	lr
		return -EINVAL;
    746a:	f06f 0015 	mvn.w	r0, #21
}
    746e:	4770      	bx	lr

00007470 <k_mem_slab_init>:
{
    7470:	b510      	push	{r4, lr}
    7472:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    7474:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    7476:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    7478:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    747a:	2300      	movs	r3, #0
    747c:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    747e:	f7ff ffe0 	bl	7442 <create_free_list>
	if (rc < 0) {
    7482:	2800      	cmp	r0, #0
    7484:	db01      	blt.n	748a <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    7486:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    7488:	6064      	str	r4, [r4, #4]
}
    748a:	bd10      	pop	{r4, pc}

0000748c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    748c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7490:	4604      	mov	r4, r0
    7492:	460d      	mov	r5, r1
	__asm__ volatile(
    7494:	f04f 0320 	mov.w	r3, #32
    7498:	f3ef 8611 	mrs	r6, BASEPRI
    749c:	f383 8812 	msr	BASEPRI_MAX, r3
    74a0:	f3bf 8f6f 	isb	sy
    74a4:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    74a6:	6943      	ldr	r3, [r0, #20]
    74a8:	b16b      	cbz	r3, 74c6 <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    74aa:	682b      	ldr	r3, [r5, #0]
    74ac:	6962      	ldr	r2, [r4, #20]
    74ae:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    74b0:	682b      	ldr	r3, [r5, #0]
    74b2:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    74b4:	69a3      	ldr	r3, [r4, #24]
    74b6:	3b01      	subs	r3, #1
    74b8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    74ba:	f387 8811 	msr	BASEPRI, r7
    74be:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    74c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74c6:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    74ca:	f000 fa12 	bl	78f2 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    74ce:	2800      	cmp	r0, #0
    74d0:	d0eb      	beq.n	74aa <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    74d2:	682a      	ldr	r2, [r5, #0]
    74d4:	2100      	movs	r1, #0
    74d6:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    74da:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    74dc:	f000 f972 	bl	77c4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    74e0:	4631      	mov	r1, r6
    74e2:	4640      	mov	r0, r8
    74e4:	f7fd f9fa 	bl	48dc <z_reschedule>
			return;
    74e8:	e7eb      	b.n	74c2 <k_mem_slab_free+0x36>

000074ea <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    74ea:	3207      	adds	r2, #7
    74ec:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    74f0:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    74f4:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    74f8:	2300      	movs	r3, #0
    74fa:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    74fe:	1888      	adds	r0, r1, r2
    7500:	4770      	bx	lr

00007502 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7502:	f3ef 8005 	mrs	r0, IPSR
}
    7506:	3800      	subs	r0, #0
    7508:	bf18      	it	ne
    750a:	2001      	movne	r0, #1
    750c:	4770      	bx	lr

0000750e <z_impl_k_thread_start>:
{
    750e:	b508      	push	{r3, lr}
	z_sched_start(thread);
    7510:	f7fd fb0e 	bl	4b30 <z_sched_start>
}
    7514:	bd08      	pop	{r3, pc}

00007516 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    7516:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    7518:	2400      	movs	r4, #0
    751a:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    751c:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    751e:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    7520:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    7522:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    7524:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    7526:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    7528:	bc10      	pop	{r4}
    752a:	4770      	bx	lr

0000752c <z_impl_k_thread_create>:
{
    752c:	b5f0      	push	{r4, r5, r6, r7, lr}
    752e:	b087      	sub	sp, #28
    7530:	4604      	mov	r4, r0
    7532:	9e12      	ldr	r6, [sp, #72]	; 0x48
    7534:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7536:	2700      	movs	r7, #0
    7538:	9705      	str	r7, [sp, #20]
    753a:	9f10      	ldr	r7, [sp, #64]	; 0x40
    753c:	9704      	str	r7, [sp, #16]
    753e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    7540:	9703      	str	r7, [sp, #12]
    7542:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    7544:	9702      	str	r7, [sp, #8]
    7546:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    7548:	9701      	str	r7, [sp, #4]
    754a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    754c:	9700      	str	r7, [sp, #0]
    754e:	f7fc fd67 	bl	4020 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7552:	f1b5 3fff 	cmp.w	r5, #4294967295
    7556:	bf08      	it	eq
    7558:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    755c:	d102      	bne.n	7564 <z_impl_k_thread_create+0x38>
}
    755e:	4620      	mov	r0, r4
    7560:	b007      	add	sp, #28
    7562:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    7564:	4632      	mov	r2, r6
    7566:	462b      	mov	r3, r5
    7568:	4620      	mov	r0, r4
    756a:	f7fc fd4b 	bl	4004 <schedule_new_thread>
    756e:	e7f6      	b.n	755e <z_impl_k_thread_create+0x32>

00007570 <z_pm_save_idle_exit>:
{
    7570:	b508      	push	{r3, lr}
	pm_system_resume();
    7572:	f7f9 fda7 	bl	10c4 <pm_system_resume>
	sys_clock_idle_exit();
    7576:	f7ff fbd4 	bl	6d22 <sys_clock_idle_exit>
}
    757a:	bd08      	pop	{r3, pc}

0000757c <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    757c:	4288      	cmp	r0, r1
    757e:	da00      	bge.n	7582 <new_prio_for_inheritance+0x6>
    7580:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    7582:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    7586:	db01      	blt.n	758c <new_prio_for_inheritance+0x10>
    7588:	4608      	mov	r0, r1
    758a:	4770      	bx	lr
    758c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    7590:	4770      	bx	lr

00007592 <adjust_owner_prio>:
{
    7592:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    7594:	6880      	ldr	r0, [r0, #8]
    7596:	f990 300e 	ldrsb.w	r3, [r0, #14]
    759a:	428b      	cmp	r3, r1
    759c:	d101      	bne.n	75a2 <adjust_owner_prio+0x10>
	return false;
    759e:	2000      	movs	r0, #0
}
    75a0:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    75a2:	f7fd fb1b 	bl	4bdc <z_set_prio>
    75a6:	e7fb      	b.n	75a0 <adjust_owner_prio+0xe>

000075a8 <z_impl_k_mutex_init>:
{
    75a8:	4603      	mov	r3, r0
	mutex->owner = NULL;
    75aa:	2000      	movs	r0, #0
    75ac:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    75ae:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    75b0:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    75b2:	605b      	str	r3, [r3, #4]
}
    75b4:	4770      	bx	lr

000075b6 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
    75b6:	460b      	mov	r3, r1
    75b8:	b139      	cbz	r1, 75ca <sys_slist_remove+0x14>
	return node->next;
    75ba:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    75bc:	6019      	str	r1, [r3, #0]
	return list->tail;
    75be:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    75c0:	428a      	cmp	r2, r1
    75c2:	d009      	beq.n	75d8 <sys_slist_remove+0x22>
	parent->next = child;
    75c4:	2300      	movs	r3, #0
    75c6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    75c8:	4770      	bx	lr
	return node->next;
    75ca:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    75cc:	6003      	str	r3, [r0, #0]
	return list->tail;
    75ce:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    75d0:	428a      	cmp	r2, r1
    75d2:	d1f7      	bne.n	75c4 <sys_slist_remove+0xe>
	list->tail = node;
    75d4:	6043      	str	r3, [r0, #4]
}
    75d6:	e7f5      	b.n	75c4 <sys_slist_remove+0xe>
	list->tail = node;
    75d8:	6043      	str	r3, [r0, #4]
}
    75da:	e7f3      	b.n	75c4 <sys_slist_remove+0xe>

000075dc <notify_queue_locked>:
	if (queue != NULL) {
    75dc:	b130      	cbz	r0, 75ec <notify_queue_locked+0x10>
{
    75de:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    75e0:	2200      	movs	r2, #0
    75e2:	4611      	mov	r1, r2
    75e4:	30b8      	adds	r0, #184	; 0xb8
    75e6:	f000 f9aa 	bl	793e <z_sched_wake>
}
    75ea:	bd08      	pop	{r3, pc}
	bool rv = false;
    75ec:	2000      	movs	r0, #0
}
    75ee:	4770      	bx	lr

000075f0 <submit_to_queue_locked>:
{
    75f0:	b570      	push	{r4, r5, r6, lr}
    75f2:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    75f4:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    75f6:	f013 0f02 	tst.w	r3, #2
    75fa:	d122      	bne.n	7642 <submit_to_queue_locked+0x52>
    75fc:	4604      	mov	r4, r0
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    75fe:	f013 0f04 	tst.w	r3, #4
    7602:	d123      	bne.n	764c <submit_to_queue_locked+0x5c>
		if (*queuep == NULL) {
    7604:	680b      	ldr	r3, [r1, #0]
    7606:	b1ab      	cbz	r3, 7634 <submit_to_queue_locked+0x44>
	return (*flagp & BIT(bit)) != 0U;
    7608:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    760a:	f013 0f01 	tst.w	r3, #1
    760e:	d014      	beq.n	763a <submit_to_queue_locked+0x4a>
			*queuep = work->queue;
    7610:	68a3      	ldr	r3, [r4, #8]
    7612:	602b      	str	r3, [r5, #0]
			ret = 2;
    7614:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
    7616:	4621      	mov	r1, r4
    7618:	6828      	ldr	r0, [r5, #0]
    761a:	f7fc ff95 	bl	4548 <queue_submit_locked>
		if (rc < 0) {
    761e:	2800      	cmp	r0, #0
    7620:	db11      	blt.n	7646 <submit_to_queue_locked+0x56>
	*flagp |= BIT(bit);
    7622:	68e3      	ldr	r3, [r4, #12]
    7624:	f043 0304 	orr.w	r3, r3, #4
    7628:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    762a:	682b      	ldr	r3, [r5, #0]
    762c:	60a3      	str	r3, [r4, #8]
	if (ret <= 0) {
    762e:	b136      	cbz	r6, 763e <submit_to_queue_locked+0x4e>
    7630:	4630      	mov	r0, r6
	return ret;
    7632:	e00a      	b.n	764a <submit_to_queue_locked+0x5a>
			*queuep = work->queue;
    7634:	6883      	ldr	r3, [r0, #8]
    7636:	600b      	str	r3, [r1, #0]
    7638:	e7e6      	b.n	7608 <submit_to_queue_locked+0x18>
		ret = 1;
    763a:	2601      	movs	r6, #1
    763c:	e7eb      	b.n	7616 <submit_to_queue_locked+0x26>
    763e:	4630      	mov	r0, r6
    7640:	e001      	b.n	7646 <submit_to_queue_locked+0x56>
		ret = -EBUSY;
    7642:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    7646:	2300      	movs	r3, #0
    7648:	602b      	str	r3, [r5, #0]
}
    764a:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
    764c:	2000      	movs	r0, #0
    764e:	e7fa      	b.n	7646 <submit_to_queue_locked+0x56>

00007650 <work_timeout>:
{
    7650:	b510      	push	{r4, lr}
    7652:	b082      	sub	sp, #8
    7654:	4603      	mov	r3, r0
	__asm__ volatile(
    7656:	f04f 0220 	mov.w	r2, #32
    765a:	f3ef 8411 	mrs	r4, BASEPRI
    765e:	f382 8812 	msr	BASEPRI_MAX, r2
    7662:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    7666:	2200      	movs	r2, #0
    7668:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
    766a:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
    766e:	f022 0108 	bic.w	r1, r2, #8
    7672:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    7676:	f012 0f08 	tst.w	r2, #8
    767a:	d105      	bne.n	7688 <work_timeout+0x38>
	__asm__ volatile(
    767c:	f384 8811 	msr	BASEPRI, r4
    7680:	f3bf 8f6f 	isb	sy
}
    7684:	b002      	add	sp, #8
    7686:	bd10      	pop	{r4, pc}
    7688:	3810      	subs	r0, #16
		queue = dw->queue;
    768a:	699b      	ldr	r3, [r3, #24]
    768c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    768e:	a901      	add	r1, sp, #4
    7690:	f7ff ffae 	bl	75f0 <submit_to_queue_locked>
    7694:	e7f2      	b.n	767c <work_timeout+0x2c>

00007696 <unschedule_locked>:
{
    7696:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
    7698:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
    769a:	f023 0208 	bic.w	r2, r3, #8
    769e:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
    76a0:	f013 0f08 	tst.w	r3, #8
    76a4:	d101      	bne.n	76aa <unschedule_locked+0x14>
	bool ret = false;
    76a6:	2000      	movs	r0, #0
}
    76a8:	bd08      	pop	{r3, pc}
		z_abort_timeout(&dwork->timeout);
    76aa:	3010      	adds	r0, #16
    76ac:	f000 f98c 	bl	79c8 <z_abort_timeout>
		ret = true;
    76b0:	2001      	movs	r0, #1
    76b2:	e7f9      	b.n	76a8 <unschedule_locked+0x12>

000076b4 <k_work_init_delayable>:
{
    76b4:	b538      	push	{r3, r4, r5, lr}
    76b6:	4604      	mov	r4, r0
    76b8:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    76ba:	2230      	movs	r2, #48	; 0x30
    76bc:	2100      	movs	r1, #0
    76be:	f7fe fe29 	bl	6314 <memset>
    76c2:	6065      	str	r5, [r4, #4]
    76c4:	f44f 7380 	mov.w	r3, #256	; 0x100
    76c8:	60e3      	str	r3, [r4, #12]
}
    76ca:	bd38      	pop	{r3, r4, r5, pc}

000076cc <k_work_schedule_for_queue>:
{
    76cc:	b510      	push	{r4, lr}
    76ce:	b082      	sub	sp, #8
    76d0:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
    76d2:	f04f 0020 	mov.w	r0, #32
    76d6:	f3ef 8411 	mrs	r4, BASEPRI
    76da:	f380 8812 	msr	BASEPRI_MAX, r0
    76de:	f3bf 8f6f 	isb	sy
	return *flagp;
    76e2:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    76e4:	f010 0f0e 	tst.w	r0, #14
    76e8:	d006      	beq.n	76f8 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
    76ea:	2000      	movs	r0, #0
	__asm__ volatile(
    76ec:	f384 8811 	msr	BASEPRI, r4
    76f0:	f3bf 8f6f 	isb	sy
}
    76f4:	b002      	add	sp, #8
    76f6:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
    76f8:	a801      	add	r0, sp, #4
    76fa:	f7fd f80b 	bl	4714 <schedule_for_queue_locked>
    76fe:	e7f5      	b.n	76ec <k_work_schedule_for_queue+0x20>

00007700 <k_work_reschedule_for_queue>:
{
    7700:	b5f0      	push	{r4, r5, r6, r7, lr}
    7702:	b083      	sub	sp, #12
    7704:	9001      	str	r0, [sp, #4]
    7706:	460c      	mov	r4, r1
    7708:	4616      	mov	r6, r2
    770a:	461d      	mov	r5, r3
	__asm__ volatile(
    770c:	f04f 0320 	mov.w	r3, #32
    7710:	f3ef 8711 	mrs	r7, BASEPRI
    7714:	f383 8812 	msr	BASEPRI_MAX, r3
    7718:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
    771c:	4608      	mov	r0, r1
    771e:	f7ff ffba 	bl	7696 <unschedule_locked>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
    7722:	4632      	mov	r2, r6
    7724:	462b      	mov	r3, r5
    7726:	4621      	mov	r1, r4
    7728:	a801      	add	r0, sp, #4
    772a:	f7fc fff3 	bl	4714 <schedule_for_queue_locked>
	__asm__ volatile(
    772e:	f387 8811 	msr	BASEPRI, r7
    7732:	f3bf 8f6f 	isb	sy
}
    7736:	b003      	add	sp, #12
    7738:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000773a <thread_active_elsewhere>:
}
    773a:	2000      	movs	r0, #0
    773c:	4770      	bx	lr

0000773e <pended_on_thread>:
}
    773e:	6880      	ldr	r0, [r0, #8]
    7740:	4770      	bx	lr

00007742 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    7742:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    7746:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    774a:	4283      	cmp	r3, r0
    774c:	d001      	beq.n	7752 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    774e:	1ac0      	subs	r0, r0, r3
    7750:	4770      	bx	lr
	return 0;
    7752:	2000      	movs	r0, #0
}
    7754:	4770      	bx	lr

00007756 <z_reschedule_irqlock>:
{
    7756:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7758:	4603      	mov	r3, r0
    775a:	b928      	cbnz	r0, 7768 <z_reschedule_irqlock+0x12>
    775c:	f3ef 8205 	mrs	r2, IPSR
    7760:	b912      	cbnz	r2, 7768 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    7762:	f7f9 ff4d 	bl	1600 <arch_swap>
	return ret;
    7766:	e003      	b.n	7770 <z_reschedule_irqlock+0x1a>
    7768:	f383 8811 	msr	BASEPRI, r3
    776c:	f3bf 8f6f 	isb	sy
}
    7770:	bd08      	pop	{r3, pc}

00007772 <z_reschedule_unlocked>:
{
    7772:	b508      	push	{r3, lr}
	__asm__ volatile(
    7774:	f04f 0320 	mov.w	r3, #32
    7778:	f3ef 8011 	mrs	r0, BASEPRI
    777c:	f383 8812 	msr	BASEPRI_MAX, r3
    7780:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7784:	f7ff ffe7 	bl	7756 <z_reschedule_irqlock>
}
    7788:	bd08      	pop	{r3, pc}

0000778a <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    778a:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    778c:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    778e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7790:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7792:	2300      	movs	r3, #0
    7794:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    7796:	604b      	str	r3, [r1, #4]
}
    7798:	4770      	bx	lr

0000779a <unpend_thread_no_timeout>:
{
    779a:	b510      	push	{r4, lr}
    779c:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    779e:	f7ff ffce 	bl	773e <pended_on_thread>
    77a2:	4621      	mov	r1, r4
    77a4:	f7ff fff1 	bl	778a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    77a8:	7b63      	ldrb	r3, [r4, #13]
    77aa:	f023 0302 	bic.w	r3, r3, #2
    77ae:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    77b0:	2300      	movs	r3, #0
    77b2:	60a3      	str	r3, [r4, #8]
}
    77b4:	bd10      	pop	{r4, pc}

000077b6 <z_priq_dumb_best>:
{
    77b6:	4603      	mov	r3, r0
	return list->head == list;
    77b8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    77ba:	4283      	cmp	r3, r0
    77bc:	d000      	beq.n	77c0 <z_priq_dumb_best+0xa>
}
    77be:	4770      	bx	lr
	struct k_thread *thread = NULL;
    77c0:	2000      	movs	r0, #0
	return thread;
    77c2:	e7fc      	b.n	77be <z_priq_dumb_best+0x8>

000077c4 <z_ready_thread>:
{
    77c4:	b538      	push	{r3, r4, r5, lr}
    77c6:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    77c8:	2300      	movs	r3, #0
    77ca:	f04f 0220 	mov.w	r2, #32
    77ce:	f3ef 8511 	mrs	r5, BASEPRI
    77d2:	f382 8812 	msr	BASEPRI_MAX, r2
    77d6:	f3bf 8f6f 	isb	sy
    77da:	e004      	b.n	77e6 <z_ready_thread+0x22>
	__asm__ volatile(
    77dc:	f385 8811 	msr	BASEPRI, r5
    77e0:	f3bf 8f6f 	isb	sy
    77e4:	2301      	movs	r3, #1
    77e6:	b943      	cbnz	r3, 77fa <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    77e8:	4620      	mov	r0, r4
    77ea:	f7ff ffa6 	bl	773a <thread_active_elsewhere>
    77ee:	2800      	cmp	r0, #0
    77f0:	d1f4      	bne.n	77dc <z_ready_thread+0x18>
			ready_thread(thread);
    77f2:	4620      	mov	r0, r4
    77f4:	f7fd f960 	bl	4ab8 <ready_thread>
    77f8:	e7f0      	b.n	77dc <z_ready_thread+0x18>
}
    77fa:	bd38      	pop	{r3, r4, r5, pc}

000077fc <z_thread_timeout>:
{
    77fc:	b570      	push	{r4, r5, r6, lr}
    77fe:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    7800:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    7804:	2300      	movs	r3, #0
	__asm__ volatile(
    7806:	f04f 0220 	mov.w	r2, #32
    780a:	f3ef 8511 	mrs	r5, BASEPRI
    780e:	f382 8812 	msr	BASEPRI_MAX, r2
    7812:	f3bf 8f6f 	isb	sy
    7816:	e011      	b.n	783c <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7818:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    781c:	f023 0204 	bic.w	r2, r3, #4
    7820:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7824:	f023 0314 	bic.w	r3, r3, #20
    7828:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    782c:	4630      	mov	r0, r6
    782e:	f7fd f943 	bl	4ab8 <ready_thread>
	__asm__ volatile(
    7832:	f385 8811 	msr	BASEPRI, r5
    7836:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    783a:	2301      	movs	r3, #1
    783c:	b963      	cbnz	r3, 7858 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    783e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    7842:	f013 0f28 	tst.w	r3, #40	; 0x28
    7846:	d1f4      	bne.n	7832 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    7848:	f854 3c10 	ldr.w	r3, [r4, #-16]
    784c:	2b00      	cmp	r3, #0
    784e:	d0e3      	beq.n	7818 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
    7850:	4630      	mov	r0, r6
    7852:	f7ff ffa2 	bl	779a <unpend_thread_no_timeout>
    7856:	e7df      	b.n	7818 <z_thread_timeout+0x1c>
}
    7858:	bd70      	pop	{r4, r5, r6, pc}

0000785a <unpend_all>:
{
    785a:	b538      	push	{r3, r4, r5, lr}
    785c:	4605      	mov	r5, r0
	return list->head == list;
    785e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7860:	42a5      	cmp	r5, r4
    7862:	d00e      	beq.n	7882 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    7864:	b16c      	cbz	r4, 7882 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    7866:	4620      	mov	r0, r4
    7868:	f7ff ff97 	bl	779a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    786c:	f104 0018 	add.w	r0, r4, #24
    7870:	f000 f8aa 	bl	79c8 <z_abort_timeout>
    7874:	2300      	movs	r3, #0
    7876:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    787a:	4620      	mov	r0, r4
    787c:	f7fd f91c 	bl	4ab8 <ready_thread>
    7880:	e7ed      	b.n	785e <unpend_all+0x4>
}
    7882:	bd38      	pop	{r3, r4, r5, pc}

00007884 <add_to_waitq_locked>:
{
    7884:	b570      	push	{r4, r5, r6, lr}
    7886:	4605      	mov	r5, r0
    7888:	460e      	mov	r6, r1
	unready_thread(thread);
    788a:	f7fd f96f 	bl	4b6c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    788e:	7b6b      	ldrb	r3, [r5, #13]
    7890:	f043 0302 	orr.w	r3, r3, #2
    7894:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    7896:	b1fe      	cbz	r6, 78d8 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    7898:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    789a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    789c:	42a6      	cmp	r6, r4
    789e:	d108      	bne.n	78b2 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    78a0:	2400      	movs	r4, #0
    78a2:	e006      	b.n	78b2 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    78a4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    78a6:	606b      	str	r3, [r5, #4]
	node->next = successor;
    78a8:	602c      	str	r4, [r5, #0]
	prev->next = node;
    78aa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    78ac:	6065      	str	r5, [r4, #4]
}
    78ae:	e013      	b.n	78d8 <add_to_waitq_locked+0x54>
    78b0:	2400      	movs	r4, #0
    78b2:	b164      	cbz	r4, 78ce <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    78b4:	4621      	mov	r1, r4
    78b6:	4628      	mov	r0, r5
    78b8:	f7ff ff43 	bl	7742 <z_sched_prio_cmp>
    78bc:	2800      	cmp	r0, #0
    78be:	dcf1      	bgt.n	78a4 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    78c0:	2c00      	cmp	r4, #0
    78c2:	d0f6      	beq.n	78b2 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    78c4:	6873      	ldr	r3, [r6, #4]
    78c6:	429c      	cmp	r4, r3
    78c8:	d0f2      	beq.n	78b0 <add_to_waitq_locked+0x2c>
    78ca:	6824      	ldr	r4, [r4, #0]
    78cc:	e7f1      	b.n	78b2 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    78ce:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    78d0:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    78d2:	606b      	str	r3, [r5, #4]
	tail->next = node;
    78d4:	601d      	str	r5, [r3, #0]
	list->tail = node;
    78d6:	6075      	str	r5, [r6, #4]
}
    78d8:	bd70      	pop	{r4, r5, r6, pc}

000078da <pend_locked>:
{
    78da:	b570      	push	{r4, r5, r6, lr}
    78dc:	4604      	mov	r4, r0
    78de:	4616      	mov	r6, r2
    78e0:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    78e2:	f7ff ffcf 	bl	7884 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    78e6:	4632      	mov	r2, r6
    78e8:	462b      	mov	r3, r5
    78ea:	4620      	mov	r0, r4
    78ec:	f7fc ff98 	bl	4820 <add_thread_timeout>
}
    78f0:	bd70      	pop	{r4, r5, r6, pc}

000078f2 <z_unpend_first_thread>:
{
    78f2:	b570      	push	{r4, r5, r6, lr}
    78f4:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    78f6:	2300      	movs	r3, #0
	__asm__ volatile(
    78f8:	f04f 0220 	mov.w	r2, #32
    78fc:	f3ef 8511 	mrs	r5, BASEPRI
    7900:	f382 8812 	msr	BASEPRI_MAX, r2
    7904:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    7908:	461c      	mov	r4, r3
    790a:	e004      	b.n	7916 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    790c:	f385 8811 	msr	BASEPRI, r5
    7910:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7914:	2301      	movs	r3, #1
    7916:	b963      	cbnz	r3, 7932 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    7918:	4630      	mov	r0, r6
    791a:	f7ff ff4c 	bl	77b6 <z_priq_dumb_best>
		if (thread != NULL) {
    791e:	4604      	mov	r4, r0
    7920:	2800      	cmp	r0, #0
    7922:	d0f3      	beq.n	790c <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    7924:	f7ff ff39 	bl	779a <unpend_thread_no_timeout>
    7928:	f104 0018 	add.w	r0, r4, #24
    792c:	f000 f84c 	bl	79c8 <z_abort_timeout>
    7930:	e7ec      	b.n	790c <z_unpend_first_thread+0x1a>
}
    7932:	4620      	mov	r0, r4
    7934:	bd70      	pop	{r4, r5, r6, pc}

00007936 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    7936:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    7938:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    793a:	6083      	str	r3, [r0, #8]
}
    793c:	4770      	bx	lr

0000793e <z_sched_wake>:
{
    793e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7942:	4606      	mov	r6, r0
    7944:	4688      	mov	r8, r1
    7946:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
    7948:	2300      	movs	r3, #0
	__asm__ volatile(
    794a:	f04f 0220 	mov.w	r2, #32
    794e:	f3ef 8511 	mrs	r5, BASEPRI
    7952:	f382 8812 	msr	BASEPRI_MAX, r2
    7956:	f3bf 8f6f 	isb	sy
	bool ret = false;
    795a:	4699      	mov	r9, r3
    795c:	e004      	b.n	7968 <z_sched_wake+0x2a>
	__asm__ volatile(
    795e:	f385 8811 	msr	BASEPRI, r5
    7962:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7966:	2301      	movs	r3, #1
    7968:	b9a3      	cbnz	r3, 7994 <z_sched_wake+0x56>
		thread = _priq_wait_best(&wait_q->waitq);
    796a:	4630      	mov	r0, r6
    796c:	f7ff ff23 	bl	77b6 <z_priq_dumb_best>
		if (thread != NULL) {
    7970:	4604      	mov	r4, r0
    7972:	2800      	cmp	r0, #0
    7974:	d0f3      	beq.n	795e <z_sched_wake+0x20>
    7976:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
    797a:	6147      	str	r7, [r0, #20]
			unpend_thread_no_timeout(thread);
    797c:	f7ff ff0d 	bl	779a <unpend_thread_no_timeout>
    7980:	f104 0018 	add.w	r0, r4, #24
    7984:	f000 f820 	bl	79c8 <z_abort_timeout>
			ready_thread(thread);
    7988:	4620      	mov	r0, r4
    798a:	f7fd f895 	bl	4ab8 <ready_thread>
			ret = true;
    798e:	f04f 0901 	mov.w	r9, #1
    7992:	e7e4      	b.n	795e <z_sched_wake+0x20>
}
    7994:	4648      	mov	r0, r9
    7996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000799a <remove_timeout>:
{
    799a:	b510      	push	{r4, lr}
    799c:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    799e:	f7fd fb45 	bl	502c <next>
    79a2:	b148      	cbz	r0, 79b8 <remove_timeout+0x1e>
    79a4:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    79a6:	6903      	ldr	r3, [r0, #16]
    79a8:	6941      	ldr	r1, [r0, #20]
    79aa:	6920      	ldr	r0, [r4, #16]
    79ac:	181b      	adds	r3, r3, r0
    79ae:	6960      	ldr	r0, [r4, #20]
    79b0:	eb41 0100 	adc.w	r1, r1, r0
    79b4:	6113      	str	r3, [r2, #16]
    79b6:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    79b8:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    79ba:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    79bc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    79be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    79c0:	2300      	movs	r3, #0
    79c2:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    79c4:	6063      	str	r3, [r4, #4]
}
    79c6:	bd10      	pop	{r4, pc}

000079c8 <z_abort_timeout>:
{
    79c8:	b570      	push	{r4, r5, r6, lr}
    79ca:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    79cc:	2300      	movs	r3, #0
	__asm__ volatile(
    79ce:	f04f 0220 	mov.w	r2, #32
    79d2:	f3ef 8611 	mrs	r6, BASEPRI
    79d6:	f382 8812 	msr	BASEPRI_MAX, r2
    79da:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    79de:	f06f 0015 	mvn.w	r0, #21
    79e2:	e004      	b.n	79ee <z_abort_timeout+0x26>
	__asm__ volatile(
    79e4:	f386 8811 	msr	BASEPRI, r6
    79e8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    79ec:	2301      	movs	r3, #1
    79ee:	461d      	mov	r5, r3
    79f0:	b93b      	cbnz	r3, 7a02 <z_abort_timeout+0x3a>
	return node->next != NULL;
    79f2:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    79f4:	2b00      	cmp	r3, #0
    79f6:	d0f5      	beq.n	79e4 <z_abort_timeout+0x1c>
			remove_timeout(to);
    79f8:	4620      	mov	r0, r4
    79fa:	f7ff ffce 	bl	799a <remove_timeout>
			ret = 0;
    79fe:	4628      	mov	r0, r5
    7a00:	e7f0      	b.n	79e4 <z_abort_timeout+0x1c>
}
    7a02:	bd70      	pop	{r4, r5, r6, pc}

00007a04 <z_get_next_timeout_expiry>:
{
    7a04:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    7a06:	2300      	movs	r3, #0
	__asm__ volatile(
    7a08:	f04f 0220 	mov.w	r2, #32
    7a0c:	f3ef 8411 	mrs	r4, BASEPRI
    7a10:	f382 8812 	msr	BASEPRI_MAX, r2
    7a14:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    7a18:	f04f 30ff 	mov.w	r0, #4294967295
    7a1c:	e006      	b.n	7a2c <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    7a1e:	f7fd fb1d 	bl	505c <next_timeout>
	__asm__ volatile(
    7a22:	f384 8811 	msr	BASEPRI, r4
    7a26:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7a2a:	2301      	movs	r3, #1
    7a2c:	2b00      	cmp	r3, #0
    7a2e:	d0f6      	beq.n	7a1e <z_get_next_timeout_expiry+0x1a>
}
    7a30:	bd10      	pop	{r4, pc}

00007a32 <z_set_timeout_expiry>:
{
    7a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a34:	4606      	mov	r6, r0
    7a36:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    7a38:	2300      	movs	r3, #0
	__asm__ volatile(
    7a3a:	f04f 0220 	mov.w	r2, #32
    7a3e:	f3ef 8511 	mrs	r5, BASEPRI
    7a42:	f382 8812 	msr	BASEPRI_MAX, r2
    7a46:	f3bf 8f6f 	isb	sy
    7a4a:	e00a      	b.n	7a62 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    7a4c:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    7a4e:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7a52:	2801      	cmp	r0, #1
    7a54:	dd00      	ble.n	7a58 <z_set_timeout_expiry+0x26>
    7a56:	b97c      	cbnz	r4, 7a78 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    7a58:	f385 8811 	msr	BASEPRI, r5
    7a5c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7a60:	2301      	movs	r3, #1
    7a62:	461c      	mov	r4, r3
    7a64:	b97b      	cbnz	r3, 7a86 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    7a66:	f7fd faf9 	bl	505c <next_timeout>
			      || (ticks <= next_to);
    7a6a:	f1b0 3fff 	cmp.w	r0, #4294967295
    7a6e:	d0ed      	beq.n	7a4c <z_set_timeout_expiry+0x1a>
    7a70:	42b0      	cmp	r0, r6
    7a72:	dbec      	blt.n	7a4e <z_set_timeout_expiry+0x1c>
    7a74:	2401      	movs	r4, #1
    7a76:	e7ea      	b.n	7a4e <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7a78:	4639      	mov	r1, r7
    7a7a:	42b0      	cmp	r0, r6
    7a7c:	bfa8      	it	ge
    7a7e:	4630      	movge	r0, r6
    7a80:	f7fa ffca 	bl	2a18 <sys_clock_set_timeout>
    7a84:	e7e8      	b.n	7a58 <z_set_timeout_expiry+0x26>
}
    7a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007a88 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7a88:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7a8a:	f7fd fbf9 	bl	5280 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7a8e:	bd08      	pop	{r3, pc}

00007a90 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7a90:	b900      	cbnz	r0, 7a94 <z_impl_k_busy_wait+0x4>
    7a92:	4770      	bx	lr
{
    7a94:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7a96:	f7fe fadf 	bl	6058 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7a9a:	bd08      	pop	{r3, pc}

00007a9c <k_heap_init>:
{
    7a9c:	b510      	push	{r4, lr}
    7a9e:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    7aa2:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    7aa4:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    7aa6:	f7fd fea9 	bl	57fc <sys_heap_init>
}
    7aaa:	bd10      	pop	{r4, pc}

00007aac <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7aac:	4770      	bx	lr
	...
